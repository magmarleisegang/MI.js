function OpenOdoPopup()
{
    var n = new Date,
        t = n.getHours().doubleDigit() + ":" + n.getMinutes().doubleDigit();
    $("#txtNewOdoTime").val(t),
    $("#txtNewOdoComment").val(null),
    $("#txtNewOdoValue").val(null),
    $("#dvOdoreadings div.NewOdo").show(),
    $("#imgOk").show(),
    SetOdoError(),
    $.blockUI({
        message: $("#dvOdoreadings"), css: {
                borderWidth: "0px", top: "0px", left: "0px"
            }
    }),
    setTimeout(function()
    {
        $("#txtNewOdoValue").focus()
    }, 20)
}
function OpenExpensePopup()
{
    var n = new Date,
        t = n.getHours().doubleDigit() + ":" + n.getMinutes().doubleDigit();
    $("#txtNewExpTime").val(t),
    $("#txtNewExpComment").val(null),
    $("#txtNewExpValue").val(null),
    $("#dvExpense div.NewExp").show(),
    $("#imgOk").show(),
    SetExpError(),
    $.blockUI({
        message: $("#dvExpense"), css: {
                borderWidth: "0px", top: "0px", left: "0px"
            }
    }),
    setTimeout(function()
    {
        $("#txtNewExpType").focus()
    }, 20)
}
function UpdateDropDowns(n, t, i)
{
    var o,
        l,
        e,
        s,
        r,
        h;
    if (arguments.length == 1)
    {
        for ($("#ddlOpeningReading option[value=" + n + "]").remove(), $("#ddlClosingReading option[value=" + n + "]").remove(), r = n; r < s + 1; r++)
            $("#ddlOpeningReading option[value=" + r + "]").val(r - 1),
            $("#ddlClosingReading option[value=" + r + "]").val(r - 1);
        return
    }
    var a = $("#ddlOpeningReading option:selected"),
        v = $("#ddlClosingReading option:selected"),
        c = $("#ddlOpeningReading option[value=-1]").html();
    $("#ddlOpeningReading option[value=-1]").remove(),
    o = $("#ddlClosingReading option[value=-1]").html(),
    $("#ddlClosingReading option[value=-1]").remove();
    var u = '<option value="' + n + '">' + t + " - " + i + distanceUnit + "<\/option>",
        f = !1,
        y = $("#ddlOpeningReading option:eq(1)");
    if (n < y.val() && ($("#ddlOpeningReading option:eq(1)").before(u), $("#ddlClosingReading option:eq(1)").before(u), f = !0), f == !1 && (l = $("#ddlOpeningReading option:last"), n > l.val() && ($("#ddlOpeningReading option:last").after(u), $("#ddlClosingReading option:last").after(u), f = !0)), f == !1)
        for (e = $("#ddlOpeningReading option"), s = e.length, r = 0; r < s - 1; r++)
            if (n < e[r].value)
            {
                h = e[r].value,
                $("#ddlOpeningReading option[value=" + h + "]").before(u),
                $("#ddlClosingReading option[value=" + h + "]").before(u);
                break
            }
    c != undefined && $("#ddlOpeningReading").append('<option value="-1">' + c + "<\/option>"),
    o != undefined && $("#ddlClosingReading").append('<option value="-1">' + o + "<\/option>"),
    $("#ddlOpeningReading option[value=" + a.val() + "]").prop("selected", !0),
    $("#ddlClosingReading option[value=" + v.val() + "]").prop("selected", !0)
}
function ResetOdoDropDowns()
{
    $("#ddlOpeningReading option[value='-1']").remove(),
    $("#ddlClosingReading option[value='-1']").remove(),
    $("#ddlClosingReading option").prop("disabled", !1),
    $("#ddlOpeningReading option[value=0]").prop("selected", !0),
    $("#ddlClosingReading option[value=0]").prop("selected", !0),
    SetOdoError()
}
function PopulateLogbookPopup()
{
    var n;
    $("#txtTaxDescription").val(m_EditingLogbook.sDescription),
    $("#txtTaxDescription").attr("title", m_EditingLogbook.sDescription),
    SetLogbookError(),
    m_EditingLogbook.sOpeningReadingDate != null && m_EditingLogbook.iOpeningOdoReading != null ? (n = FindVal($("#ddlOpeningReading  option"), m_EditingLogbook.iOpeningOdoReading), n == undefined || n == "" ? $("#ddlOpeningReading option[value=0]").prop("selected", "selected") : $("#ddlOpeningReading option[value=" + n + "]").prop("selected", !0)) : $("#ddlOpeningReading option[value=0]").prop("selected", "selected"),
    m_EditingLogbook.sClosingReadingDate != null && m_EditingLogbook.iClosingOdoReading != null ? (n = FindVal($("#ddlClosingReading  option"), m_EditingLogbook.iClosingOdoReading), n == undefined || n == "" ? $("#ddlClosingReading option[value=0]").prop("selected", "selected") : $("#ddlClosingReading option[value=" + n + "]").prop("selected", "selected")) : $("#ddlClosingReading option[value=0]").prop("selected", "selected"),
    $("#txtTaxpayerName").val(m_EditingLogbook.sTaxPayerName),
    $("#txtTaxReferenceNumber").val(m_EditingLogbook.sTaxReferenceNumber),
    $("#ddlOpeningReading").change()
}
function FindVal(n, t)
{
    var i;
    return n.each(function(n, r)
        {
            var u = r.text,
                f = r.value,
                e;
            if (f != 0 && (u = u.split(" - "), e = parseInt(u[1].replace(/\D/g, "")), e == t))
                return i = f, !1
        }), i
}
function SaveNewOdo()
{
    var o = null,
        r = null,
        f,
        e,
        n,
        i,
        t,
        u;
    if ($(".selected").attr("id").indexOf("v") == 0 && (o = $(".selected").attr("id").substr(1)), $(".selected").attr("id").indexOf("t") == 0 && (r = $(".selected").attr("id").substr(1)), f = $("#txtNewOdoDate").val(), e = CheckDate("#txtNewOdoDate", ""), e !== !0)
        return SetOdoError(e), !1;
    if (n = $("#txtNewOdoTime").val(), n.isNullOrEmpty())
        return SetOdoError("Time can't be empty"), !1;
    if (n.replace(":", "0").search(/\D/g) > -1)
        return SetOdoError("Time can't contain letters."), !1;
    if (i = n.split(":"), i.length != 2)
        return SetOdoError("Invalid time entered."), !1;
    if (parseInt(i[0]) > 24)
        return SetOdoError("Invalid hour value entered."), !1;
    if (parseInt(i[1]) > 59)
        return SetOdoError("Invalid minute value entered."), !1;
    if (n = parseInt(i[0]).doubleDigit() + ":" + parseInt(i[1]).doubleDigit(), $("#txtNewOdoTime").val(n), t = $("#txtNewOdoValue").val(), t.isNullOrEmpty())
        return SetOdoError("Please enter an odometer reading."), !1;
    if (t.search(/\D/g) > -1)
        return SetOdoError("Odometer reading can't contain letters."), !1;
    t = parseInt(t);
    var s = $("#txtNewOdoComment").val().toTrimmedValue(),
        h = "/ReportingWebService.asmx/SaveOdoReading",
        u = {
            vehicleId: o, date: f, time: n, value: t, comment: s
        };
    r != null && r != "" && (h = "/ReportingWebService.asmx/SaveTrailerOdoReading", u = {
        trailerId: r, date: f, time: n, value: t, comment: s
    }),
    DoAjax({
        data: JSON.stringify(u), url: h, successCallback: function(n)
            {
                var f,
                    e,
                    i,
                    o;
                if (n.d != undefined)
                    if (n.d[0] == !0)
                    {
                        if (n.d[2] != null)
                        {
                            var t = n.d[2],
                                s = t.Date + " " + t.Time,
                                r = ['<tr id="' + t.Index + '"><td>', t.Date, "<\/td><td>", t.Time, '<\/td><td class="right">', t.Reading.formatThou(","), "<\/td><td>", u.comment, '<\/td><td class="delete"><a href="' + t.Index + '"  title="Delete">X<\/a><\/td><\/tr>'];
                            if ($("#trNoOdo").length > 0)
                                $("#trNoOdo").remove(),
                                $("#tblOdoReadings tbody").append(r.join(""));
                            else if (t.Index < $("#tblOdoReadings > tbody:last tr:eq(0)").attr("id"))
                                $("#tblOdoReadings > tbody:last tr:eq(0)").before(r.join(" "));
                            else if (t.Index > $("#tblOdoReadings tbody tr:last").attr("id"))
                                $("#tblOdoReadings tbody").append(r.join(" "));
                            else
                                for (f = $("#tblOdoReadings > tbody:last tr"), e = f.length, i = 0; i < e; i++)
                                    if (t.Index < f[i].id)
                                    {
                                        $(f[i]).before(r.join(" "));
                                        break
                                    }
                            n.d.length == 3 && (o = parseInt(n.d[1]), $("#lblOdoEstimate").text(o.formatThou(",")), UpdateDropDowns(t.Index, s, t.Reading.formatThou(" "))),
                            m_fLogbookPopupOpen ? UpdateAndShowLogbookDiv(t.Index) : $.unblockUI()
                        }
                    }
                    else if (n.d.length > 1 && n.d[1].indexOf("ER") == 0)
                        return SetOdoError(n.d[1].substring(n.d[1].indexOf(":") + 1)), !1
            }
    })
}
function SaveNewExpense()
{
    var e = $(".selected").attr("id").substr(1),
        o = $("#txtNewExpDate").val(),
        r = CheckDate("#txtNewExpDate", ""),
        n,
        t,
        i,
        u,
        f;
    if (r !== !0)
        return SetExpError(r), !1;
    if (n = $("#txtNewExpTime").val(), n.isNullOrEmpty())
        return SetExpError("Time can't be empty"), !1;
    if (n.replace(":", "0").search(/\D/g) > -1)
        return SetExpError("Time can't contain letters."), !1;
    if (t = n.split(":"), t.length != 2)
        return SetExpError("Invalid time entered."), !1;
    if (parseInt(t[0]) > 24)
        return SetExpError("Invalid hour value entered."), !1;
    if (parseInt(t[1]) > 59)
        return SetExpError("Invalid minute value entered."), !1;
    if (n = parseInt(t[0]).doubleDigit() + ":" + parseInt(t[1]).doubleDigit(), $("#txtNewExpTime").val(n), i = $("#txtNewExpValue").val(), i.isNullOrEmpty())
        return SetExpError("Please enter an expense value."), !1;
    if (i.replace(/\./, 0).search(/\D/g) > -1)
        return SetExpError("Expense value can't contain letters."), !1;
    i = parseFloat(i),
    u = $("#txtNewExpComment").val().toTrimmedValue(),
    f = {
        vehicleId: e, date: o, time: n, type: $("#ddlNewExpType").val().toString(), value: i, comment: u
    },
    DoAjax({
        data: JSON.stringify(f), url: "/ReportingWebService.asmx/SaveExpense", successCallback: function(n)
            {
                var u,
                    f,
                    i;
                if (n.d != undefined)
                    if (n.d[0] == !0)
                    {
                        if (n.d[1] != null)
                        {
                            var t = n.d[1],
                                e = t.Date + " " + t.Time,
                                r = ['<tr id="' + t.Index + '"><td>', t.Date, "<\/td><td>", t.Time, "<\/td><td>", t.ExpenseType, '<\/td><td class="right">', t.Value.toFixed(2), "<\/td><td>", t.Comment, '<\/td><td class="delete"><a href="', t.Index, '" title="Delete">X<\/a><\/td><\/tr>'];
                            if ($("#trNoExp").length > 0)
                                $("#trNoExp").remove(),
                                $("#tblExpenses tbody").append(r.join(""));
                            else if (t.Index < $("#tblExpenses > tbody:last tr:eq(0)").attr("id"))
                                $("#tblExpenses > tbody:last tr:eq(0)").before(r.join(" "));
                            else if (t.Index > $("#tblExpenses tbody tr:last").attr("id"))
                                $("#tblExpenses tbody").append(r.join(""));
                            else
                                for (u = $("#tblExpenses > tbody:last tr"), f = u.length, i = 0; i < f; i++)
                                    if (t.Index < u[i].id)
                                    {
                                        $(u[i]).before(r.join(" "));
                                        break
                                    }
                            $.unblockUI()
                        }
                    }
                    else if (n.d.length > 1 && n.d[1].indexOf("ER") == 0)
                        return SetExpError(n.d[1].substring(n.d[1].indexOf(":") + 1)), !1
            }
    })
}
function SetOdoError(n)
{
    n ? $("#dvOdoreadings div.error").text(n).css("display", "block") : $("#dvOdoreadings div.error").css("display", "none")
}
function SetExpError(n)
{
    n ? $("#dvExpense div.error").text(n).css("display", "block") : $("#dvExpense div.error").css("display", "none")
}
function SetLicError(n)
{
    n ? $("#dvRucLicence div.error").text(n).css("display", "block") : $("#dvRucLicence div.error").css("display", "none")
}
function CompareAndSave()
{
    var i = !1,
        n,
        t,
        r,
        u;
    return ($("#txtTaxDescription").val().compare(m_EditingLogbook.sDescription) == !1 && (m_EditingLogbook.sDescription = $("#txtTaxDescription").val().toTrimmedValue(), i = !0), n = parseInt($("#ddlOpeningReading option:selected").val()), t = parseInt($("#ddlClosingReading option:selected").val()), n <= 0) ? (SetLogbookError("Please select an opening odo reading."), m_EditingLogbook = null, !1) : t <= 0 ? (SetLogbookError("Please select a closing odo reading."), m_EditingLogbook = null, !1) : n >= t ? (SetLogbookError("The logbook opening date must be earlier than the logbook closing date."), m_EditingLogbook = null, !1) : (m_EditingLogbook.sOpeningReadingDate = n, m_EditingLogbook.sClosingReadingDate = t, $("#txtTaxpayerName").val().compare(m_EditingLogbook.sTaxPayerName) == !1 && (m_EditingLogbook.sTaxPayerName = $("#txtTaxpayerName").val().toTrimmedValue(), i = !0), $("#txtTaxReferenceNumber").val().compare(m_EditingLogbook.sTaxReferenceNumber) == !1 && (m_EditingLogbook.sTaxReferenceNumber = $("#txtTaxReferenceNumber").val().toTrimmedValue(), i = !0), r = !0, u = {logbook: m_EditingLogbook}, DoAjax({
                data: JSON.stringify(u), url: "/ReportingWebService.asmx/SaveLogBook", successCallback: function(n)
                    {
                        n.d == null ? (SetLogbookError("Oops! We failed to save the changes you made to this logbook. Please try again."), r = !1) : (m_EditingLogbook = n.d, UpdateLogbookTable(m_EditingLogbook), $.unblockUI(), ResetOdoDropDowns())
                    }
            }), r)
}
function CreateAndSave()
{
    var n,
        t,
        i,
        r;
    return (SetLogbookError(), m_EditingLogbook = {}, m_EditingLogbook.sDescription = $("#txtTaxDescription").val().toTrimmedValue(), n = parseInt($("#ddlOpeningReading option:selected").val()), t = parseInt($("#ddlClosingReading option:selected").val()), n <= 0) ? (SetLogbookError("Please select an opening odo reading."), m_EditingLogbook = null, !1) : t <= 0 ? (SetLogbookError("Please select a closing odo reading."), m_EditingLogbook = null, !1) : n >= t ? (SetLogbookError("The logbook opening date must be earlier than the logbook closing date."), m_EditingLogbook = null, !1) : (m_EditingLogbook.sOpeningReadingDate = n, m_EditingLogbook.sClosingReadingDate = t, m_EditingLogbook.sTaxPayerName = $("#txtTaxpayerName").val().toTrimmedValue(), m_EditingLogbook.sTaxReferenceNumber = $("#txtTaxReferenceNumber").val().toTrimmedValue(), m_EditingLogbook.iVehicleId = $(".selected").attr("id").substr(1), i = !0, r = {logbook: m_EditingLogbook}, DoAjax({
                data: JSON.stringify(r), url: "/ReportingWebService.asmx/SaveLogBook", successCallback: function(n)
                    {
                        n.d == null ? SetLogbookError("Oops! We failed to create this logbook for you. Please try again.") : (m_EditingLogbook = n.d, UpdateLogbookTable(m_EditingLogbook), $.unblockUI(), ResetOdoDropDowns())
                    }
            }), i)
}
function SetLogbookError(n)
{
    n ? $("#dvLogbook div.error").text(n).css("display", "block") : $("#dvLogbook div.error").css("display", "none")
}
function CheckDate(n, t, i)
{
    var e = i ? n : $(n).val(),
        r;
    if (e.isNullOrEmpty())
        return (t == "" ? "Date " : t) + "can't be empty.";
    if (e.replace(/[\/-]/g, "0").search(/\D/g) > -1)
        return (t == "" ? "Date " : t) + "can't contain letters.";
    if (r = e.split(DATESEPARATER), r.length < 3)
        return "Invalid " + (t == "" ? "date." : t);
    var o = parseInt(r[0]),
        u = parseInt(r[1]),
        f = parseInt(r[2]);
    return u > 12 ? "Invalid " + t + "month." : u.isIn([1, 3, 5, 7, 8, 10, 12]) && f > 31 || u.isIn([4, 6, 9, 11]) && f > 30 || u == 2 && (o % 4 == 0 && f > 29 || o % 4 != 0 && f > 28) ? "Invalid " + t + "day." : !0
}
function CenterPopups()
{
    function t(n, t)
    {
        var i = $("#" + n),
            r = i.height(),
            u = i.width();
        i.css("left", (t.width - u) / 2 + "px"),
        i.css("top", (t.height - r) / 2 + "px")
    }
    var n = {
            height: $(window).height(), width: $(window).width()
        };
    t("dvOdoreadings", n),
    t("dvLogbook", n),
    t("dvExpense", n),
    t("dvRucLicence", n),
    t("dvRucLicenceReport", n)
}
function UpdateAndShowLogbookDiv(n)
{
    m_fLogbookPopupOpen = !1,
    n != undefined && (m_fAddStartOdo == !0 ? ($("#ddlOpeningReading option[value=" + n + "]").prop("selected", !0), $("#ddlOpeningReading").change()) : $("#ddlClosingReading option[value=" + n + "]").prop("selected", "selected")),
    $.blockUI({
        message: $("#dvLogbook"), css: {
                borderWidth: "0px", top: "0px", left: "0px"
            }
    })
}
function UpdateLogbookTable(n)
{
    var i = [n.iVehicleId, n.bTaxYear, n.bLogBookNumber].join("-"),
        f = $("#" + i),
        u,
        r,
        t;
    f.length == 0 ? (t = (n.sOpeningReadingDate == null ? "" : $.trim(n.sOpeningReadingDate).substr(0, 10)) + " - " + (n.sClosingReadingDate == null ? "" : $.trim(n.sClosingReadingDate).substr(0, 10)), u = ['<tr id="', i, '"><td>', t, "<\/td><td>", n.sDescription, '<\/td><td><a href="#" title="Download Report">Business vs Private<\/a>', forceBusinessComment === !0 && n.fMissingBusinessComments ? '<\/td><td colspan="2">' : '<\/td><td><a href="#" title="Download Report">Detail<\/a><\/td><td><a href="#" title="Download Report">Summary<\/a>', forceBusinessComment !== null && n.fMissingBusinessComments === !0 ? '<\/td><td class="comment-warning"  title="Click to download list">*Some trips are missing comments' : "<\/td><td>", '<\/td><td><a href="#" >Edit<\/a><\/td><td class="delete"><a href="#" title="Delete">X<\/a><\/td><\/tr>'], $("#tblLogbooks tbody").append(u.join("")), $("#trNoLogbooks").remove()) : (r = $("#" + i + " td"), t = (n.sOpeningReadingDate == null ? "" : $.trim(n.sOpeningReadingDate).substr(0, 10)) + " - " + (n.sClosingReadingDate == null ? "" : $.trim(n.sClosingReadingDate).substr(0, 10)), $(r[0]).text(t), $(r[1]).text(n.sDescription))
}
function alertUI(n, t)
{
    n ? ($.blockUI({
        message: n, css: {
                fontFamily: "Verdana", fontSize: "10pt", color: "#505050", padding: "20px"
            }
    }), t && setTimeout(function()
    {
        $.unblockUI()
    }, t)) : $.unblockUI()
}
var m_EditingLogbook,
    m_fLogbookPopupOpen,
    m_fAddStartOdo,
    DATESEPARATER = "-";
$(document).ready(function()
{
    m_fLogbookPopupOpen = !1;
    var n = {maxDate: new Date};
    SetupDatepicker("#txtNewOdoDate", {
        icon: "#imgNewOdoCal", dpo: n
    }),
    SetupDatepicker("#txtNewExpDate", {
        icon: "#imgNewExpCal", dpo: n
    }),
    SetupDatepicker("#txtLicPurchaseDate", {
        icon: "#imgNewLicCal", dpo: n
    }),
    SetupDatepicker("#txtLicStartDate", {
        icon: "#imgNewLicStartDateCal", dpo: n
    }),
    SetupDatepicker("#txtLicCloseDate", {
        icon: "#imgCloseRucLicCal", dpo: n
    }),
    $(window).resize(CenterPopups),
    CenterPopups(),
    $("#ctrlVehicleTabs li").click(function(n)
    {
        if (n.preventDefault(), n.stopPropagation(), this.className.indexOf("selected") == -1)
        {
            var i = this.id.substr(1),
                t = document.URL;
            t = t.substring(0, t.indexOf("?") == -1 ? t.length : t.indexOf("?")).replace("#", ""),
            document.location = t + "?v=" + i
        }
        else
            return !1
    }),
    $("#ctrlTrailerTabs li").click(function(n)
    {
        if (n.preventDefault(), n.stopPropagation(), this.className.indexOf("selected") == -1)
        {
            var i = this.id.substr(1),
                t = document.URL;
            t = t.substring(0, t.indexOf("?") == -1 ? t.length : t.indexOf("?")).replace("#", ""),
            document.location = t + "?t=" + i
        }
        else
            return !1
    }),
    $("div.tab").each(function(n, t)
    {
        (t.offsetHeight < t.scrollHeight || t.offsetWidth < t.scrollWidth) && $("div.tab ul").mouseenter(function()
        {
            $(this).parent().removeClass("tab-overflow")
        }).mouseleave(function()
        {
            $(this).parent().addClass("tab-overflow")
        })
    }),
    $(".AddOdo").click(function(n)
    {
        return n.preventDefault(), n.stopPropagation(), this.id == "imgOk" ? SaveNewOdo() : $("#dvOdoreadings").css("display") == "none" ? OpenOdoPopup() : ($("#spNewOdoCalender").css("display", "none"), m_fLogbookPopupOpen ? UpdateAndShowLogbookDiv() : $.unblockUI()), !1
    }),
    $(".AddExpense").click(function(n)
    {
        return n.preventDefault(), n.stopPropagation(), this.id == "imgExpOK" ? SaveNewExpense() : $("#dvExpense").css("display") == "none" ? OpenExpensePopup() : ($("#spNewExpCalender").css("display", "none"), $.unblockUI()), !1
    }),
    $(".btnRUCLicence").click(function(n)
    {
        return n.preventDefault(), n.stopPropagation(), this.id == "imgRUCOk" ? ($("#dvRucLicence div.NewRucLicence").css("display") != "none" && ($("#hdnRUCLicNum").val() == null || $("#hdnRUCLicNum").val() == "" ? SaveNewRUCLicence() : $("#hdnRUCLicNum").val() != null && EditRUCLicence($("#hdnRUCLicNum").val())), $("#dvRucLicence div.CloseRucLicence").css("display") != "none" && CloseRUCLicence()) : $("#dvRucLicence").css("display") == "none" ? n.target.getAttribute("data-addedit") == "add" ? ($("#RUCLicHeading")[0].innerHTML = "Capture RUC Licence", $("#hdnRUCLicNum").val(null), OpenRUCLicencePopup()) : n.target.getAttribute("data-addedit") == "edit" && ($("#RUCLicHeading")[0].innerHTML = "Edit RUC Licence", $("#hdnRUCLicNum").val(n.target.getAttribute("data-id")), LoadRUCLicence(n.target.getAttribute("data-id"))) : ($("#spNewRUCLicenceCalender").css("display", "none"), $.unblockUI()), !1
    }),
    $(".CloseRUCLicence").click(function(n)
    {
        return n.preventDefault(), n.stopPropagation(), this.id == "imgCloseRUCOk" ? ($("#dvRucLicence div.NewRucLicence").css("display") != "none" && SaveNewRUCLicence(), $("#dvRucLicence div.CloseRucLicence").css("display") != "none" && CloseRUCLicence(!1)) : $("#dvRucLicence").css("display") == "none" ? ($("#hdnSelectedLicId").val(n.target.getAttribute("data-id")), n.target.getAttribute("data-type") == "c" ? OpenCloseRUCLicencePopup() : CloseRUCLicence(!0)) : $.unblockUI(), !1
    }),
    $(".btnRUCLicenceReport").click(function()
    {
        OpenRUCLicenceReportPopup()
    }),
    $("#imgRucReportOk").click(function()
    {
        var n = [],
            t = $("#txtReportDesc").val();
        if ($("input.chkReportLicence:checkbox:checked").each(function()
        {
            n.push($(this)[0].getAttribute("data-id"))
        }), t.isNullOrEmpty())
        {
            $("#lblReportDesc")[0].innerHTML = "Brief Description of Off-Road Travel <span style='color:red; font-weight: bold;'>(Required) <span>: ",
            $("#txtReportDesc").focus();
            return
        }
        alertUI("Generating report. Please wait..."),
        DoAjax({
            data: JSON.stringify({
                licenceIds: n, userDescription: t
            }), url: "/ReportingWebService.asmx/RenderRUCLicenceReport", successCallback: function(n)
                {
                    if (n.d.indexOf("ER") == 0)
                        return alertUI(n.d.split(":")[1], 3e3), !1;
                    var t = "Reports/ReportRenderer.ashx?GUID=" + n.d;
                    document.location = t,
                    $("html").css("cursor", "default"),
                    alertUI()
                }, failureCallback: function(n, t)
                {
                    t != undefined ? alertUI(t, 5e3) : alertUI(),
                    LogError(n.responseText, "Logbook Page", "169")
                }
        })
    }),
    $("#imgRucReportCancel").click(function()
    {
        $.unblockUI()
    }),
    $(".DeleteOdo").click(function(n)
    {
        var u,
            i,
            f,
            r,
            o;
        if (n.preventDefault(), n.stopPropagation(), n.target.tagName == "A")
        {
            for (var u = $(".selected").attr("id").substr(1), e = $(n.target).attr("href"), s = n.target, t = s; t.tagName != "TR"; )
                t = t.parentNode;
            u = null,
            i = null,
            $(".selected").attr("id").indexOf("v") == 0 && (u = $(".selected").attr("id").substr(1)),
            $(".selected").attr("id").indexOf("t") == 0 && (i = $(".selected").attr("id").substr(1)),
            f = "/ReportingWebService.asmx/DeleteOdoReading",
            r = {
                vehicleId: u, datetime: e
            },
            i != null && i != "" && (f = "/ReportingWebService.asmx/DeleteTrailerOdoReading", r = r = {
                trailerId: i, datetime: e
            }),
            o = $.trim(t.children[0].innerHTML) + " " + $.trim(t.children[1].innerHTML),
            confirmUI("Are you sure you want to delete the odometer reading " + $.trim(t.children[2].innerHTML) + " for " + o + "?", !0, function(n)
            {
                return n == !0 ? (alertUI("Deleting odometer reading..."), DoAjax({
                        data: JSON.stringify(r), url: f, successCallback: function(n)
                            {
                                if (n.d[0] == !0)
                                {
                                    if ($(t).remove(), $("#tblOdoReadings tbody tr").length == 0)
                                        if ($("#trNoOdo").length == 0)
                                            $("#tblOdoReadings tbody").append("<tr id='trNoOdo'><td colspan='5'>No odo readings to display<\/td><\/tr>");
                                        else
                                            $("#trNoOdo").show();
                                    n.d.length >= 2 && ($("#lblOdoEstimate").text(parseInt(n.d[1]).formatThou(",")), UpdateDropDowns(parseInt(n.d[2]))),
                                    alertUI()
                                }
                                else
                                    n.d[1].indexOf("ER") == 0 ? alertUI(n.d[1].split(":")[1], 3e3) : alertUI("Oops! We failed to delete this odometer reading.", 5e3)
                            }
                    }), !1) : !0
            })
        }
    }),
    $(".DeleteExpense").click(function(n)
    {
        var i;
        if (n.preventDefault(), n.stopPropagation(), n.target.tagName == "A")
        {
            for (var r = $(".selected").attr("id").substr(1), u = $(n.target).attr("href"), f = n.target, t = f; t.tagName != "TR"; )
                t = t.parentNode;
            i = $.trim(t.children[0].innerHTML) + " " + $.trim(t.children[1].innerHTML),
            confirmUI("Are you sure you want to delete " + $.trim(t.children[2].innerHTML) + " expense for " + i + "?", !0, function(n)
            {
                return n === !0 ? (alertUI("Deleting expense..."), DoAjax({
                        data: '{"vehicleId":' + r + ' , "index":"' + u + '" }', url: "/ReportingWebService.asmx/DeleteExpense", successCallback: function(n)
                            {
                                if (n.d[0] == !0)
                                {
                                    if ($(t).remove(), $("#tblExpReadings tbody tr").length == 0)
                                        if ($("#trNoExp").length == 0)
                                            $("#tblExpReadings tbody").append("<tr id='trNoExp'><td colspan='6'>No expenses to display<\/td><\/tr>");
                                        else
                                            $("#trNoExp").show();
                                    alertUI()
                                }
                                else
                                    n.d[1].indexOf("ER") == 0 ? alertUI(n.d[1].split(":")[1], 3e3) : alertUI("Oops! We failed to delete this expense.", 5e3)
                            }
                    }), !1) : !0
            })
        }
    }),
    $("#ddlOpeningReading").change(function()
    {
        var n = this.value,
            t = $("#ddlClosingReading option:selected").val(),
            i = t <= 0 || t > n;
        $("#ddlClosingReading option").each(function(t, r)
        {
            var u = $(r);
            r.value <= "0" || (n >= r.value ? (u.prop("disabled", !0), u.css("display", "none")) : (i == !1 && (u.prop("selected", !0), i = !0), $(r).prop("disabled", !1), u.css("display", "block")))
        })
    }),
    $(".LogbookView").click(function(n)
    {
        return n.preventDefault(), n.stopPropagation(), this.id == "imgLVCancel" ? ($.unblockUI(), ResetOdoDropDowns()) : this.id == "imgLVOk" ? m_EditingLogbook != null ? CompareAndSave() : m_EditingLogbook == null && CreateAndSave() : $(this).text().indexOf("Add") == 0 && (SetLogbookError(), $("#hLogbookEdit").text("Add New Logbook"), m_EditingLogbook = null, $("#txtTaxDescription").val(null), ResetOdoDropDowns(), $.blockUI({
                        message: $("#dvLogbook"), css: {
                                borderWidth: "0px", top: "0px", left: "0px"
                            }
                    })), !1
    }),
    $("#tblLogbooks").click(function(n)
    {
        var i,
            r,
            t;
        if (n.preventDefault(), n.stopPropagation(), n.target.tagName == "A")
        {
            for (i = $(n.target).text(), t = n.target; t.tagName != "TR"; )
                t = t.parentNode;
            if (i.indexOf("Edit") == 0)
                $("#hLogbookEdit").text("Edit Logbook Details"),
                m_EditingLogbook != null & t.id == $("#hidLogbookId").val() ? (PopulateLogbookPopup(), $.blockUI({
                    message: $("#dvLogbook"), css: {
                            borderWidth: "0px", top: "0px", left: "0px"
                        }
                })) : (SetLogbookError(), m_EditingLogbook = null, $("#hidLogbookId").val(t.id), DoAjax({
                        data: '{"logbookidentifier":"' + t.id + '"}', url: "/ReportingWebService.asmx/GetLogBook", successCallback: function(n)
                            {
                                m_EditingLogbook = n.d,
                                m_EditingLogbook.sOpeningReadingDate = n.d.sOpeningReadingDate,
                                m_EditingLogbook.sClosingReadingDate = n.d.sClosingReadingDate,
                                PopulateLogbookPopup(),
                                $.blockUI({
                                    message: $("#dvLogbook"), css: {
                                            borderWidth: "0px", top: "0px", left: "0px"
                                        }
                                })
                            }
                    }));
            else if (i.indexOf("X") == 0)
                confirmUI("Are you sure you want to delete the logbook for  " + $.trim(t.children[0].innerHTML) + '  ("' + $.trim(t.children[1].innerHTML) + '")?', !0, function(n)
                {
                    return n == !0 ? (alertUI("Deleting logbook..."), DoAjax({
                            data: '{"logbookidentifier":"' + t.id + '"}', url: "/ReportingWebService.asmx/DeleteLogBook", successCallback: function(n)
                                {
                                    if (n.d == !0)
                                    {
                                        if ($(t).remove(), $("#tblLogbooks tbody tr").length == 0)
                                            if ($("#trNoLogbooks").length == 0)
                                                $("#tblLogbooks tbody").append("<tr id='trNoLogbooks'><td colspan='7'> No logbooks to display<\/td><\/tr>");
                                            else
                                                $("#tblLogbooks").show();
                                        alertUI()
                                    }
                                    else
                                        alertUI("We failed to delete this logbook. Please try again later.", 3e3)
                                }
                        }), !1) : !0
                });
            else
                return r = i.indexOf("Business") == 0 ? null : i.indexOf("Detail") == 0 ? !1 : !0, alertUI("Generating report. Please wait..."), DoAjax({
                            data: '{"logbookidentifier":"' + t.id + '", "summary":' + r + "}", url: "/ReportingWebService.asmx/RenderLogBook", successCallback: function(n)
                                {
                                    if (n.d.indexOf("ER") == 0)
                                        return alertUI(n.d.split(":")[1], 3e3), !1;
                                    var t = "Reports/ReportRenderer.ashx?GUID=" + n.d;
                                    document.location = t,
                                    $("html").css("cursor", "default"),
                                    alertUI()
                                }
                        }), !1
        }
        else if (n.target.tagName == "TD" && $(n.target).hasClass("comment-warning"))
        {
            for (alertUI("Generating report. Please wait..."), t = n.target; t.tagName != "TR"; )
                t = t.parentNode;
            DoAjax({
                data: '{"logbookidentifier":"' + t.id + '"}', url: "/PrivatePages/Logbook.aspx/MissingCommentReport", successCallback: function(n)
                    {
                        if (n.d.indexOf("ER") == 0)
                            return alertUI(n.d.split(":")[1], 3e3), !1;
                        var t = "Reports/ReportRenderer.ashx?GUID=" + n.d;
                        document.location = t,
                        $("html").css("cursor", "default"),
                        alertUI()
                    }
            })
        }
    }),
    $("table.set img.plus").click(function()
    {
        m_fAddStartOdo = this.id.indexOf("End") != -1 ? !1 : !0,
        OpenOdoPopup(),
        m_fLogbookPopupOpen = !0
    }),
    $("#dvOdoreadings").mousedown(function(n)
    {
        if (n.target.tagName == "IMG")
            return !0;
        for (var t = n.target, i = "spNewOdoCalender"; t.id != i && t.id != "dvOdoreadings"; )
            t = t.parentNode;
        if (t.id == i)
            return !0;
        $("#" + i).css("display", "none")
    }),
    $("#txtNewOdoTime").keypress(function(n)
    {
        n = n || window.event;
        var t = n.charCode || n.keyCode,
            i = String.fromCharCode(t);
        if (i.search(/[\d:]/) == -1 && t != 8)
            return !1
    }),
    $("#txtNewOdoValue").keypress(function(n)
    {
        n = n || window.event;
        var t = n.charCode || n.keyCode,
            i = String.fromCharCode(t);
        if (i.search(/\d/) == -1 && t != 8)
            return !1
    }),
    $("#txtNewOdoDate").keypress(function(n)
    {
        n = n || window.event;
        var t = n.charCode || n.keyCode,
            i = String.fromCharCode(t);
        if (i.search(/[\d\/-]/) == -1 && t != 8)
            return !1
    }),
    $("#txtNewExpValue").keypress(function(n)
    {
        n = n || window.event;
        var t = n.charCode || n.keyCode,
            i = String.fromCharCode(t);
        if (t == 46)
        {
            if ($(this).val().search(/\./g) > 0)
                return !1
        }
        else if (i.search(/\d/) == -1 && t != 8)
            return !1
    }),
    $("#txtNewExpTime").keypress(function(n)
    {
        n = n || window.event;
        var t = n.charCode || n.keyCode,
            i = String.fromCharCode(t);
        if (i.search(/[\d:]/) == -1 && t != 8)
            return !1
    }),
    $("#txtNewExpDate").keypress(function(n)
    {
        n = n || window.event;
        var t = n.charCode || n.keyCode,
            i = String.fromCharCode(t);
        if (i.search(/[\d\/-]/) == -1 && t != 8)
            return !1
    }),
    $(".numeric").keypress(function(n)
    {
        n = n || window.event;
        var t = n.charCode || n.keyCode,
            i = String.fromCharCode(t);
        if (i.search(/\d/) == -1 && t != 8)
            return !1
    })
}),
String.prototype.isNullOrEmpty = function()
{
    return this == undefined || this == null || this.length == 0 ? !0 : $.trim(this).length == 0 ? !0 : !1
},
String.prototype.compare = function(n)
{
    return this.isNullOrEmpty() && n == null ? !0 : this.isNullOrEmpty() && n.isNullOrEmpty() ? !0 : $.trim(this) == $.trim(n) ? !0 : !1
},
String.prototype.toTrimmedValue = function()
{
    return this.isNullOrEmpty() ? null : $.trim(this)
},
Number.prototype.isIn = function(n)
{
    for (var i = n.length, t = 0; t < i; t++)
        if (this == n[t])
            return !0;
    return !1
},
Number.prototype.formatThou = function(n)
{
    return this.toString().replace(/\B(?=(\d{3})+(?!\d))/g, n)
},
Number.prototype.doubleDigit = function()
{
    return this.toString().length == 1 ? "0" + this : this.toString()
}