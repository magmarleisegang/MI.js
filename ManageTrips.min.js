function CheckExpiryWarnings()
{
    $("a.expiry-warning").length > 0 && $("a.expiry-warning").click(function(n)
    {
        n.preventDefault();
        var t = $(this);
        DoAjax({
            url: "/MappingWebService.asmx/NoMoreWarning", data: '{"iSubscriptionId":' + t.attr("href") + "}", successCallback: function()
                {
                    t.parent().remove(),
                    $("div.panel-info li.expiry-warning").length == 0 && ($("div.panel-info > ul > li > ul").parent().remove(), $("div.panel-info > ul li").length == 0 && $("div.panel-info").remove())
                }
        })
    })
}
function GetUserMappingSettings(n)
{
    addToCrumbtrail("GetUserMappingSettings(" + n + ")"),
    deviceId = null;
    var t = new URLParams(document.URL);
    t.IsEmpty == !1 && t.id != undefined && (deviceId = t.id),
    DoAjax({
        url: "/MappingWebService.asmx/GetUserMappingSettings", data: '{"syncedDevice": ' + deviceId + "}", successCallback: function(n)
            {
                var t;
                if (UserMappingSettings = n.d, distanceUnit = UserMappingSettings.SiteDistanceUnit, fForceBusinessComment = UserMappingSettings.ForceBusinessComment, sBusinessCommentWarning = UserMappingSettings.BusinessCommentWarning, ArrayNullOrEmpty(UserMappingSettings.Vehicles) && UserMappingSettings.IsDriverOrManager == !1)
                {
                    $("#trNoResultsFound").show(),
                    $("#tfrLoading").hide(),
                    $(".vehicleSelect").hide();
                    return
                }
                ArrayNullOrEmpty(UserMappingSettings.Vehicles) == !1 && (PopulateVehicleDropDown(UserMappingSettings.Vehicles, UserMappingSettings.LastUsedVehicle, UserMappingSettings.Managers), UserMappingSettings.LastUsedVehicle != null ? (t = GetVehicle(UserMappingSettings.LastUsedVehicle), t != null && LiveDeviceSelected(t.iDeviceId != null && t.iDeviceProductId == 4, t.sStatus), GetTrips(UserMappingSettings.LastUsedVehicle)) : (UserMappingSettings.Vehicles[0].iDeviceProductId == 4 && (t = UserMappingSettings.Vehicles[0], t != null && LiveDeviceSelected(t.iDeviceId != null && t.iDeviceProductId == 4, t.sStatus)), $("#trNoResultsFound").show(), $("#tfrLoading").hide())),
                UserMappingSettings.AllowTripCategorization === !0 && (UserMappingSettings.Categories.unshift({
                    iCategoryId: 0, sCategory: "None", sColourHex: "transparent"
                }), UserMappingSettings.Categories.push({
                    iCategoryId: -99, sCategory: "Edit", sColourHex: "transparent"
                }), pCategoryPopup = new popupMenu(UserMappingSettings.Categories, {
                        div: "#pluginCategory", drawRow: drawCategoryRow, selectionChangedCallback: categorySelectionChanged, cssClass: "categoryPopupTable", callbackOnBlur: !0
                    })),
                UserMappingSettings.IsDriverOrManager == !0 ? DoAjax({
                    url: "/WS/DriverManagementWebService.asmx/GetUserMappingSettings", successCallback: function(n)
                        {
                            var i,
                                r,
                                t;
                            if (n.d != undefined)
                            {
                                if ($.extend(UserMappingSettings, n.d), ArrayNullOrEmpty(UserMappingSettings.Vehicles) && ArrayNullOrEmpty(UserMappingSettings.Managers))
                                {
                                    $("#trNoResultsFound").show(),
                                    $("#tfrLoading").hide(),
                                    $(".vehicleSelect").hide();
                                    return
                                }
                                if (ArrayNullOrEmpty(UserMappingSettings.Drivers) ? $("li#v1 img[data-target=driver]").hide() : (UserMappingSettings.Drivers.unshift({
                                    iDriverId: null, sDriverName: "Not Assigned", sColourHex: "transparent"
                                }), pDriverPopup = new popupMenu(UserMappingSettings.Drivers, {
                                    div: "#pluginDriver", drawRow: drawDriverRow, selectionChangedCallback: driverSelectionChangedCallback, cssClass: "vehiclePopupTable"
                                }), $("li#v1 img[data-target=driver]").show()), !ArrayNullOrEmpty(UserMappingSettings.Managers))
                                {
                                    for (m_DriverProfile = new DriverProfile, i = [], i.push('<optgroup label="Driver Profiles">'), r = UserMappingSettings.Managers.length, t = 0; t < r; t++)
                                        i.push('<option data-driver_permission="' + UserMappingSettings.Managers[t].iDriverPermission + '" value="' + UserMappingSettings.Managers[t].iDriverId + '">' + UserMappingSettings.Managers[t].sManagerName + "<\/option>");
                                    i.push("<\/optgroup>"),
                                    $("#ddlVehicle").append(i.join("")),
                                    $("ul.tripSortTabs li#v0").show(),
                                    ArrayNullOrEmpty(UserMappingSettings.Vehicles) && ChangeDriver()
                                }
                            }
                        }
                }) : $("li#v1 img[data-target=driver]").hide()
            }, errorCallback: function(n, t)
            {
                alert(t)
            }
    })
}
function PopulateVehicleDropDown(n, t)
{
    var i;
    m_iVehicleId = t;
    var e = n.length,
        r = [],
        u = n[0].fActive,
        f = !1;
    for (i = 0; i < e; i++)
        u != n[i].fActive && (u = n[i].fActive, r.push("<optgroup label='" + (u == !1 ? "Inactive Vehicles" : "Active Vehicles") + "'>"), f = !0),
        n[i].iVehicleId == t ? r.push('<option value="' + n[i].iVehicleId + '" selected="selected">' + n[i].sRegistration + "<\/option>") : r.push('<option value="' + n[i].iVehicleId + '">' + n[i].sRegistration + "<\/option>");
    f === !0 && r.push("<\/optgroup>"),
    $("#ddlVehicle").append(r.join("")),
    n.length > 1 ? ($("#v1 img[data-target=car]").show(), $("#v0, #v1").show(), pVehiclePopup = new popupMenu(n, {
            div: "#plugin", drawRow: drawVehicleRow, selectionChangedCallback: vehicleSelectionChangedCallback, cssClass: "vehiclePopupTable"
        })) : ($("#v1 img[data-target=car]").hide(), $("#v0").hide())
}
function GetVehicle(n)
{
    var t = null,
        i = ViewingDriverProfile() ? m_DriverProfile.Vehicles : UserMappingSettings.Vehicles;
    return $.each(i, function(i, r)
        {
            if (r.iVehicleId == n)
                return t = r, !1
        }), t
}
function GetDriver(n)
{
    var t = {
            sDriverName: null, iDriverId: 0
        };
    return n == undefined ? t : ($.each(UserMappingSettings.Drivers, function(i, r)
        {
            if (r.iDriverId == n)
                return t = r, !1
        }), t)
}
function GetTrips(n)
{
    var t;
    if (addToCrumbtrail(" GetTrips(" + n + ")"), t = GetDateRange(), t != null)
    {
        var r = IntArrayToJSONString(null, g_Zones.GetAllIds()),
            i = g_lastTripId + iPageNumber * .01,
            u = iTripsPerView * iPageNumber,
            f = ['{"vehicleId":', n, ', "month":', t.month, ', "year":', t.year, ', "sortById":', iSortOrder, ', "designationId":', iFilterId, ', "index": ', g_atTrips.length, ', "toLoad": ', u > 150 ? 150 : u, ', "loadedZones":', r == null ? "null" : r, ', "syncParam":', i, "}"].join("");
        GetTripAjax = DoAjax({
            url: "/MappingWebService.asmx/GetTripsAndZones", data: f, successCallback: function(n)
                {
                    var e,
                        c,
                        l,
                        r,
                        t,
                        o;
                    if (n.d[3] != i)
                    {
                        LogError("syncParam mismatch[" + n.d[3] + "!=" + i + "]", "ManageTrips.GetTrips", 296);
                        return
                    }
                    var s = n.d[0],
                        h = n.d[1],
                        f = n.d[2],
                        u = s.length;
                    if (h != undefined && g_Zones.pushRange(h), f == undefined ? $("#pDeviceCapacity").hide() : f != null && ($("#pDeviceCapacity").css("display", "inline-block"), $("#percentage").text(f.toFixed(2))), u === 0 && iPageNumber == 1)
                        $("#trNoResultsFound").show(),
                        $("#tfrLoading").hide();
                    else if (u === 0 && iPageNumber != 1)
                        $("#tfrLoading").hide();
                    else
                    {
                        for (e = g_atTrips.length, e == undefined && (e = 0), c = [], l = 0, r = 0; r < u; ++r)
                            t = s[r],
                            t.StartZoneId != null && (t.StartLoc = g_Zones.GetName(t.StartZoneId)),
                            t.EndZoneId != null && (t.EndLoc = g_Zones.GetName(t.EndZoneId)),
                            o = new Trip(t),
                            g_atTrips.push(o),
                            r == u - 1 && (g_lastTripId = o.Id);
                        iTripsPerView === 0 ? LoadTripTable(g_atTrips) : g_atTrips != null && ExtendTripTable()
                    }
                    ArrayNullOrEmpty(UserMappingSettings.Vehicles) ? $(".car-column").hide() : $("#v1 img[data-target=car][src$='car_on.png']").length > 0 ? $(".car-column").css("display", "table-cell") : $(".car-column").hide(),
                    UserMappingSettings.Drivers != null ? $("#v1 img[data-target=driver][src$='driver_on.png']").length > 0 ? $(".driver-column").css("display", "table-cell") : $(".driver-column").hide() : $(".driver-column").hide()
                }, errorCallback: function(n, t)
                {
                    alert(t),
                    $("#tfrLoading").hide()
                }, completeCallback: function()
                {
                    GetTripAjax = null
                }
        })
    }
}
function GetDriverTrips(n)
{
    addToCrumbtrail(" GetDriverTrips(" + n + ")");
    var i = GetDateRange(),
        r = IntArrayToJSONString(null, g_Zones.GetAllIds()),
        t = g_lastTripId + iPageNumber * .01,
        u = iTripsPerView * iPageNumber,
        f = ['{"driverId":', n, ', "month":', i.month, ', "year":', i.year, ', "sortById":', iSortOrder, ', "designationId":', iFilterId, ', "index": ', g_atTrips.length, ', "toLoad": ', u > 150 ? 150 : u, ', "loadedZones":', r == null ? "null" : r, ', "syncParam":', t, "}"].join("");
    $(".driver-column").hide(),
    GetTripAjax = DoAjax({
        url: "/WS/DriverManagementWebService.asmx/GetTripsAndZones", data: f, successCallback: function(n)
            {
                var f,
                    e,
                    r,
                    o,
                    h,
                    c,
                    u,
                    i,
                    s;
                if (n.d[2] != t)
                {
                    LogError("syncParam mismatch[" + n.d[2] + "!=" + t + "]", "ManageTrips.GetDriverTrips", 296);
                    return
                }
                if (f = n.d[0], e = n.d[1], m_DriverProfile.UpdatePermission(n.d[3]), $("select#ddlVehicle option:selected").data("driver_permission", iPagePermissions = n.d[3]), r = f.length, e != undefined && g_Zones.pushRange(e), r === 0 && iPageNumber == 1)
                {
                    $("#trNoResultsFound").show(),
                    $("#tfrLoading").hide();
                    return
                }
                if (r === 0 && iPageNumber != 1)
                {
                    $("#tfrLoading").hide();
                    return
                }
                for (o = g_atTrips.length, o == undefined && (o = 0), h = [], c = 0, u = 0; u < r; ++u)
                    i = f[u],
                    i.StartZoneId != null && (i.StartLoc = g_Zones.GetName(i.StartZoneId)),
                    i.EndZoneId != null && (i.EndLoc = g_Zones.GetName(i.EndZoneId)),
                    s = new Trip(i),
                    g_atTrips.push(s),
                    u == r - 1 && (g_lastTripId = s.Id);
                iTripsPerView === 0 ? LoadTripTable(g_atTrips) : g_atTrips != null && ExtendTripTable(),
                $("#v1 img[data-target=car]").hide(),
                $(".car-column").show(),
                $(".driver-column").hide()
            }, errorCallback: function(n, t)
            {
                alert(t),
                $("#tfrLoading").hide()
            }, completeCallback: function()
            {
                GetTripAjax = null
            }
    })
}
function LoadTripTable(n)
{
    var o,
        i,
        t,
        s;
    addToCrumbtrail("LoadTripTable(g_atTrips)");
    var r = [],
        u = ViewingDriverProfile() ? m_DriverProfile.DriverPermissions.checkPermission(16) && m_DriverProfile.Vehicles.length > 1 : !ArrayNullOrEmpty(UserMappingSettings.Vehicles),
        f = UserMappingSettings.Drivers != null,
        e = 9 + ($("#thCategory").length > 0 ? 1 : 0);
    for (r.push(AddTitleString(n[0].Title, e, u, f)), o = n.length, i = 0; i < o; i++)
        (t = n[i], s = t.Id, ViewingDriverProfile() || t.VehicleId == m_iVehicleId) && (i > 0 && t.Title != n[i - 1].Title && r.push(AddTitleString(t.Title, e, u, f)), r.push(t.ToDriverTableRow(u ? GetVehicle(t.VehicleId).sRegistration : null, iPagePermissions, f ? GetDriver(t.DriverId).sDriverName : null)));
    $("#theBody").length > 0 ? $("#theBody").append(r.join(" ")) : $("#tableTrips").append("<tbody id='theBody'>" + r.join(" ") + " <\/tbody>"),
    $("#tfrLoading").hide()
}
function ExtendTripTable()
{
    var t,
        n,
        s;
    addToCrumbtrail("ExtendTripTable()");
    var i = [],
        f = NewMax(),
        o = g_atTrips.length - iCurrentMaxRecord,
        r = ViewingDriverProfile() ? !0 : !ArrayNullOrEmpty(UserMappingSettings.Vehicles),
        u = UserMappingSettings.Drivers != null,
        e = $("#thCategory").length > 0 ? 10 : 9;
    for (iCurrentMaxRecord === 0 && i.push(AddTitleString(g_atTrips[0].Title, e, r, u)), t = iCurrentMaxRecord; t < f; ++t)
        (n = g_atTrips[t], s = n.Id, ViewingDriverProfile() || n.VehicleId == m_iVehicleId) && (t > 0 && n.Title != g_atTrips[t - 1].Title && i.push(AddTitleString(n.Title, e, r, u)), i.push(n.ToDriverTableRow(r ? GetVehicle(n.VehicleId).sRegistration : null, iPagePermissions, u ? GetDriver(n.DriverId).sDriverName : null)));
    iCurrentMaxRecord === 0 ? $("#tableTrips").append("<tbody id='theBody'>" + i.join(" ") + " <\/tbody>") : $("#theBody").append(i.join(" ")),
    iCurrentMaxRecord = f,
    o == iTripsPerView * iPageNumber++ ? ViewingDriverProfile() == !1 ? GetTrips(m_iVehicleId) : GetDriverTrips(m_DriverProfile.CurrentDriverId) : $("#tfrLoading").hide()
}
function LiveDeviceSelected(n, t, i)
{
    addToCrumbtrail("LiveDeviceSelected(" + n + ", " + t + ", " + i + ")"),
    n ? ($("div#pDeviceCapacity").hide(), $("p#pLiveView").show(), $("#d0").text("Last Week"), $("#fIsInTrip").text(t)) : ($("p#pLiveView").hide(), $("#d0").text("Last Upload"))
}
function NewMax()
{
    addToCrumbtrail(" NewMax()");
    var n = g_atTrips.length,
        t = iCurrentMaxRecord + iTripsPerView * iPageNumber;
    return t < n ? t : n
}
function NewTable()
{
    if (addToCrumbtrail("NewTable()"), $("#tableTrips tbody").remove(), $("#trNoResultsFound").hide(), g_atTrips = new Trips, iPageNumber = 1, iCurrentMaxRecord = 0, $("#tfrLoading").show(), m_iVehicleId == null && UserMappingSettings.Vehicles != undefined)
        m_iVehicleId = UserMappingSettings.Vehicles[0].iVehicleId;
    else if (m_iVehicleId == null && ArrayNullOrEmpty(UserMappingSettings.Vehicles) && ArrayNullOrEmpty(UserMappingSettings.Managers))
    {
        $("#trNoResultsFound").show(),
        $("#tfrLoading").hide();
        return
    }
    GetTripAjax != undefined && GetTripAjax.abort(),
    ViewingDriverProfile() == !1 ? GetTrips(m_iVehicleId) : GetDriverTrips(m_DriverProfile.CurrentDriverId)
}
function OpenZonePopup(n, t)
{
    g_fPopupOpen === !1 && (g_fPopupOpen = !0, addToCrumbtrail("OpenZonePopup(" + n + ", " + t + ")"), bPoint = t, g_atTrips.setSelected(n), ZonePopup.Load(g_atTrips.SelectedTrip, bPoint, null, iPagePermissions), g_fPreloadMaps === !1 && g_fGoogleApiLoaded === !1 && LoadGoogleApi())
}
function OpenTripPopup(n)
{
    if (g_fPopupOpen === !1)
        return g_fPopupOpen = !0, addToCrumbtrail("OpenTripPopup(" + n + ")"), g_fPreloadMaps === !1 && g_fGoogleApiLoaded === !1 && (document.body.style.cursor = "wait", LoadGoogleApi()), g_atTrips.setSelected(n), TripPopup.LoadDiv(g_atTrips.SelectedTrip, iPagePermissions), !1
}
function toggleDesignation(n, t)
{
    addToCrumbtrail("toggleDesignation(element, id)");
    var i,
        f,
        e,
        u = g_atTrips.get(t),
        o = u.Designation,
        r = n.alt;
    if (r = r.split(".")[0], u.Designation = r.charAt(0) == "P" ? 4 : 3, SaveTrip(u) === !1)
        return !1;
    g_atTrips.setSelected(t),
    g_atTrips.SelectedTrip.Designation = u.Designation,
    g_atTrips.SelectedTrip.Designation == 4 ? (i = "Business", f = URL.BUSINESS, e = i + ". Click to change to " + r, g_atTrips.SelectedTrip.Designation = 4, fForceBusinessComment === !0 && g_atTrips.SelectedTrip.Comment == null ? editComment($("#Comment" + t)[0], t) : fForceBusinessComment === !1 && g_atTrips.SelectedTrip.Comment == null && alert(sBusinessCommentWarning)) : g_atTrips.SelectedTrip.Designation == 3 && (i = "Private", f = URL.PRIVATE, e = i + ". Click to change to " + r),
    n.src = f,
    n.title = e,
    n.alt = i
}
function editComment(n, t)
{
    addToCrumbtrail("editComment(img, id)");
    var r = n.nodeName,
        i;
    if (r == "IMG")
        i = $(n.parentNode.previousSibling).children("span");
    else if (r == "TD")
        i = $(n).children("span");
    else if (r == "SPAN")
        i = $(n);
    else
        return;
    i.length > 0 && ($(i[0].parentNode.nextSibling).children("img").hide(), g_atTrips.setSelected(t), i.inlineEdit({
            callback: inlineEditCallback, bindOnce: !0, currentValue: g_atTrips.SelectedTrip.Comment
        }))
}
function inlineEditCallback(n)
{
    for (var r = n[0], t, u, i, f; r.tagName != "TR"; )
        r = r.parentNode;
    if ($(n[0].parentNode.nextSibling).children("img").show(), t = (t = n.val()).length == 0 ? n.text() : t, (t == "null" || t === "") && (t = null), u = r.id, g_atTrips.setSelected(u), fForceBusinessComment != null && t == null && g_atTrips.SelectedTrip.Designation % 2 == 0 && (alert(sBusinessCommentWarning), fForceBusinessComment === !0))
    {
        n.val(g_atTrips.SelectedTrip.Comment).text(g_atTrips.SelectedTrip.Comment),
        g_atTrips.SelectedTrip.Comment == null && toggleDesignation($("img#Designation" + u)[0], u);
        return
    }
    i = g_atTrips.SelectedTrip.Comment,
    g_atTrips.SelectedTrip.Comment = t,
    f = i == "null" || i === "" ? null : i,
    f != t && SaveTrip(g_atTrips.SelectedTrip) === !1 && (g_atTrips.SelectedTrip.Comment = i, n.val(i).text(i))
}
function SaveTrip(n)
{
    if (addToCrumbtrail("SaveTrip(" + n.Id + ")"), n != undefined)
    {
        var t = !0;
        return ViewingDriverProfile() == !1 ? n.Save(function(t)
            {
                addToCrumbtrail("trip.Save Success"),
                n.StartZoneSelected = t.d[0].StartZoneSelected,
                n.EndZoneSelected = t.d[0].EndZoneSelected
            }, function(n, i)
            {
                alert(i),
                t = !1
            }) : m_DriverProfile.SaveTrip(n, function(t)
            {
                addToCrumbtrail("trip.Save Success"),
                n.StartZoneSelected = t.d[0].StartZoneSelected,
                n.EndZoneSelected = t.d[0].EndZoneSelected
            }, function(n, i)
            {
                alert(i),
                t = !1
            }), t
    }
}
function ChangeDateSortOrder(n)
{
    ArrayNullOrEmpty(UserMappingSettings.Vehicles) == !1 && UserMappingSettings.Vehicles > 1 && pVehiclePopup.close(),
    addToCrumbtrail("ChangeDateSortOrder(img)"),
    n.nodeName == "A" && (n = n.childNodes[1]),
    n.alt == "Asc" ? (n.src = URL.DOWN, n.alt = "Desc", iSortOrder = 1) : n.alt == "Desc" && (n.src = URL.UP, n.alt = "Asc", iSortOrder = 2),
    NewTable()
}
function GetDateRange()
{
    var r = $("ul.tripSortTabs li.active").attr("id"),
        n,
        i,
        t;
    r != "d4" && $("#ddlMonthSelector").val(-1);
    switch (r)
    {
        case"d0":
            return {
                    month: -1, year: 0
                };
        case"d1":
            return {
                    month: 0, year: 0
                };
        case"d2":
            return n = new Date, {
                    month: n.getMonth() + 1, year: n.getFullYear()
                };
        case"d3":
            return n = new Date, i = n.prevMonth(), {
                        month: i.getMonth() + 1, year: i.getFullYear()
                    };
        case"d4":
            return (t = $("#ddlMonthSelector").val(), t == -1) ? (alertUI("Please select a month.", 2e3), null) : {
                    month: t.substring(0, t.indexOf("-")), year: t.substring(t.indexOf("-") + 1)
                };
        default:
            return {
                    month: -1, year: 0
                }
    }
}
function ChangeVehicle()
{
    if (UserMappingSettings.Drivers != null && $("#v2").show(), addToCrumbtrail("ChangeVehicle()"), iPagePermissions = 2047, $("#d0").text("Last Upload"), $("#ddlVehicle").val() != -1)
    {
        m_iVehicleId = $("#ddlVehicle").val();
        var n = GetVehicle(m_iVehicleId);
        n != null && LiveDeviceSelected(n.iDeviceId != null && n.iDeviceProductId == 4, n.sStatus),
        UserMappingSettings.AllowTripCategorization === !0 && pCategoryPopup.setDatasource(UserMappingSettings.Categories),
        ArrayNullOrEmpty(UserMappingSettings.Vehicles) || pVehiclePopup.setDatasource(UserMappingSettings.Vehicles),
        NewTable()
    }
    else
        $("#ddlVehicle").val(m_iVehicleId)
}
function ChangeDriver()
{
    $("#v2").hide();
    var n = $("select#ddlVehicle option:selected").val();
    m_DriverProfile.CurrentDriverId != n && m_DriverProfile.LoadDriverProfile(n),
    m_DriverProfile.Categories != null && pCategoryPopup == undefined ? pCategoryPopup = new popupMenu(m_DriverProfile.Categories, {
        div: "#pluginCategory", drawRow: drawCategoryRow, selectionChangedCallback: categorySelectionChanged, cssClass: "categoryPopupTable", callbackOnBlur: !0
    }) : m_DriverProfile.Categories != null && pCategoryPopup.setDatasource(m_DriverProfile.Categories),
    m_DriverProfile.Vehicles.length > 1 && pVehiclePopup == undefined ? pVehiclePopup = new popupMenu(m_DriverProfile.Vehicles, {
        div: "#plugin", drawRow: drawVehicleRow, selectionChangedCallback: vehicleSelectionChangedCallback, cssClass: "vehiclePopupTable"
    }) : pVehiclePopup.setDatasource(m_DriverProfile.Vehicles),
    g_Zones = new Zones,
    iPagePermissions = parseInt($("select#ddlVehicle option:selected").data("driver_permission")),
    $("#d0").text("Last Week"),
    NewTable()
}
function CenterPopups()
{
    var n,
        u,
        t,
        f,
        r,
        e,
        i,
        o;
    addToCrumbtrail("CenterPopups()"),
    n = {
        height: $(window).height(), width: $(window).width()
    },
    u = 0,
    $(".popupBackground").height(n.height - u).width(n.width - u),
    t = {
        width: 0, height: 0
    },
    t.width == 0 && (t.width = n.width - parseInt($(".popupWindow").css("margin-left").replace(/\D/g, "")) - parseInt($(".popupWindow").css("margin-right").replace(/\D/g, ""))),
    t.height == 0 && (t.height = n.height - parseInt($(".popupWindow").css("margin-top").replace(/\D/g, "")) - parseInt($(".popupWindow").css("margin-bottom").replace(/\D/g, ""))),
    f = t.width - (20 + $(".popupDetails").width() + parseInt($(".popupWindow").css("padding-left").replace(/\D/g, "")) + parseInt($(".popupWindow").css("padding-right").replace(/\D/g, ""))),
    r = t.height - (24 + parseInt($(".popupWindow").css("padding-bottom").replace(/\D/g, ""))),
    $(".mapCover").each(function(n, t)
    {
        $(t).width(f).height(r),
        $(t).children().css("margin-top", (r - 91) / 2)
    }),
    $(".map").each(function(n, t)
    {
        $(t).width(f).height(r)
    }),
    e = $(".popupWindow").width() - ($(".mergeTripDetails").width() + 22),
    $(".mergeTripMapCover").width(e),
    $(".mergeTripsMapSize").width(e),
    i = $("div.blockPage"),
    i.length > 0 && (o = {
        height: i.height(), width: i.width()
    }, i.css("left", (n.width - o.width) / 2 + "px").css("top", (n.height - o.height) / 2 + "px"))
}
function drawVehicleRow(n, t)
{
    var i = [];
    return i[0] = t != undefined && t == n.iVehicleId ? "<td id='" + n.iVehicleId + "' class='selected'>" : "<td id='" + n.iVehicleId + "'>", i[1] = "<span><b>", i[2] = n.sRegistration, i[3] = "<\/b><br/>", i[4] = (n.sMake ? n.sMake : "-") + " " + (n.sModel ? n.sModel : "-"), i[i.length] = "<\/span><\/td>", i.join("")
}
function vehicleSelectionChangedCallback(n)
{
    return n.id == "" || n.id == m_pSelectedVehicleId ? !0 : (ViewingDriverProfile() == !1 ? $.ajax({
            type: "POST", url: "../MappingWebService.asmx/ChangeVehicle", contentType: "application/json; charset=utf-8", data: '{"tripId":' + g_atTrips.SelectedTrip.Id + ', "vehicleId":' + n.id + "}", dataType: "json", success: vehicleSelectionChangeSuccess, error: vehicleSelectionChangeError, async: !1
        }) : m_DriverProfile.ChangeTripVehicle(g_atTrips.SelectedTrip, n.id, vehicleSelectionChangeSuccess, vehicleSelectionChangeError), m_pSelectedVehicleId = null, !0)
}
function vehicleSelectionChangeSuccess(n)
{
    n.d > 0 ? g_atTrips.SelectedTrip != null && (g_atTrips.SelectedTrip.VehicleId = parseInt(n.d), $("#" + g_atTrips.SelectedTrip.Id + " td:nth-child(" + (tableCellEnum.ChangeVehicle + 1) + ") > span[data-a=cv]").text(GetVehicle(n.d).sRegistration)) : alert("vehicle change failed!")
}
function vehicleSelectionChangeError(n)
{
    if (n.statusText == "abort")
        return !1;
    alert(n.responseText)
}
function drawDriverRow(n, t)
{
    var i = [];
    return i[0] = t !== undefined && t == n.iDriverId ? "<td id='" + n.iDriverId + "' class='selected'>" : "<td id='" + n.iDriverId + "'>", i[1] = "<span><b>", i[2] = n.sDriverName, i[i.length] = "<\/span><\/td>", i.join("")
}
function driverSelectionChangedCallback(n)
{
    return n.id == "" || n.id == m_pSelectedDriverId ? !0 : ($.ajax({
            type: "POST", url: "../MappingWebService.asmx/ChangeDriver", contentType: "application/json; charset=utf-8", data: '{"tripId":' + g_atTrips.SelectedTrip.Id + ', "driverId":' + n.id + "}", dataType: "json", success: driverSelectionChangeSuccess, error: driverSelectionChangeError, async: !1
        }), m_pSelectedDriverId = null, !0)
}
function driverSelectionChangeSuccess(n)
{
    n.d[0] == !0 ? g_atTrips.SelectedTrip != null && (g_atTrips.SelectedTrip.DriverId = n.d[1] != null ? parseInt(n.d[1]) : null, $("#" + g_atTrips.SelectedTrip.Id + " td:nth-child(" + (tableCellEnum.ChangeDriver + 1) + ") > span[data-a=cd]").text(GetDriver(n.d[1]).sDriverName)) : alert("driver change failed!")
}
function driverSelectionChangeError(n)
{
    if (n.statusText == "abort")
        return !1;
    alert(n.responseText)
}
function drawCategoryRow(n, t)
{
    var i = "",
        r;
    return n.iCategoryId == -99 ? i = "class='edit'" : t != null && n.iCategoryId > 0 && (r = n.iCategoryId.toString(2).length - 1, t[t.length - 1 - r] == 1 && (i = "class='checked'")), ["<td data-id='", n.iCategoryId, "'><div ", i, " style='background-color:", n.sColourHex, n.sColourHex == "transparent" ? ";color:#505050" : "", ";'>", n.sCategory, "<\/div><\/td>"].join("")
}
function categorySelectionChanged(n)
{
    var t = n == null ? undefined : $(n).data("id");
    return t == -99 ? (setTimeout(function()
        {
            EditCategories()
        }, 100), !1) : t != undefined && t != 0 ? ($(n).children("div").toggleClass("checked"), !1) : (t == undefined && (t = 0, $("table.categoryPopupTable tr").each(function(n, i)
        {
            var r = $(i);
            r.children("td").children("div").hasClass("checked") === !0 && (t += parseInt(r.children("td").data("id")))
        })), g_atTrips.SelectedTrip.CategoryId == t || g_atTrips.SelectedTrip.CategoryId == null && t == 0) ? !0 : (ViewingDriverProfile() == !1 ? g_atTrips.SelectedTrip.ChangeCategory(t, function(n)
        {
            var t,
                i;
            n.d[0] == !0 ? g_atTrips.SelectedTrip != null && (t = parseInt(n.d[1]), g_atTrips.SelectedTrip.CategoryId = t, i = $("#" + g_atTrips.SelectedTrip.Id + " td:first-child > div.cat"), t == 0 ? (i.addClass("catEmpty").css("background-color", "white").data("c", t), i.children("div[class^=cat]").remove()) : (i.removeClass("catEmpty").data("c", t), i.children("div[class^cat]").remove(), i.append(GetCategoryDiv(t, !1)))) : alert(n.d[1])
        }, function(n, t)
        {
            alert(t)
        }) : m_DriverProfile.ChangeTripCategory(g_atTrips.SelectedTrip, t, function(n)
        {
            var t,
                i;
            n.d[0] == !0 ? g_atTrips.SelectedTrip != null && (t = parseInt(n.d[1]), g_atTrips.SelectedTrip.CategoryId = t, i = $("#" + g_atTrips.SelectedTrip.Id + " td:first-child > div.cat"), t == 0 ? (i.addClass("catEmpty").css("background-color", "white").data("c", t), i.children("div[class^=cat]").remove()) : (i.removeClass("catEmpty").data("c", t), i.children("div[class^cat]").remove(), i.append(m_DriverProfile.GetCategoryDiv(t, !1)))) : alert(n.d[1])
        }, function(n, t)
        {
            alert(t)
        }), !0)
}
function EditCategories()
{
    var i,
        r,
        n,
        t;
    $("#divCategories div.category").length > 0 && $("#divCategories").empty(),
    i = ViewingDriverProfile() ? m_DriverProfile.Categories : UserMappingSettings.Categories,
    i.length > 0 && (r = [], $.each(i, function(n, t)
    {
        t.iCategoryId != 0 && t.iCategoryId != -99 && r.push('<div id="ec' + t.iCategoryId + '" class="category"><div class="category-color" style="background-color: ' + t.sColourHex + '"><\/div><div class="category-label"><input type="text" value="' + (t.sCategory == null ? "" : t.sCategory) + '"/><\/div><\/div>')
    }), $("#divCategories").append(r.join("")), n = {
            height: $("#divCatEdit").height(), width: $("#divCatEdit").width()
        }, t = {
            height: $(window).height(), width: $(window).width()
        }, n.height > t.height ? (n.width = n.width * 2, $("#divCatEdit").width(n.width), $("#divCategories").addClass("col-2"), n.height = $("#divCatEdit").height()) : $("#divCategories").removeClass("col-2"), $.blockUI({
            message: $("#divCatEdit"), css: {
                    width: n.width, borderRadius: 8, borderWidth: 1, top: (t.height - n.height) / 2 + "px", left: (t.width - n.width) / 2 + "px"
                }
        }), $.blockUI.windowCenter())
}
function LoadGoogleApi()
{
    if (addToCrumbtrail("LoadGoogleApi()"), alertUI("Loading Google Maps - Please wait..."), g_fGoogleApiLoading == !1)
    {
        g_fGoogleApiLoading = !0;
        var n;
        $.ajax({
            type: "POST", url: "../MappingWebService.asmx/GetGoogleUrl", contentType: "application/json; charset=utf-8", data: {}, dataType: "json", success: function(t)
                {
                    n = t.d,
                    $.getScript(n + "&callback=MapApiLoaded", function(){})
                }, async: !1
        })
    }
}
function MapApiLoaded()
{
    addToCrumbtrail("MapApiLoaded()"),
    $.getScript(sScriptToLoad, function()
    {
        g_fGoogleApiLoaded = !0,
        alertUI()
    })
}
function WaitLoaded(n)
{
    addToCrumbtrail("WaitLoaded(scriptLoaded)"),
    n != undefined && typeof n == "function" && (m_scriptLoaded = n),
    g_fGoogleApiLoaded === !0 && ScriptLoadComplete === !0 ? (document.body.style.cursor = "default", m_scriptLoaded()) : setTimeout(WaitLoaded, 100)
}
var m_pSelectedVehicleId,
    m_pSelectedDriverId,
    tableCellEnum,
    m_scriptLoaded;
DriverProfile = function()
{
    this.wsUrl = "/WS/DriverManagementWebService.asmx/",
    this.CurrentDriverId = null,
    this.DriverPermissions = 0,
    this.AllowTrackingZones = !1,
    this.AllowTripSplitting = !1,
    this.AllowTripCategorization = !1,
    this.Vehicles = null,
    this.Categories = null,
    this.ForceBusinessComment = !1,
    this.BusinessCommentWarning = !1;
    var n = this.wsUrl;
    Trip.prototype.SaveDriverTrip == undefined && (Trip.prototype.SaveDriverTrip = function(t, i)
    {
        DoAjax({
            data: this.ToJSONString("to"), url: n + "EditTrip", successCallback: t, errorCallback: i, doAsync: !1
        })
    }),
    Zone.prototype.SaveManagerZone == undefined && (Zone.prototype.SaveManagerZone = function(t, i, r)
    {
        DoAjax({
            data: '{ "zo":' + this.ToJSONString() + ',"driverId":' + t + "}", url: n + "EditZone", successCallback: i, errorCallback: r, doAsync: !1
        })
    }),
    this.GetCategory = function(n)
    {
        var t = {
                sColourHex: "white", sCategory: "None", iCategoryid: 0
            };
        return $.each(this.Categories, function(i, r)
            {
                if (r.iCategoryId == n)
                    return t = r, !1
            }), t
    },
    this.SetCategories = function(n)
    {
        n.unshift({
            iCategoryId: 0, sCategory: "None", sColourHex: "transparent"
        }),
        this.DriverPermissions.checkPermission(1024) && n.push({
            iCategoryId: -99, sCategory: "Edit", sColourHex: "transparent"
        }),
        this.Categories = n
    },
    this.GetVehicle = function(n)
    {
        var t = null,
            i = this.Vehicles;
        return $.each(i, function(i, r)
            {
                if (parseInt(n) == r.iVehicleId)
                    return t = r, !1
            }), t
    },
    this.UpdatePermission = function(n)
    {
        this.DriverPermissions != n && (this.DriverPermissions = n, this.Categories[this.Categories.length - 1].iCategoryId != -99 && n.checkPermission(1024) ? this.Categories.push({
            iCategoryId: -99, sCategory: "Edit", sColourHex: "transparent"
        }) : this.Categories[this.Categories.length - 1].iCategoryId != -99 || n.checkPermission(1024) || this.Categories.pop())
    }
},
DriverProfile.prototype = {},
DriverProfile.prototype.constructor = DriverProfile,
DriverProfile.prototype.LoadDriverProfile = function(n)
{
    this.CurrentDriverId = n;
    var t = this;
    DoAjax({
        url: this.wsUrl + "LoadDriverProfile", data: '{"driverId": ' + n + "}", successCallback: function(n)
            {
                $.extend(t, n.d),
                t.Categories.unshift({
                    iCategoryId: 0, sCategory: "None", sColourHex: "transparent"
                }),
                t.DriverPermissions.checkPermission(1024) && t.Categories.push({
                    iCategoryId: -99, sCategory: "Edit", sColourHex: "transparent"
                })
            }, errorCallback: function(n, t)
            {
                alert(t)
            }, doAsync: !1
    })
},
DriverProfile.prototype.SaveTrip = function(n, t, i)
{
    n.SaveDriverTrip(t, i)
},
DriverProfile.prototype.ChangeTripCategory = function(n, t, i, r)
{
    if (this.DriverPermissions.checkPermission(8) == !1)
    {
        alert("You are not allowed to change the trip's category on this driver profile.");
        return
    }
    var u = this;
    DoAjax({
        url: u.wsUrl + "ChangeCategory", data: '{"tripId":' + n.Id + ', "categoryId":' + t + "}", successCallback: function(n)
            {
                n.d[0] == !0 && u.AllowTripCategorization == !0 && n.d.length == 3 && u.SetCategories(n.d[2]),
                i(n)
            }, errorCallback: r, doAsync: !1
    })
},
DriverProfile.prototype.ChangeTripVehicle = function(n, t, i, r)
{
    if (this.DriverPermissions.checkPermission(16) == !1)
    {
        alert("You are not allowed to change the trip's vehicle on this driver profile.");
        return
    }
    var u = this;
    DoAjax({
        url: u.wsUrl + "ChangeVehicle", data: '{"tripId":' + n.Id + ', "vehicleId":' + t + "}", successCallback: i, errorCallback: r, doAsync: !1
    })
},
DriverProfile.prototype.GetCategoryDiv = function(n, t, i)
{
    for (var o = (n == null ? 0 : n).toString(2), u = o.length - 1, f = [], e, r = 0; r <= u; r++)
        o[u - r] == 1 && f.push(Math.pow(2, r));
    for (f.length < 5 ? u = f.length : f.length == 5 ? u = 4 : f.length > 5 && (u = 6), e = [], r = 0; r < u; r++)
        e.push("<div class='cat-" + u + (i === !1 ? " blocked" : "") + "' style='background-color:" + this.GetCategory(f[r]).sColourHex + "'><\/div>");
    return t == undefined || t == !0 ? "<div data-c='" + n + "' class='cat'>" + e.join("") + "<\/div>" : e.join("")
},
DriverProfile.prototype.CheckCategorization = function(n)
{
    if (this.AllowTripCategorization)
    {
        if (arguments.length > 0 && n != undefined)
        {
            var t = this.GetVehicle(n);
            return t.iDeviceId != null ? (t.fDeviceActiveSubscription == !1 && (alertUI == undefined ? alert("The vehicle does not have an active subscription that allows categorization") : alertUI("The vehicle does not have an active subscription that allows categorization", 2500)), t.fDeviceActiveSubscription) : !0
        }
        return !0
    }
    return null
},
DriverProfile.prototype.EditCategories = function(n, t, i)
{
    if (this.DriverPermissions.checkPermission(1024) == !1)
    {
        alert("You are not allowed to edit categories on this driver profile.");
        return
    }
    var r = this;
    DoAjax({
        url: this.wsUrl + "/EditCategories", data: JSON.stringify({
                cats: n, driverId: this.CurrentDriverId
            }), successCallback: function(n)
            {
                n.d[0] == !0 && r.SetCategories(n.d[1]),
                t(n)
            }, errorCallback: i, doAsync: !1
    })
},
DriverProfile.prototype.SaveZone = function(n, t, i)
{
    if (this.DriverPermissions.checkPermission(512) == !1)
    {
        alert("You are not allowed to create/edit zones on this driver profile.");
        return
    }
    var r = this;
    n.SaveManagerZone(this.CurrentDriverId, function(n)
    {
        n.d[0] !== !1 && n.d[2] != null && (r.SetCategories(n.d[1]), n.d[2] == null),
        t(n)
    }, i)
},
DriverProfile.prototype.DeleteTrip = function(n, t, i)
{
    if (this.DriverPermissions.checkPermission(128) == !1)
    {
        alert("You are not allowed to delete trips on this driver profile.");
        return
    }
    DoAjax({
        url: this.wsUrl + "DeleteTrip", data: '{"tripId":' + n + "}", successCallback: t, errorCallback: i
    })
},
DriverProfile.prototype.SplitTrip = function(n, t, i, r)
{
    if (this.DriverPermissions.checkPermission(64) == !1)
    {
        alert("You are not allowed to split trips on this driver profile.");
        return
    }
    DoAjax({
        url: this.wsUrl + "SplitTrip", data: '{"tripId":' + n + ', "dataId":' + t + "}", successCallback: i, errorCallback: r
    })
},
DriverProfile.prototype.MergeTrips = function(n, t, i)
{
    if (this.DriverPermissions.checkPermission(32) == !1)
    {
        alert("You are not allowed to merge trips on this driver profile.");
        return
    }
    DoAjax({
        url: this.wsUrl + "MergeTrips", data: '{"tripsToMerge":' + IntArrayToJSONString(null, n) + ', "driverId": ' + this.CurrentDriverId + "}", successCallback: t, errorCallback: i
    })
},
ZonePopup = function()
{
    function ni()
    {
        this.zoneChanged = !1,
        this.nameChanged = !1,
        this.shapeChanged = !1
    }
    function ti(f, s, h, l)
    {
        if (ViewingDriverProfile() == !1 && (l = 2047), o.select = l.checkPermission(256), o.edit = l.checkPermission(512), !o.select && !o.edit || !o.select && f[s == 0 ? "StartZoneId" : "EndZoneId"] == null)
        {
            g_fPopupOpen = !1,
            alertUI("You do not have permission to create zones.", 3e3);
            return
        }
        ct(l, s),
        ot = !1,
        e = !1,
        addToCrumbtrail("ZonePopup.LoadDiv(trip, point, callBack)"),
        g(!1),
        nt(!1),
        u = !1,
        $(".popupBackground").show(),
        $("#divZonePopup").toggleClass("hide"),
        $("#divZPSelectExistingZone").hide(),
        $("#divZPZoneDetails").hide(),
        b = !1,
        tt = h == undefined ? null : h,
        ri(f, s),
        t = null,
        t = f,
        r = s,
        n = -1,
        w = !1,
        c = null,
        i == null ? WaitLoaded(ii) : st()
    }
    function ii()
    {
        addToCrumbtrail("ZonePopup.scriptLoaded()"),
        ui("divZoneMap", null),
        st()
    }
    function st()
    {
        var u,
            f,
            e;
        if (addToCrumbtrail("ZonePopup.ContinueLoadingDiv()"), u = fi(t, r), u === !1)
        {
            s();
            return
        }
        if (u != null && !o.select && o.edit)
        {
            $("#aEditExistingZone").show(),
            $("#trSelectOptions").show(),
            g_Zones.DrawZones(u, null, i),
            n = g_Zones.GetZone(u),
            c = new Zone(n, n.Geometry),
            ut(n),
            h(),
            $("#btnSaveZone").hide(),
            $("#aSelectExistingZone").hide(),
            $("#aCreateNewZone").hide(),
            $("#divZPZoneDetails").show();
            return
        }
        if (f = li(r, u), f !== -1)
        {
            if (u == null && (e = "", r === 0 ? t.StartLoc != null ? ($("#sHeading").text("Start Zone: " + t.StartLoc + " (U)"), e = t.StartLoc) : $("#sHeading").text("Start Zone: Unknown") : t.EndLoc != null ? ($("#sHeading").text("End Zone: " + t.EndLoc + " (U)"), e = t.EndLoc) : $("#sHeading").text("End Zone: Unknown"), n = new Zone(-1, e, 1, 3, null, p, null, null, !1)), ut(n), $("#trSelectOptions").show(), o.select && !o.edit)
            {
                if (f === !1)
                {
                    s(),
                    alertUI("You do not have permission to create or edit zones and there are no nearby zones to select from.", 3e3);
                    return
                }
                $("#aEditExistingZone").hide(),
                $("#aCreateNewZone").hide(),
                h(),
                $("#trSelectOptions").show(),
                $("#btnSaveZone").hide(),
                $("#trZoneName").hide(),
                $("#trAssignedReason").hide(),
                $("#aSelectExistingZone").show(),
                $("#divZPZoneDetails").show();
                return
            }
            $("#aEditExistingZone").hide(),
            $("#aSelectExistingZone").hide(),
            $("#aCreateNewZone").show(),
            $("#trInfo").hide(),
            u == null ? f === !0 ? (h(), $("#trSelectOptions").show(), $("#btnSaveZone").hide(), $("#trZoneName").hide(), $("#trAssignedReason").hide(), $("#aSelectExistingZone").show()) : (ht(), nt(!0), g(!0), $("#trSelectOptions").hide(), $("#btnSaveZone").show(), $("#txtZoneName").focus(), $("#txtZoneComment").unbind("focus")) : ($("#aEditExistingZone").show(), c = new Zone(n, n.Geometry), h(), $("#btnSaveZone").hide(), f === !0 ? $("#aSelectExistingZone").show() : $("#aSelectExistingZone").hide()),
            $("#divZPZoneDetails").show()
        }
    }
    function ri(n, t)
    {
        addToCrumbtrail("ZonePopup.SetAssignedReasonAndDate(trip, point)");
        var i = 0,
            r,
            u = "Create new zone";
        $("#trAssignedReason").hide(),
        $("#trZoneName").show(),
        t === 0 ? (n.StartZoneId != undefined && (i = n.StartZoneSnapped == 1 ? 2 : n.StartZoneSelected == 1 ? 3 : 1, u = "Start zone: " + n.StartLoc, $("#trZoneName").hide(), $("#trAssignedReason").show()), r = n.TripStartDate) : (n.EndZoneId != undefined && (i = n.EndZoneSnapped == 1 ? 2 : n.EndZoneSelected == 1 ? 3 : 1, u = "End zone: " + n.EndLoc, $("#trZoneName").hide(), $("#trAssignedReason").show()), r = n.TripEndDate),
        $("#sHeading").text(u),
        $("#tdReason").text(gt[i]),
        i == 1 ? ($("#trSelectOptions").hide(), $("#aCreateNewZone").hide(), $("#aEditExistingZone").show()) : ($("#trSelectOptions").show(), $("#aCreateNewZone").show(), $("#aEditExistingZone").hide()),
        $("#tdDate").text(r),
        $("#trDate").show()
    }
    function ui(n)
    {
        addToCrumbtrail("ZonePopup.InitializeZoneMap(mapDiv, point)");
        var t = {
                zoom: 5, center: new google.maps.LatLng, mapTypeId: google.maps.MapTypeId.ROADMAP
            };
        i = new google.maps.Map(document.getElementById(n), t),
        it != null & it != undefined && google.maps.event.removeListener(it),
        si(i)
    }
    function fi(n)
    {
        addToCrumbtrail("ZonePopup.DrawTrip(trip, point)");
        return n.Points == undefined && n.GetPoints() === !1 ? !1 : (r === 0 ? et = n.TripStartDate : r === 1 && (et = n.TripEndDate), ei(n, r))
    }
    function ei(n, t)
    {
        var u,
            f,
            s;
        addToCrumbtrail("ZonePopup.DrawTripLine(trip, point)");
        var r = [],
            h = n.Points.length,
            o = n.Points,
            e;
        for (u = 0; u < h; u++)
            r.push(new google.maps.LatLng(o[u][1], o[u][0]));
        return lineOptions = {
                clickable: !0, geodesic: !1, map: i, path: r, strokeColor: Colors.Black.hash(), strokeOpacity: 1, strokeWeight: 1
            }, v = new google.maps.Polyline(lineOptions), v.setOptions(kt), t === 0 ? (f = r[0], e = n.StartZoneId) : t == 1 && (f = r[r.length - 1], e = n.EndZoneId), s = new google.maps.Circle({
                    center: f, radius: 500, strokeWeight: 1
                }), y = Marker(f), y.setMap(i), i.setCenter(f), i.fitBounds(s.getBounds()), e
    }
    function ht()
    {
        var n,
            i;
        addToCrumbtrail("ZonePopup.DrawDefaultZone()"),
        r === 0 ? (longitude = t.Points[0][0], latitude = t.Points[0][1], n = new google.maps.LatLng(latitude, longitude)) : r == 1 && (i = t.Points.length - 1, longitude = t.Points[i][0], latitude = t.Points[i][1], n = new google.maps.LatLng(latitude, longitude)),
        wt(n),
        $("#txtInfo").text(MESSAGES.INFO_CIRCLE),
        $("#aDrawNewShape").show(),
        $("#aDrawNewShape")[0].firstChild.nodeValue = MESSAGES.REPLACE_CIRCLE,
        $("#aDrawNewCircle").hide()
    }
    function oi(n)
    {
        addToCrumbtrail("ZonePopup.createClickListener(_zone)"),
        google.maps.event.addListener(n.Geometry, "click", function()
        {
            addToCrumbtrail("ZonePopup. zone click event"),
            b && (vt(n), b = !1)
        })
    }
    function k()
    {
        addToCrumbtrail("ZonePopup.removeClickListener()"),
        l != null && l != undefined && (google.maps.event.removeListener(l), l = null)
    }
    function si(n)
    {
        addToCrumbtrail("ZonePopup.createMapLoadedlistener(map)"),
        google.maps.event.addListenerOnce(n, "tilesloaded", function()
        {
            addToCrumbtrail("ZonePopup. tiles loaded event"),
            $("#divZoneMapCover").css("display", "none"),
            google.maps.event.addListener(n, "idle", function()
            {
                addToCrumbtrail("ZonePopup. map idle event"),
                $("#divZoneMapCover").css("display", "none")
            })
        })
    }
    function ct(o)
    {
        arguments.length == 0 ? ($("#btnSaveZone").unbind(), $("#aEditExistingZone").unbind(), $("#ddlZones").unbind(), $("#aZonePopupDesignation").unbind(), $("#aCreateNewZone").unbind(), $("#aSelectExistingZone").unbind()) : (o.checkPermission(512) ? ($("#aCreateNewZone, #aEditExistingZone").hide(), $("#btnSaveZone").click(function(i)
        {
            var v,
                o,
                h,
                y,
                p;
            if (i.preventDefault(), e == !0)
                return alert("Busy saving. Please wait."), !1;
            if (pCategoryPopup != undefined && pCategoryPopup.isOpen())
            {
                pCategoryPopup.onClose(function()
                {
                    $("#btnSaveZone").click()
                });
                return
            }
            if (addToCrumbtrail('$("#btnSaveZone").click'), l != undefined)
            {
                alert("Please draw the zone.");
                return
            }
            if (n.ZoneType == 2 && SizablePolygon.IsClosed() === !1)
            {
                alert("Please complete/close the shape.");
                return
            }
            if (e = !0, v = $("#txtZoneName").val(), v == "")
            {
                alert("Please enter a name for the zone!"),
                e = !1;
                return
            }
            if (v != n.Name && (w = !0, n.Name = v, f.nameChanged = !0), o = $("#txtZoneComment").val(), o.length > 255)
            {
                alert("Comment length may not exceed 255 characters.\nPlease remove " + (o.length - 255) + " characters"),
                e = !1;
                return
            }
            if (o = o == "" ? null : o, o != n.Comment && (n.Comment = o), a = !1, n.ZoneType == 1 ? (h = SizableCircle.GetCircleCenter(), n.Points == null ? (u = !0, a = !0, n.Points = [h]) : n.Points[0][0] == h[0] && n.Points[0][1] == h[1] || (u = !0, a = !0, n.Points = [h]), parseInt(n.PointRadiusMeters) != parseInt(SizableCircle.GetRadius()) && (u = !0, a = !0, n.PointRadiusMeters = SizableCircle.GetRadius())) : n.ZoneType == 2 && (y = SizablePolygon.GetPolygonPoints(), n.Points == null ? (u = !0, a = !0, n.Points = y) : n.PointsEqual(y) == !1 && (u = !0, a = !0, n.Points = y), n.PointRadiusMeters = 0), UserMappingSettings.AllowTrackingZones && (p = $("#chkTrackingZone").prop("checked"), p != n.IsTrackingZone && (n.IsTrackingZone = p, u = !0)), u = c != null ? n.Equals(c) == !1 ? !0 : u : !0, u === !1)
            {
                if (r === 0 && t.StartZoneId == n.Id || r === 1 && t.EndZoneId == n.Id)
                {
                    s();
                    return
                }
                f.zoneChanged = ft(),
                s(),
                e = !1
            }
            else
                n.Id == -1 ? d(n) : ci(n)
        }), $("#aEditExistingZone").click(function(t)
            {
                var r,
                    u;
                t.preventDefault(),
                addToCrumbtrail("ZonePopup.btnEditZone_Click()"),
                g(!0),
                nt(!0),
                $("#aSelectExistingZone").hide(),
                $("#trSelectOptions").hide(),
                g_Zones.RemoveAllBut(),
                n.ZoneType == 1 ? (u = new google.maps.LatLng(n.Points[0][1], n.Points[0][0]), SizableCircle.InitializeCircle(u, n.PointRadiusMeters, i), r = SizableCircle.GetCircleCenter(), r = new google.maps.LatLng(r[1], r[0]), $("#aDrawNewCircle").hide(), $("#aDrawNewShape").text(MESSAGES.REPLACE_CIRCLE), h(n.PointRadiusMeters)) : (SizablePolygon.InitializePolygon(n, i), r = SizablePolygon.GetBounds().getCenter(), $("#aDrawNewCircle").show(), $("#aDrawNewShape").text(MESSAGES.REDRAW_CUSTOM), $("#aDrawNewCircle").text(MESSAGES.REPLACE_CUSTOM)),
                i.setCenter(r),
                $("#txtZoneComment").unbind("focus"),
                $("#trZoneName").show(),
                $("#btnSaveZone").show()
            }), $("#aZonePopupDesignation").click(function(t)
            {
                if (t.preventDefault(), addToCrumbtrail("ZonePopup.toggleDesignation(a)"), rt !== !1)
                {
                    var i = $("#imgDesignationZone")[0];
                    n.Designation == 1 || n.Designation == 3 ? ($(i).next().text("Business"), i.src = URL.BUSINESS, i.alt = "4", n.Designation = 4) : (n.Designation == 2 || n.Designation == 4) && ($(i).next().text("Private"), i.src = URL.PRIVATE, i.alt = "3", n.Designation = 3),
                    u = !0
                }
            }), $("#aCreateNewZone").click(function(t)
            {
                t.preventDefault(),
                addToCrumbtrail("ZonePopup.aCreateNewZone()"),
                g_Zones.RemoveAllBut(),
                f.zoneChanged = !0,
                n = new Zone(-1, "", 1, 3, null, p, null, null, !1),
                ht(),
                ut(n),
                $("#divZPZoneDetails").show(),
                $("#trSelectOptions").hide(),
                $("#btnSaveZone").show(),
                $("#trZoneName").show(),
                nt(!0),
                g(!0),
                $("#trAssignedReason").hide(),
                $("#sHeading").text("Create new zone"),
                $("#txtZoneComment").unbind("focus").val(null),
                $("#txtZoneName").focus()
            })) : $("#aCreateNewZone, #aEditExistingZone").hide(), o.checkPermission(256) ? ($("#aSelectExistingZone").show(), $("#ddlZones").change(function(n)
        {
            var i = n.target.options[n.target.selectedIndex].value,
                t;
            addToCrumbtrail("ZonePopup.ddlZones_OnChange(value)"),
            t = g_Zones.GetZone(i),
            vt(t)
        }), $("#aSelectExistingZone").click(function(n)
            {
                n.preventDefault(),
                addToCrumbtrail("ZonePopup.aSelectExistingZone()"),
                b = !0,
                $("#divZPZoneDetails").hide(),
                $("#trSelectOptions").hide(),
                i.setOptions({draggableCursor: "hand"}),
                $("#divZPSelectExistingZone").show(),
                SizableCircle.RemoveCircle(),
                SizablePolygon.RemovePolygon()
            })) : $("#aSelectExistingZone").hide())
    }
    function hi(n, t)
    {
        addToCrumbtrail("ZonePopup.slider_slide(event, ui)"),
        $("#txtRadius").text(Format.DistanceSmall(t.value)),
        SizableCircle.radiusChanged(t.value)
    }
    function d(n)
    {
        ViewingDriverProfile() ? (addToCrumbtrail("ZonePopup.SaveZone(zone) on driver"), m_DriverProfile.SaveZone(n, lt, at)) : (addToCrumbtrail("ZonePopup.SaveZone(zone)"), n.Save(lt, at))
    }
    function lt(t)
    {
        var i;
        if (addToCrumbtrail("ZonePopup.SaveZone(zone) Success"), t.d.length == 1 && t.d[0] === !1)
        {
            alert(InvalidShapeMsg);
            return
        }
        var f = t.d[0],
            r = t.d[1],
            u = t.d[2];
        (n == null || n == undefined) && (n = zone),
        n.Id = f,
        g_Zones.UpdateZone(n, a),
        ot = !0,
        (r != null || w == !0) && ai(n.Id, n, r),
        ft(),
        u != null && pCategoryPopup != null && (i = u[1], i.unshift({
            iCategoryId: 0, sCategory: "None", sColourHex: "transparent"
        }), i.push({
                iCategoryId: -99, sCategory: "Edit", sColourHex: "transparent"
            }), pCategoryPopup.setDatasource(i)),
        s(),
        alertUI()
    }
    function at(t, i)
    {
        return $.extend(n, c), e = !1, alert(i), 1
    }
    function ci(n)
    {
        addToCrumbtrail("ZonePopup.SaveEditedZone(zone)"),
        DoAjax({
            url: "/MappingWebService.asmx/WillTripsBeUnzoned", data: '{"zo":' + n.ToJSONString() + ',"driverId":' + (ViewingDriverProfile() ? m_DriverProfile.CurrentDriverId : 0) + "}", successCallback: function(t)
                {
                    if (t.d === null)
                    {
                        alert(InvalidShapeMsg),
                        e = !1;
                        return
                    }
                    t.d === !0 ? confirmUI("By changing the shape of your zone, some of your trips \nwill now fall outside the zone, and be marked as 'unknown'.\nDo you want to continue?", !0, function(t)
                    {
                        return t == !0 ? (d(n), !1) : (e = !1, !0)
                    }) : d(n)
                }, errorCallback: function()
                {
                    alert("Oops! Failed to compare zone changes. We will attempt to save the changes anyway."),
                    d(n)
                }
        })
    }
    function li(r, u)
    {
        var e,
            o,
            h,
            l,
            f,
            c;
        addToCrumbtrail("ZonePopup.GetCloseZones(" + r + ", " + u + ")"),
        google.maps.event.trigger(i, "resize"),
        l = iMaxSnappingDistance + iMaxZoneRadius,
        f = null,
        r === 0 && (o = t.Points[0][0], h = t.Points[0][1]),
        r == 1 && (c = t.Points.length - 1, o = t.Points[c][0], h = t.Points[c][1]);
        var a = g_Zones.GetAllIds(),
            v = ViewingDriverProfile() ? m_DriverProfile.CurrentDriverId : 0,
            y = '{"point":[ ' + o + "," + h + '], "loadedZones":' + IntArrayToJSONString(null, a) + ', "driverId":' + v + "}";
        return DoAjax({
                url: "/MappingWebService.asmx/GetZonesByProximity", data: y, successCallback: function(t)
                    {
                        var c = t.d[0],
                            p = t.d[1],
                            w,
                            l,
                            a,
                            s,
                            r,
                            v,
                            y,
                            b;
                        if (p != null && g_Zones.pushRange(p), w = t.d[2], c == null)
                            return e = !1, !1;
                        for (l = c.length, e = l == 1 && u != null ? !1 : !0, a = [], s = 0; s < l; s++)
                            r = g_Zones.GetZone(c[s]),
                            v = g_Zones.DrawZone(r, i),
                            u == r.Id && (n = r, f = new google.maps.LatLngBounds(v.getSouthWest(), v.getNorthEast())),
                            a[s] = '<option value="' + r.Id + '">' + r.Name + " (" + Format.DistanceSmall(w[s]) + ")<\/option>",
                            oi(r);
                        y = new google.maps.LatLng(h, o),
                        f != null ? (f.extend(y), i.fitBounds(f)) : i.setCenter(y),
                        n.Id == u && n != -1 && (b = GoogleMapExtensions.GetZoomLevel(f, $("#divZoneMap").width()), i.setZoom(b), n.Geometry.setOptions(dt), n.Geometry.setMap(i)),
                        $("#ddlZones").append(a.join(" "))
                    }, errorCallback: function(n, t)
                    {
                        alert(t),
                        s(),
                        e = -1
                    }, doAsync: !1
            }), e
    }
    function vt(t)
    {
        if (addToCrumbtrail("ZonePopup.SelectedZoneChanged(_zone)"), n != undefined && n.Id === t.Id)
        {
            s();
            return
        }
        n = t,
        u = !1,
        k(),
        f.zoneChanged = ft(),
        s()
    }
    function ut(n)
    {
        addToCrumbtrail("ZonePopup.LoadDivContent(zone)"),
        $("#txtZoneName").val(n.Name),
        $("#txtZoneComment").val(n.Comment),
        $("#trDesignation").show(),
        UserMappingSettings.AllowTrackingZones && ($("#chkTrackingZone")[0].checked = n.IsTrackingZone),
        UserMappingSettings.AllowTripCategorization && $("#trZoneCategory").length > 0 && (n.CategoryId == null || n.CategoryId == 0 ? ($("#spZoneCategory").empty(), $("#divZoneCategory div.cat").addClass("catEmpty").empty()) : ($("#spZoneCategory").empty().text(GetCategoryText(n.CategoryId)), $("#divZoneCategory div.cat").removeClass("catEmpty").empty(), $("#divZoneCategory div.cat").append(GetCategoryDiv(n.CategoryId, !1)))),
        n.Designation == 1 || n.Designation == 3 ? ($("#imgDesignationZone")[0].src = URL.PRIVATE, $("#imgDesignationZone").next().text("Private"), $("#imgDesignationZone")[0].alt = 3) : (n.Designation == 2 || n.Designation == 4) && ($("#imgDesignationZone")[0].src = URL.BUSINESS, $("#imgDesignationZone").next().text("Business"), $("#imgDesignationZone")[0].alt = 4),
        n.ZoneType == 1 ? (h(n.PointRadiusMeters), $("#txtInfo").text(MESSAGES.INFO_CIRCLE)) : (h(), $("#txtInfo").text(MESSAGES.INFO_CUSTOM))
    }
    function s()
    {
        if (addToCrumbtrail("ZonePopup.ClearDivContent()"), f.shapeChanged === !1 && (n.ZoneType == 1 && SizableCircle.HasChanged() === !0 || n.ZoneType == 2 && SizablePolygon.HasChanged() === !0) && (f.shapeChanged = !0), k(), i != undefined)
        {
            i.setOptions({draggableCursor: "hand"});
            var t = i.getStreetView();
            t != undefined && t.getVisible() == !0 && t.setVisible(!1)
        }
        g_Zones.RemoveAllBut(null),
        l = null,
        v != undefined && v.setMap(null),
        y != null && y.setMap(null),
        r = null,
        n != undefined && n.Geometry != null && n.Geometry.setMap(null),
        n = null;
        try
        {
            SizableCircle.RemoveCircle(),
            SizablePolygon.RemovePolygon()
        }
        catch(u) {}
        $("#txtRadius").text(""),
        $("#ddlZoneType").val(""),
        $("#txtZoneName").val(""),
        $("#dllDesignation2").val(""),
        $("#ddlZones").find("option").remove(),
        $("#ddlZones").append('<option value="0">Select a Zone<\/option>'),
        $("#txtZoneComment").val(""),
        $("#divZPSelectExistingZone").hide(),
        $("#divZPZoneDetails").hide(),
        $("#divZonePopup").toggleClass("hide"),
        g_fPopupOpen = !1,
        $("#divZoneMapCover").css("display", "block"),
        $("#spZoneCategory").empty(),
        $("#divZoneCategory div.cat").addClass("catEmpty"),
        tt != null ? tt(f) : $(".popupBackground").hide(),
        ct()
    }
    function ft()
    {
        if (addToCrumbtrail("ZonePopup.UpdateTrip()"), t.fSuccess = !0, t.tripOrg = {
                StartZoneId: t.StartZoneId, StartLoc: t.StartLoc, EndZoneId: t.EndZoneId, EndLoc: t.EndLoc
            }, r === 0)
        {
            if (t.StartZoneId == n.Id)
                return !0;
            t.StartZoneId = n.Id,
            t.StartLoc = n.Name
        }
        else if (r === 1)
        {
            if (t.EndZoneId == n.Id)
                return !0;
            t.EndZoneId = n.Id,
            t.EndLoc = n.Name
        }
        ViewingDriverProfile() ? m_DriverProfile.SaveTrip(t, yt, pt) : t.Save(yt, pt);
        var i = t.fSuccess;
        return t.fSuccess = t.tripOrg = undefined, i
    }
    function yt(n)
    {
        var i,
            u,
            f,
            e,
            o,
            s,
            r;
        if (t.tripOrg = undefined, addToCrumbtrail("ZonePopup.UpdateTrip() Success"), i = n.d[0], t.StartZoneSnapped = i.StartZoneSnapped, t.StartZoneSelected = i.StartZoneSelected, t.StartZoneId = i.StartZoneId, t.StartLoc = i.StartLoc, t.StartZoneId != null && (t.StartLoc = g_Zones.GetName(t.StartZoneId), u = $("#" + t.Id + " td:nth-child(" + (tableCellEnum.StartZone + 1) + ") > span.id"), t.StartZoneSnapped === !1 && t.StartZoneSelected === !1 ? u.text("") : t.StartZoneSelected === !0 ? u.text(" ~") : u.text(" *"), $("#" + t.Id + " td:nth-child(" + (tableCellEnum.StartZone + 1) + ") span[data-a]").removeClass("unknown"), f = $("#" + t.Id + " td:nth-child(" + (tableCellEnum.StartZone + 1) + ")")[0], f != undefined && (f.firstChild.innerHTML = t.StartLoc, f.firstChild.title = "Click to view zone")), t.EndZoneSnapped = i.EndZoneSnapped, t.EndZoneSelected = i.EndZoneSelected, t.EndZoneId = i.EndZoneId, t.EndLoc = i.EndLoc, t.EndZoneId != null && (t.EndLoc = g_Zones.GetName(t.EndZoneId), e = $("#" + t.Id + " td:nth-child(" + (tableCellEnum.EndZone + 1) + ") > span.id"), t.EndZoneSnapped === !1 && t.EndZoneSelected === !1 ? e.text("") : t.EndZoneSelected === !0 ? e.text(" ~") : e.text(" *"), $("#" + t.Id + " td:nth-child(" + (tableCellEnum.EndZone + 1) + ") span[data-a]").removeClass("unknown"), o = $("#" + t.Id + " td:nth-child(" + (tableCellEnum.EndZone + 1) + ")")[0], o != undefined && (o.firstChild.innerHTML = t.EndLoc, o.firstChild.title = "Click to view zone")), t.TripAdjustment != undefined)
            for (s = t.TripAdjustment.length, r = 0; r < s; r++)
                t.TripAdjustment[r] != undefined && t.TripAdjustment[r].setMap(null);
        t.TripAdjustment = [],
        t.fSuccess = !0
    }
    function pt(n, i)
    {
        $.extend(t, t.tripOrg),
        t.tripOrg = undefined,
        alert(i),
        t.fSuccess = !1
    }
    function ai(i, r, u)
    {
        var e,
            c,
            s,
            h;
        if (addToCrumbtrail("ZonePopup.UpdateTripTable(" + i + ", zone, altered)"), u != null)
        {
            var y = u.length,
                p = GetCategoryColor(r.CategoryId),
                b = $("#thCategory").length > 0;
            for (e = 0; e < y; e++)
            {
                var a = u[e][0],
                    k = u[e][1],
                    l = u[e][2],
                    o = u[e][3],
                    v = u[e][4] && b,
                    f = g_atTrips.get(a);
                f != null && (c = "Click to view zone", k === !0 ? (l === !0 ? (f.StartZoneId = i, f.StartLoc = r.Name) : (f.StartZoneId = null, f.StartLoc = "Unknown", c = "Click to create zone"), f.Markers != undefined && f.Markers[0] != undefined && f.Markers[0].setOptions({cursorString: f.StartLoc}), s = $("#" + f.Id + " td:nth-child(" + (tableCellEnum.StartZone + 1) + ")")[0], s != undefined && (s.firstChild.innerHTML = f.StartLoc, s.firstChild.title = c, f.StartZoneId === null ? $(s.firstChild).addClass("unknown") : $(s.firstChild).removeClass("unknown")), f.StartZoneSnapped = o, o === !0 ? $("#" + f.Id + " td:nth-child(" + (tableCellEnum.StartZone + 1) + ") > span.id").text(" *") : o === !1 && $("#" + f.Id + " td:nth-child(" + (tableCellEnum.StartZone + 1) + ") > span.id").text("")) : (l === !0 ? (f.EndZoneId = i, f.EndLoc = r.Name) : v == 0 && l == !1 && (f.EndZoneId = null, f.EndLoc = "Unknown", c = "Click to create zone"), f.Markers != undefined && f.Markers[1] != undefined && f.Markers[1].setOptions({cursorString: f.EndLoc}), h = $("#" + f.Id + " td:nth-child(" + (tableCellEnum.EndZone + 1) + ")")[0], h != undefined && (h.firstChild.innerHTML = f.EndLoc, h.firstChild.title = c, f.EndZoneId === null ? $(h.firstChild).addClass("unknown") : $(h.firstChild).removeClass("unknown")), f.EndZoneSnapped = o, o === !0 ? $("#" + f.Id + " td:nth-child(" + (tableCellEnum.EndZone + 1) + ") > span.id").text(" *") : o === !1 && $("#" + f.Id + " td:nth-child(" + (tableCellEnum.EndZone + 1) + ") > span.id").text(""), v && (f.CategoryId = r.CategoryId, $("#" + f.Id + " td:first-child > div").css("background-color", p).data("c", f.CategoryId))), a == t.Id && ($("#txtStartLoc").text(f.StartLoc), $("#txtEndLoc").text(f.EndLoc)))
            }
        }
        w === !0 && $.each(g_atTrips, function(t, i)
        {
            var r,
                u;
            i.StartZoneId == n.Id && (i.StartLoc = n.Name, r = $("#" + i.Id + " td:nth-child(" + (tableCellEnum.StartZone + 1) + ")")[0], r != undefined && (r.firstChild.innerHTML = n.Name)),
            i.EndZoneId == n.Id && (i.EndLoc = n.Name, u = $("#" + i.Id + " td:nth-child(" + (tableCellEnum.EndZone + 1) + ")")[0], u != undefined && (u.firstChild.innerHTML = n.Name))
        })
    }
    function vi(n)
    {
        addToCrumbtrail("ZonePopup.SetRadius(" + n + ")"),
        $("#txtRadius").text(n)
    }
    function yi()
    {
        addToCrumbtrail("ZonePopup.RemoveListener()"),
        k(),
        n.Points = SizablePolygon.GetPolygonPoints(),
        u = !0,
        SizablePolygon.RemovePolygon(),
        SizablePolygon.InitializePolygon(n, i),
        i.setOptions({draggableCursor: "openhand"}),
        $("#txtInfo").text(MESSAGES.INFO_CUSTOM),
        $("#aDrawNewShape").show(),
        $("#aDrawNewShape")[0].firstChild.nodeValue = MESSAGES.REDRAW_CUSTOM,
        $("#aDrawNewCircle").show(),
        $("#aDrawNewCircle")[0].firstChild.nodeValue = MESSAGES.REPLACE_CUSTOM,
        i.setOptions({draggableCursor: "hand"}),
        f.shapeChanged = !0
    }
    function pi(t)
    {
        addToCrumbtrail("ZonePopup.aDrawNewShape()"),
        g_Zones.RemoveZones(n.Id),
        SizablePolygon.RemovePolygon(),
        SizableCircle.RemoveCircle(),
        l = google.maps.event.addListener(i, "click", wt),
        $("#aDrawNewShape").hide(),
        $("#aDrawNewCircle").hide(),
        i.setOptions({draggableCursor: "crosshair"}),
        h(),
        n.ZoneType = t,
        t == 2 ? $("#txtInfo").text(MESSAGES.INFO_CUSTOM_NEW) : t == 1 && $("#txtInfo").text(MESSAGES.INFO_CIRCLE_NEW)
    }
    function wt(t)
    {
        (addToCrumbtrail("ZonePopup.drawZone(latLng)"), t != undefined) && (t.latLng != undefined && (t = t.latLng), n.ZoneType == 1 ? (k(), SizableCircle.InitializeCircle(t, p, i), i.setOptions({draggableCursor: "hand"}), u = !0, f.shapeChanged = !0, $("#txtInfo").text(MESSAGES.INFO_CIRCLE), $("#aDrawNewShape")[0].firstChild.nodeValue = MESSAGES.REPLACE_CIRCLE, $("#aDrawNewShape").show(), h(p)) : SizablePolygon.DrawNewPolygon(null, t, i))
    }
    function g(t)
    {
        t === !1 ? (addToCrumbtrail("ZonePopup.SetEditable(comment)"), $("#trCommentBox").hide(), $("#aZonePopupDesignation").addClass("NotEditable"), UserMappingSettings.AllowTrackingZones === !0 && $("#chkTrackingZone").prop("disabled", !0), UserMappingSettings.AllowTripCategorization && ($("#spZoneCategory").unbind("click"), $("#divZoneCategory").unbind("click")), rt = !1) : (addToCrumbtrail("ZonePopup.Editible()"), $("#trCommentBox").show(), $("#aZonePopupDesignation").removeClass("NotEditable"), UserMappingSettings.AllowTrackingZones === !0 && $("#chkTrackingZone").prop("disabled", !1), CheckCategorization() && ($("#spZoneCategory").click(function(t)
            {
                t.preventDefault(),
                t.stopPropagation(),
                pCategoryPopup.show($("#divZoneCategory")[0], {
                    selected: (n.CategoryId == null ? 0 : n.CategoryId).toString(2), callback: bt
                }, t)
            }), $("#divZoneCategory").click(function(t)
            {
                $(t.target.parentNode).data("id") == undefined && (t.preventDefault(), t.stopPropagation(), pCategoryPopup.show(this, {
                        selected: (n.CategoryId == null ? 0 : n.CategoryId).toString(2), callback: bt
                    }, t))
            })), rt = !0)
    }
    function h(n)
    {
        arguments == undefined || arguments.length == 0 ? (addToCrumbtrail("ZonePopup.SetRadiusControl()"), $("#tblRadius").hide()) : (addToCrumbtrail("ZonePopup.SetRadius(radius)"), $("#txtRadius").text(Format.DistanceSmall(n)), $("#slider").slider("option", {value: n}), $("#tblRadius").show())
    }
    function nt(n)
    {
        n === !0 ? (addToCrumbtrail("ZonePopup.ShowDetails()"), $("#trInfo").show(), $("#trDesignation").show(), $("#trComment").show(), $("#trCommentBox").show(), $("#trGeocode").show()) : (addToCrumbtrail("ZonePopup.HideDetails()"), $("#trInfo").hide(), $("#trComment").hide(), $("#trCommentBox").hide(), $("#trGeocode").hide())
    }
    function bt(t)
    {
        var i = t == null ? undefined : $(t).data("id"),
            r;
        return i == -99 ? (setTimeout(function()
            {
                EditCategories()
            }, 100), !1) : i != undefined && i != 0 ? ($(t).children("div").toggleClass("checked"), !1) : (i == undefined && (i = 0, $("table.categoryPopupTable tr").each(function(n, t)
            {
                var r = $(t);
                r.children("td").children("div").hasClass("checked") === !0 && (i += parseInt(r.children("td").data("id")))
            })), n.CategoryId = i, r = $("#divZoneCategory div.cat"), n.CategoryId == 0 ? (r.addClass("catEmpty").css("background-color", "white").data("c", i), r.children("div[class^=cat]").remove(), $("#spZoneCategory").empty().text("None")) : (r.removeClass("catEmpty"), r.children("div[class^cat]").remove(), r.append(GetCategoryDiv(i, !1)), $("#spZoneCategory").empty().text(GetCategoryText(i))), !0)
    }
    var i,
        tt,
        l,
        it,
        c,
        t,
        r,
        et,
        v,
        y,
        n,
        u,
        kt = {strokeColor: Colors.LightRed.hash()},
        dt = {
            strokeColor: Colors.Black.hash(), strokeOpacity: .8, strokeWeight: 1, fillColor: Colors.ZoneFillColor.hash()
        },
        p = 50,
        w,
        ot,
        a,
        rt,
        b,
        gt = ["Unassigned", "In zone", "Snapped to by system", "Selected by user"],
        f = new ni,
        e,
        o = {
            select: !1, edit: !1
        };
    return $("#divZPCancel a").click(function(n)
        {
            n.preventDefault(),
            addToCrumbtrail("ZonePopup.AddZoneCancel()"),
            c != null && g_Zones.UpdateZone(c),
            s()
        }), $("#trGeocode a").click(function(n)
        {
            var i,
                u,
                f;
            n.preventDefault(),
            addToCrumbtrail("ZonePopup.btnGeoCode_Click(btn)"),
            r === 0 ? (longitude = t.Points[0][0], latitude = t.Points[0][1], i = new google.maps.LatLng(latitude, longitude)) : r == 1 && (u = t.Points.length - 1, longitude = t.Points[u][0], latitude = t.Points[u][1], i = new google.maps.LatLng(latitude, longitude)),
            f = new google.maps.Geocoder,
            f.geocode({location: i}, function(n, t)
            {
                t == google.maps.GeocoderStatus.OK && $("#txtZoneComment").val(n[0].formatted_address)
            })
        }), $("#aDrawNewShape, #aDrawNewCircle").click(function(n)
            {
                n.preventDefault(),
                pi($(n.target).attr("href"))
            }), {
                Load: ti, slider_slide: hi, RemoveListener: yi, SetRadius: vi
            }
}(),
MergeTripPopup = function()
{
    function b(n, r)
    {
        addToCrumbtrail("MergeTripPopup.LoadDiv(trip, callback)"),
        c(),
        $("#divMergeTripMapCover").show(),
        s = r == null ? null : r,
        i = null,
        t == null ? (g_fPreloadMaps === !1 && g_fGoogleApiLoaded === !1 && (document.body.style.cursor = "wait", LoadGoogleApi()), WaitLoaded(function()
        {
            k("divMergeTripMap", null),
            v(n)
        })) : v(n)
    }
    function k(n)
    {
        addToCrumbtrail("MergeTripPopup.InitializeTripMap(mapDiv, center)");
        var i = {
                center: new google.maps.LatLng(0, 0), mapTypeId: google.maps.MapTypeId.ROADMAP, streetViewControl: !1
            };
        t = new google.maps.Map(document.getElementById(n), i),
        t != null && t.setZoom(20)
    }
    function d(n)
    {
        addToCrumbtrail("MergeTripPopup.createMapLoadedlistener(map)"),
        google.maps.event.addListener(n, "tilesloaded", function()
        {
            addToCrumbtrail("MergeTripPopup. tiles loaded event"),
            a(t),
            google.maps.event.trigger(t, "resize"),
            google.maps.event.clearListeners(t, "tilesloaded"),
            google.maps.event.addListener(n, "idle", function()
            {
                addToCrumbtrail("MergeTripPopup. map idle event"),
                $("#divMergeTripMapCover").css("display", "none")
            })
        })
    }
    function a(n)
    {
        addToCrumbtrail("MergeTripPopup.createMapResizeListener(map)"),
        google.maps.event.addListenerOnce(n, "resize", function()
        {
            addToCrumbtrail("MergeTripPopup. map resize event"),
            t.setCenter(h)
        })
    }
    function v(i)
    {
        addToCrumbtrail("MergeTripPopup.ContinueLoadingDiv(" + i.Id + ")"),
        d(t),
        a(t),
        n = [],
        e(i, 0),
        $("#divMergeTripPopup").toggleClass("hide")
    }
    function e(r, u)
    {
        var c,
            o,
            s,
            f,
            e;
        if (r != undefined)
        {
            if (r.GetPoints() === !1)
                return !1;
            addToCrumbtrail("MergeTripPopup.AppendToMergeTable(" + r.Id + ", " + u + ")"),
            u === 0 ? n.unshift(r) : n.push(r)
        }
        else
            addToCrumbtrail("MergeTripPopup.AppendToMergeTable(trip, position)");
        for (c = n.length, o = [], i = -1, s = new google.maps.LatLngBounds, f = 0; f < c; f++)
        {
            if (i++, (i == null || i >= Colors.List.length || i < 0) && (i = 0), e = n[f], f == 0 ? (o[f] = g(e, Colors.List[i]), c === 1 && (o[++f] = p(e, "even"))) : f == c - 1 ? (o[f] = y(e, Colors.List[i], n[f - 1].TripEndDate), o[++f] = p(e, f % 2 == 0 ? "even" : "odd")) : o[f] = y(e, Colors.List[i], n[f - 1].TripEndDate), rt(e, Colors.List[i]) === !1)
                return !1;
            s.extend(e.Bounds.getNorthEast()),
            s.extend(e.Bounds.getSouthWest())
        }
        $("#tblTripsToMerge > tbody").empty(),
        $("#tblTripsToMerge > tbody").append(o.join("")),
        nt(),
        it(),
        h = s.getCenter(),
        t.setCenter(h),
        t.setZoom(GoogleMapExtensions.GetZoomLevel(s, $("#divMergeTripMap").height())),
        google.maps.event.trigger(t, "resize")
    }
    function g(t, i)
    {
        var r,
            u;
        return addToCrumbtrail("MergeTripPopup.GetFirstTableRow(trip, lineColor)"), r = "", n.length > 1 && (r = "<a href='#' onclick='MergeTripPopup.RemoveTrip(" + t.Id + "); return false;' style='text-decoration:none; color:red;'>X<\/a>"), u = ["<tr id='merge" + t.Id + "' class='odd'>", "<td>From:", "<\/td><td>" + (t.StartLoc == null ? "Unknown" : t.StartLoc), "<\/td><td>Departure:", "<\/td><td>" + new Date(t.TripStartDate).toFormattedString2(), "<\/td><td>" + r, "<\/td><\/tr>", "<tr id='time" + t.Id + "' class='even'>", "<td><hr style='color:#" + i + "; background-color:#" + i + ";'><\/td>", "<td colspan='4' class='center'>Travel Time: ", new Time(t.Duration).toString(!1), "<\/td><\/tr>"], u.join("")
    }
    function y(n, t, i)
    {
        addToCrumbtrail("MergeTripPopup.GetTableRow(trip, lineColor, prevTripEndTime)");
        var r = ["<tr id='merge" + n.Id + "' class='odd'>", "<td>", "<\/td><td>" + (n.StartLoc == null ? "Unknown" : n.StartLoc), "<\/td><td>Stay:", "<\/td><td>" + tt(i, n.TripStartDate), "<\/td><td>", "<\/td><\/tr>", "<tr id='time" + n.Id + "' class='even'>", "<td><hr style='color:#" + t + "; background-color:#" + t + ";'><\/td>", "<td colspan='4' class='center'>Travel Time: ", new Time(n.Duration).toString(!1), "<\/td><\/tr>"];
        return r.join("")
    }
    function p(t)
    {
        var i,
            r;
        return addToCrumbtrail("MergeTripPopup.GetLastTableRow(trip, rowColor)"), i = "", n.length > 1 && (i = "<a href='#' onclick='MergeTripPopup.RemoveTrip(" + t.Id + "); return false;' style='text-decoration:none; color:red;'>X<\/a>"), r = ["<tr id='merge" + t.Id + "' class='odd'>", "<td>To:", "<\/td><td>" + (t.EndLoc == null ? "Unknown" : t.EndLoc), "<\/td><td>Arrival:", "<\/td><td>" + new Date(t.TripEndDate).toFormattedString2(), "<\/td><td>" + i, "<\/td><\/tr>"], r.join("")
    }
    function nt()
    {
        var r,
            i,
            e,
            s;
        addToCrumbtrail("MergeTripPopup.SetRowAndLabels()"),
        r = n[n.length - 1],
        i = o(1, r),
        i != undefined ? ($("#spNextEndZone").text((i.StartLoc == null ? "Unknown" : i.StartLoc) + " to " + (i.EndLoc == null ? "Unknown" : i.EndLoc)), $("#aMergeNext").show()) : $("#aMergeNext").hide(),
        i = o(0, n[0]),
        i != undefined ? ($("#spPrevStartZone").text((i.StartLoc == null ? "Unknown" : i.StartLoc) + " to " + (i.EndLoc == null ? "Unknown" : i.EndLoc)), $("#aMergePrev").show()) : $("#aMergePrev").hide(),
        e = n[0].Points[0],
        u == undefined ? u = SetupLabelMarker({
            map: t, position: new google.maps.LatLng(e[1], e[0]), hexColor: Colors.Green, markerLetter: "A", cursorString: n[0].StartLoc
        }) : (u.setPosition(new google.maps.LatLng(e[1], e[0])), u.setText(n[0].StartLoc)),
        s = r.Points[r.Points.length - 1],
        f == undefined ? f = SetupLabelMarker({
            map: t, position: new google.maps.LatLng(s[1], s[0]), hexColor: Colors.Red, markerLetter: "B", cursorString: r.EndLoc
        }) : (f.setPosition(new google.maps.LatLng(s[1], s[0])), f.setText(r.EndLoc))
    }
    function tt(n, t)
    {
        addToCrumbtrail("MergeTripPopup.CalculateStay(dateFrom, dateTo)");
        var r = Date.parse(t),
            u = Date.parse(n),
            i = r - u;
        return i == 0 ? "0 min" : new Time(i).toString(!1)
    }
    function it()
    {
        var t,
            r,
            f,
            i,
            u;
        for (addToCrumbtrail("MergeTripPopup.UpdateNewTrip()"), t = new Number, r = new Time, t = 0, f = n.length, w = null, i = 0; i < f; i++)
            u = n[i],
            t += new Number(u.Distance),
            r.add(new Time(u.Duration));
        $("#tdTotDistance").text(Format.Distance(t)),
        $("#tdTotDuration").text(r.toString(!1))
    }
    function rt(n, i)
    {
        var r,
            f;
        if (addToCrumbtrail("MergeTripPopup.DrawLine(trip, colour)"), n.Points == undefined && n.GetPoints() === !1)
            return !1;
        if (n.Line != null)
        {
            n.Line.setOptions({
                map: t, strokeColor: i.hash()
            });
            return
        }
        var u = [],
            o = n.Points.length,
            e = n.Points;
        for (r = 0; r < o; r++)
            u[r] = new google.maps.LatLng(e[r][1], e[r][0]);
        lineOptions = {
            clickable: !0, geodesic: !1, path: u, strokeColor: i.hash(), strokeOpacity: 1, strokeWeight: 2, zIndex: n.Id
        },
        f = new google.maps.Polyline(lineOptions),
        n.Line = f,
        n.Bounds = GoogleMapExtensions.GetLineBounds(u),
        f.setOptions({map: t})
    }
    function o(n, t)
    {
        addToCrumbtrail("MergeTripPopup.GetNextTrip(" + n + ", " + t.Id + ")"),
        t.index == undefined && (t = g_atTrips.get(t.Id));
        var i = t.index,
            r;
        if (iSortOrder === 1 && n === 1 || iSortOrder === 2 && n === 0)
        {
            if (i - 1 < 0)
                return null;
            r = i - 1
        }
        else if (iSortOrder === 1 && n === 0 || iSortOrder === 2 && n === 1)
        {
            if (i + 1 === g_atTrips.length)
                return null;
            r = i + 1
        }
        return g_atTrips[r]
    }
    function c()
    {
        addToCrumbtrail("MergeTripPopup.BindEvents()"),
        $("#aMergeNext").click(ut),
        $("#aMergePrev").click(ft)
    }
    function l()
    {
        addToCrumbtrail("MergeTripPopup.UnbindEvents()"),
        $("#aMergeNext").unbind("click"),
        $("#aMergePrev").unbind("click")
    }
    function ut()
    {
        if (addToCrumbtrail("MergeTripPopup.MergeNext()"), n.length >= 8)
            return !1;
        l();
        var t = n[n.length - 1],
            i = o(1, t);
        return e(i, 1), c(), !1
    }
    function ft()
    {
        if (addToCrumbtrail("MergeTripPopup.MergePrev()"), n.length >= 8)
            return !1;
        l();
        var t = n[0],
            i = o(0, t);
        return e(i, 0), c(), !1
    }
    function r(i)
    {
        var e,
            r,
            f,
            u;
        for (addToCrumbtrail("MergeTripPopup.ClearDiv(mergeSuccess)"), e = n.length, l(), r = 0; r < e; r++)
            f = n[r],
            f.Line != null && f.Line.setMap(null);
        $("#divMergeTripPopup").toggleClass("hide"),
        $("#tblTripsToMerge tbody").empty(),
        $("#trNewTrip") !== undefined && $("#trNewTrip").remove(),
        s != null && s(i),
        t != null && (google.maps.event.clearListeners(t, "idle"), t.setZoom(1), u = t.getStreetView(), u != undefined && u.getVisible() == !0 && u.setVisible(!1)),
        $.unblockUI()
    }
    function et(t)
    {
        addToCrumbtrail("MergeTripPopup.RemoveTrip(id)"),
        n = $.grep(n, function(n)
        {
            return n.Id == t && n.Line != null && n.Line.setMap(null), n.Id != t
        }),
        i > 1 && i--,
        e()
    }
    var n,
        t,
        i,
        w,
        s,
        u,
        f,
        h;
    return $("#btnMergeCancel").click(function()
        {
            return addToCrumbtrail("MergeTripPopup.$('#btnMergeCancel').click"), r(), !1
        }), $("#btnMergeOk").click(function()
        {
            return (addToCrumbtrail("MergeTripPopup.$('#btnMergeOk').click"), n.length < 2) ? (alertUI("Please add a trip to merge.", 3e3), LogError("Warning: Merge: No trips to merge.", "ManageTrips.js", 3304), !1) : (confirmUI("Are you sure you want to merge these " + n.length + " trips?", !0, function(t)
                {
                    var i,
                        f,
                        u,
                        e;
                    if (t == !1)
                        return !0;
                    for (alertUI("Please wait"), i = [], f = n.length, u = 0; u < f; u++)
                        i.push(n[u].Id);
                    e = IntArrayToJSONString("tripsToMerge", i),
                    ViewingDriverProfile() == !1 ? DoAjax({
                        url: "/MappingWebService.asmx/MergeTrips", data: e, successCallback: function(n)
                            {
                                n.d == 0 && (alert("Oops! We failed to merge the trips."), LogError("Info: MergeTrip save: server side failure.", "ManageTrips.js", 3380)),
                                r(n.d)
                            }, errorCallback: function(n, t)
                            {
                                alert(t),
                                r()
                            }, async: !1
                    }) : m_DriverProfile.MergeTrips(i, function(n)
                    {
                        n.d == 0 && (alert("Oops! We failed to merge the trips."), LogError("Info: MergeTrip save: server side failure.", "ManageTrips.js", 3380)),
                        r(n.d)
                    }, function(n, t)
                    {
                        alert(t),
                        r()
                    })
                }), !1)
        }), {
                LoadDiv: b, RemoveTrip: et, ClearMergeDiv: r
            }
}(),
SplitTrip = function()
{
    function k(t, r, u)
    {
        c == !1 && (n = t, i = r, o = new google.maps.Marker({icon: "../Images/split.png"}), f = [], $("#tblTripDetails").hide(), $("#tblTripSplit").show(), $("tr[id^=trSplit2]").hide(), $("#trSplit1").show(), $("#btnSplitTrip").hide(), $("#btnPreviousTrip").hide(), $("#btnNextTrip").hide(), TripPopup.ResetHeadsUp(), $(".headsUpData").hide(), c = !0, l = u, v(r, !0), p(r, !0), n.InitializeSplitMarkers(!0), $("#splitSlider").slider({
                min: 0, max: t.Points.length - 1, step: 1, slide: g
            }))
    }
    function h()
    {
        v(i, !1),
        p(i, !1),
        n.SetPointVisibility(!1),
        f = null,
        $("#tblTripDetails").show(),
        $("#tblTripSplit").hide(),
        $("#btnPreviousTrip").show(),
        $("#btnNextTrip").show(),
        $(".headsUpData").show(),
        o.setMap(null),
        n = null,
        e != undefined && e.setMap(null),
        t != undefined && t.setMap(null),
        t = null,
        c = !1
    }
    function d(n)
    {
        google.maps.event.addListener(n, "click", function(t)
        {
            u = TripPopup.FindPoint(t.latLng, n.getPath()),
            b(u),
            $("#splitSlider").slider("option", {value: u})
        })
    }
    function v(t, i)
    {
        i == !0 ? a = google.maps.event.addListener(t, "zoom_changed", function()
        {
            n.SetPointVisibility(t.getZoom() >= s),
            t.getZoom() >= s
        }) : google.maps.event.removeListener(a)
    }
    function p(t, i)
    {
        i == !0 ? y = google.maps.event.addListener(t, "bounds_changed", function()
        {
            n.SetPointVisibility(t.getZoom() >= s)
        }) : google.maps.event.removeListener(y)
    }
    function w(t)
    {
        var u,
            f,
            s;
        e == undefined && (e = new google.maps.Polyline({
            map: i, strokeColor: "#0026FF", strokeWeight: 2
        })),
        e.setMap(i);
        var o = [],
            h = n.Points.length,
            c = r[t][2];
        for (u = 0; u < h; u++)
            if (o[u] = new google.maps.LatLng(n.Points[u][1], n.Points[u][0]), n.Points[u][2] == c)
                break;
        e.setOptions({
            path: o, zIndex: n.Id + 1
        }),
        f = google.maps.geometry.spherical.computeLength(o),
        s = f / n.Distance * 100,
        $("#trSplit2d td#tdA").text(Format.Distance(f) + " (" + s.toFixed(0) + "%)"),
        $("#trSplit2d td#tdB").text(Format.Distance(n.Distance - f) + " (" + (100 - s).toFixed(0) + "%)")
    }
    function g(n, t)
    {
        u = t.value,
        b(t.value)
    }
    function b(n)
    {
        if (n != undefined)
        {
            var t = new google.maps.LatLng(r[n][1], r[n][0]);
            o.setOptions({
                map: i, position: t
            }),
            w(n),
            $("#btnSplitTrip").show(),
            $("#trSplit1").hide(),
            $("tr[id^=trSplit2]").show()
        }
    }
    var n,
        i,
        o,
        c = !1,
        u,
        l,
        f,
        r,
        t,
        s = 0,
        a,
        y,
        e;
    return $("#btnSplitTrip").click(function()
        {
            var t = n.Points[u][2];
            return ViewingDriverProfile() == !1 ? n.Split(t, function(n)
                {
                    h(),
                    n.d[0] == !0 ? l(n.d) : alertUI("Oops! We seem to have failed to split this trip. Please try again later.", 3e3)
                }, function(n, t)
                {
                    return addToCrumbtrail("trip.Split Failed"), alertUI(t, 3e3), 1
                }) : m_DriverProfile.SplitTrip(n.Id, t, function(n)
                {
                    h(),
                    n.d[0] == !0 ? l(n.d) : alert("Oops! We seem to have failed to split this trip. Please try again later.")
                }, function(n, t)
                {
                    return addToCrumbtrail("m_DriverProfile.SplitTrip Failed"), alert(t), 1
                }), !1
        }), $("#btnSplitCancel").click(function()
        {
            return h(), !1
        }), Trip.prototype.InitializeSplitMarkers = function(n)
            {
                var o,
                    e,
                    u;
                if (n)
                {
                    if (r = this.Points, r == null)
                        return !1;
                    o = [],
                    e = this.Line.getPath(),
                    t = new google.maps.Polyline({
                        path: e, map: i, strokeColor: "transparent", strokeWeight: 20, zIndex: this.Id
                    }),
                    d(t),
                    i.getZoom() >= s ? (this.SetPointVisibility(!0), $("#trSplit1").show(), $("#trSplit3").hide()) : ($("#trSplit1").hide(), $("#trSplit3").show())
                }
                else
                {
                    if (f != undefined)
                        for (u = 0; u <= f.length; u++)
                            f[u] != undefined && f[u].setMap(null);
                    t != undefined && t.setMap(null)
                }
            }, Trip.prototype.SetPointVisibility = function(n)
            {
                n ? t != undefined && t.setMap(i) : t != undefined && t.setMap(null)
            }, Trip.prototype.Split = function(n, t, i)
            {
                DoAjax({
                    data: '{ "tripId":' + this.Id + ', "dataId": ' + n + " }", url: "/MappingWebService.asmx/SplitTrip", successCallback: t, errorCallback: i
                })
            }, Trip.prototype.GetSplitPoints = function(n)
            {
                var t = [],
                    r = this.Id,
                    i = "{'tripId':" + r + ", 'startIndex':0, 'maxSpeed':" + n + "}";
                return DoAjax({
                        data: i, url: "/MappingWebService.asmx/GetTripSplitDataRange", successCallback: function(u)
                            {
                                var f = u.d[1];
                                for (t = u.d[0]; f === !0; )
                                    i = "{'tripId':" + r + ", 'startIndex':" + t.length + ", 'maxSpeed':" + n + "}",
                                    DoAjax({
                                        url: "/MappingWebService.asmx/GetTripSplitDataRange", data: i, successCallback: function(n)
                                            {
                                                f = n.d[1],
                                                t.add(n.d[0])
                                            }, errorCallback: function()
                                            {
                                                f = !1,
                                                alert("Oops! We failed to get the trip data. Please try again later."),
                                                t = null
                                            }, doAsync: !1
                                    })
                            }, errorCallback: function(n, i)
                            {
                                alert(i),
                                t = null
                            }
                    }), t
            }, {
                Load: k, Clear: h
            }
}(),
TripPopup = function()
{
    function yt(i, r)
    {
        addToCrumbtrail("TripPopup.LoadDiv(trip)"),
        n = i,
        s = r,
        ot(s),
        t == null ? WaitLoaded(pt) : tt()
    }
    function pt()
    {
        addToCrumbtrail("TripPopup.scriptLoaded()"),
        ni("divTripMap", null),
        tt()
    }
    function tt()
    {
        addToCrumbtrail("TripPopup.ContinueLoadingDiv()"),
        $("#tblTripDetails").show(),
        $("#tblTripSplit").hide(),
        $(".popupBackground").show(),
        $("#divTripPopup").toggleClass("hide"),
        i = n.Designation,
        k = n.Comment,
        v = n.VehicleId,
        r = n.CategoryId,
        h = n.DriverId,
        y = new google.maps.Marker({icon: "../Images/car.png"}),
        d(null)
    }
    function wt(n)
    {
        addToCrumbtrail("TripPopup.LoadDivContent(trip)");
        var t = new Date(n.TripStartDate),
            i = new Date(n.TripEndDate);
        $("#tdTripDate").text(n.Title),
        $("#tdTripTimeDeparted").text(t.toLongTimeString()),
        $("#tdTripTimeArrived").text(i.toLongTimeString()),
        $("#tdDuration").text(n.Duration),
        $("#tdDistanceTravelled").text(Format.Distance(n.Distance)),
        $("#tdMaxSpeed").text(Format.Speed(n.MaxSpeed)),
        $("#tdAvgSpeed").text(Format.Speed(n.AvgSpeed)),
        $("#trTripCategory").length > 0 && (n.CategoryId == null ? ($("#spTripCategory").empty().text("None"), $("#divTripCategory div.cat").addClass("catEmpty").empty()) : ($("#spTripCategory").empty().text(GetCategoryText(n.CategoryId)), $("#divTripCategory div.cat").removeClass("catEmpty").empty(), $("#divTripCategory div.cat").append(GetCategoryDiv(n.CategoryId, !1)))),
        n.Designation == 1 || n.Designation == 3 ? ($("#imgDesignation")[0].src = URL.PRIVATE, $("#txtDesignation")[0].innerHTML = "Private") : (n.Designation == 2 || n.Designation == 4) && ($("#imgDesignation")[0].src = URL.BUSINESS, $("#txtDesignation")[0].innerHTML = "Business"),
        ArrayNullOrEmpty(UserMappingSettings.Vehicles) == !1 ? ($("#aChangeVehicle span").text(GetVehicle(n.VehicleId).sRegistration), $("#trVehicle").show()) : $("#trVehicle").hide(),
        UserMappingSettings.Drivers != null && $("#aChangeDriver span").text(GetDriver(n.DriverId).sDriverName),
        n.StartZoneId != null ? $("#txtStartLoc").html(n.StartLoc).removeClass("red") : n.StartLoc != null ? $("#txtStartLoc").html(n.StartLoc + " <span style='color: red'>(U)<\/span>").removeClass("red") : $("#txtStartLoc").html("<span style='color: red'>Unknown<\/span>").addClass("red"),
        n.EndZoneId != null ? $("#txtEndLoc").html(n.EndLoc).removeClass("red") : n.EndLoc != null ? $("#txtEndLoc").html(n.EndLoc + " <span style='color: red'>(U)<\/span>").removeClass("red") : $("#txtEndLoc").html("<span style='color: red'>Unknown<\/span>").addClass("red"),
        n.Comment == null ? (s.checkPermission(2) && $("#txtTripComment").val("Type comment here..."), $("#txtTripComment").val(null)) : $("#txtTripComment").val(n.Comment)
    }
    function it(n)
    {
        addToCrumbtrail("TripPopup.SaveChanges(trip)");
        var t = $("#txtTripComment").val(),
            u = {
                Designation: i, VehicleId: v, CategoryId: r, Comment: n.Comment, DriverId: h
            };
        return t.length > 255 ? (alert("Comment length may not exceed 255 characters.\nPlease remove " + (t.length - 255) + " characters"), $("#txtTripComment").focus(), 1) : (t == "Type comment here..." && (t = null), t = t === "" ? null : t, n.Designation != i || t != k || n.VehicleId != v || n.CategoryId != r || n.DriverId != h ? (i == 2 || i == 4) && (t === null || t === "") && !confirm("This business trip does not have a comment. Do you want to continue saving anyway?") ? ($("#txtTripComment").focus(), 1) : (n.CategoryId = r == 0 ? null : r, n.Designation = i, n.Comment = t, n.DriverId = h, ViewingDriverProfile() == !1 ? n.Save(function(t)
                    {
                        var i = $("#Designation" + n.Id),
                            r;
                        return i.length > 0 && (n.Designation == 2 || n.Designation == 4 ? i.attr({
                                src: URL.BUSINESS, title: "Business. Click to change to Private"
                            }) : (n.Designation == 1 || n.Designation == 3) && i.attr({
                                src: URL.PRIVATE, title: "Private. Click to change to Business"
                            })), r = $("#Comment" + n.Id), r.length > 0 && (r[0].innerHTML = n.Comment == null ? "" : n.Comment), n.StartZoneSelected = t.d[0].StartZoneSelected, n.EndZoneSelected = t.d[0].EndZoneSelected, $("#" + n.Id + " td:nth-child(" + (tableCellEnum.ChangeVehicle + 1) + ") > span[data-a]").text(GetVehicle(n.VehicleId).sRegistration), $("#thCategory").length > 0 && (t.d.length == 2 && (UserMappingSettings.Categories = t.d[1], pCategoryPopup != null && (newCategories = t.d[1], newCategories.unshift({
                                    iCategoryId: 0, sCategory: "None", sColourHex: "transparent"
                                }), newCategories.push({
                                        iCategoryId: -99, sCategory: "Edit", sColourHex: "transparent"
                                    }), pCategoryPopup.setDatasource(newCategories)), n.CategoryId = t.d[0].CategoryId), $("#" + n.Id + " td:first-child > div").data("c", n.CategoryId), n.CategoryId == 0 || n.CategoryId == null ? $("#" + n.Id + " td:first-child > div").addClass("catEmpty").empty() : $("#" + n.Id + " td:first-child > div").removeClass("catEmpty").html(GetCategoryDiv(n.CategoryId, !1))), 0
                    }, function(t, i)
                    {
                        return alert(i), $.extend(n, u), 1
                    }) : m_DriverProfile.SaveTrip(n, function(t)
                    {
                        var i = $("#Designation" + n.Id),
                            r;
                        return i.length > 0 && (n.Designation == 2 || n.Designation == 4 ? i.attr({
                                src: URL.BUSINESS, title: "Business. Click to change to Private"
                            }) : (n.Designation == 1 || n.Designation == 3) && i.attr({
                                src: URL.PRIVATE, title: "Private. Click to change to Business"
                            })), r = $("#Comment" + n.Id), r.length > 0 && (r[0].innerHTML = n.Comment == null ? "" : n.Comment), n.StartZoneSelected = t.d[0].StartZoneSelected, n.EndZoneSelected = t.d[0].EndZoneSelected, $("#" + n.Id + " td:nth-child(" + (tableCellEnum.ChangeVehicle + 1) + ") > span[data-a=cv]").text(GetVehicle(n.VehicleId).sRegistration), $("#thCategory").length > 0 && (t.d.length == 2 && (m_DriverProfile.SetCategories(t.d[1]), pCategoryPopup != null && pCategoryPopup.setDatasource(m_DriverProfile.Categories), n.CategoryId = t.d[0].CategoryId), $("#" + n.Id + " td:first-child > div").data("c", n.CategoryId), n.CategoryId == 0 || n.CategoryId == null ? $("#" + n.Id + " td:first-child > div").addClass("catEmpty").empty() : $("#" + n.Id + " td:first-child > div").removeClass("catEmpty").html(m_DriverProfile.GetCategoryDiv(n.CategoryId, !1))), 0
                    }, function(t, i)
                    {
                        return alert(i), $.extend(n, u), 1
                    }), 0) : void 0)
    }
    function d(u)
    {
        var f,
            s,
            c,
            o;
        if (addToCrumbtrail("TripPopup.GetNewTrip(nextIndex)"), u !== null)
        {
            if (it(n) === 1)
                return;
            if (n.index == undefined ? (s = g_atTrips.get(n.Id), f = s.index) : f = n.index, b = n.Id, c = iSortOrder == 1 ? u == -1 ? f + 1 < g_atTrips.length ? f + 1 : 0 : f - 1 >= 0 ? f - 1 : g_atTrips.length - 1 : u == -1 ? f - 1 >= 0 ? f - 1 : g_atTrips.length - 1 : f + 1 < g_atTrips.length ? f + 1 : 0, $("#chkShowTripData")[0].checked === !0 && l(), o = g_atTrips[c], o == undefined)
                return;
            if (n.Id !== o.Id)
                $("#divTripMapCover").css("display", "block"),
                p(n),
                e(null),
                n = g_atTrips.get(o.Id);
            else
                return
        }
        if (u === null || n.Id !== b)
        {
            if (k = n.Comment, i = n.Designation, v = n.VehicleId, r = n.CategoryId, h = n.DriverId, wt(n), google.maps.event.trigger(t, "resize"), ft(n) == !1)
                return;
            $("#divTripMapCover").css("display", "none")
        }
    }
    function rt(i)
    {
        addToCrumbtrail("TripPopup.ZonePopupCallback(redraw)"),
        i.zoneChanged === !0 ? (e(null), p(n), ft(n)) : (i.shapeChanged === !0 && (e(null), u = g_Zones.GetZone(n.StartZoneId, !0), f = g_Zones.GetZone(n.EndZoneId, !0), e(t)), i.nameChanged === !0 && (n.Markers[0].setMap(null), n.Markers[1].setMap(null), u != null && $("#txtStartLoc").html(u.Name).removeClass("red"), f != null && $("#txtEndLoc").html(f.Name).removeClass("red"), et(n)))
    }
    function bt(i)
    {
        var o,
            r,
            f;
        if (addToCrumbtrail("TripPopup.MergePopupCallback(splitSuccess)"), i.length == 3)
        {
            for (o = n.Id, r = 1; r < 3; r++)
                i[r].StartZoneId != null && i[r].StartLoc == null && (i[r].StartLoc = g_Zones.GetName(i[r].StartZoneId)),
                i[r].EndZoneId != null && i[r].EndLoc == null && (i[r].EndLoc = g_Zones.GetName(i[r].EndZoneId));
            var e = new Trip(i[1]),
                s = new Trip(i[2]),
                u = ViewingDriverProfile() ? m_DriverProfile.DriverPermissions.checkPermission(16) && m_DriverProfile.Vehicles.length > 1 : !ArrayNullOrEmpty(UserMappingSettings.Vehicles);
            u = u === !0 ? GetVehicle(e.VehicleId).sRegistration : null,
            f = UserMappingSettings.Drivers != null,
            f = f ? GetDriver(e.DriverId).sDriverName : null,
            $("#tableTrips tr#" + o).html(s.ToDriverTableRow(u, iPagePermissions, f).replace(/<tr[id=0-9 ']{0,}>|<\/tr>/g, "")),
            iSortOrder == 1 ? $("#tableTrips tr#" + o).before(e.ToDriverTableRow(u, iPagePermissions, f)) : $("#tableTrips tr#" + o).after(e.ToDriverTableRow(u, iPagePermissions, f)),
            g_atTrips.splitTrip(e, s),
            u !== null ? $("#v1 img[data-target=car][src$='car_on.png']").length > 0 ? $(".car-column").css("display", "table-cell") : $(".car-column").hide() : $(".car-column").hide(),
            UserMappingSettings.Drivers != null ? $("#v1 img[data-target=driver][src$='driver_on.png']").length > 0 ? $(".driver-column").css("display", "table-cell") : $(".driver-column").hide() : $(".driver-column").hide(),
            c()
        }
        else
            n.Line.setOptions({
                map: t, strokeColor: Colors.Red.hash()
            });
        return !1
    }
    function kt(i)
    {
        var s,
            r,
            f,
            e,
            o,
            h,
            u;
        if (addToCrumbtrail("TripPopup.MergePopupCallback(mergeSuccess)"), i == undefined)
        {
            n.Line.setMap(t);
            return
        }
        if (i.length == 3)
        {
            for (s = n.Id, r = new Trip(i[1]), r.Points = null, f = i[2], e = ViewingDriverProfile() ? m_DriverProfile.DriverPermissions.checkPermission(16) && m_DriverProfile.Vehicles.length > 1 : !ArrayNullOrEmpty(UserMappingSettings.Vehicles), e = e === !0 ? GetVehicle(r.VehicleId).sRegistration : null, o = UserMappingSettings.Drivers != null, o = o ? GetDriver(r.DriverId).sDriverName : null, r.StartZoneId != null && r.StartLoc == null && (r.StartLoc = g_Zones.GetName(r.StartZoneId)), r.EndZoneId != null && r.EndLoc == null && (r.EndLoc = g_Zones.GetName(r.EndZoneId)), $("#tableTrips tr#" + s).html(r.ToDriverTableRow(e, iPagePermissions, o).replace(/<tr[id=0-9 ']{0,}>|<\/tr>/g, "")), g_atTrips.replace(r, s), h = f.length, u = 0; u < h; u++)
                f[u] != r.Id && ($("#tableTrips tr#" + f[u]).remove(), g_atTrips.remove(f[u]));
            e !== null ? $("#v1 img[data-target=car][src$='car_on.png']").length > 0 ? $(".car-column").css("display", "table-cell") : $(".car-column").hide() : $(".car-column").hide(),
            UserMappingSettings.Drivers != null ? $("#v1 img[data-target=driver][src$='driver_on.png']").length > 0 ? $(".driver-column").css("display", "table-cell") : $(".driver-column").hide() : $(".driver-column").hide(),
            c()
        }
        else
            n.Line.setOptions({
                map: t, strokeColor: Colors.Red.hash()
            });
        return !1
    }
    function c()
    {
        addToCrumbtrail("TripPopup.ClearDivContent()"),
        b = n.Id,
        e(null),
        p(n),
        n = null,
        $("#tdTripDate").text(""),
        $("#tdDistanceTravelled").text(""),
        $("#tdMaxSpeed").text(""),
        $("#tdAvgSpeed").text(""),
        $("#txtStartLoc").removeClass("red").text(""),
        $("#txtEndLoc").removeClass("red").text(""),
        $("#txtTripComment").val(""),
        o != null && o != undefined && google.maps.event.removeListener(o),
        $("#chkShowTripData")[0].checked === !0 && l(),
        $("#divTripPopup").toggleClass("hide"),
        $(".popupBackground").hide(),
        g_fPopupOpen = !1,
        $("#divTripMapCover").css("display", "block"),
        $("#spTripCategory").empty(),
        $("#divTripCategory div.cat").addClass("catEmpty").css("background-color", "transparent");
        try
        {
            SplitTrip.Clear()
        }
        catch(t) {}
        ot()
    }
    function l()
    {
        addToCrumbtrail("TripPopup.ResetHeadsUp()"),
        y.setMap(null),
        $("#divTripData").css("display", "none"),
        $("#chkShowTripData")[0].checked = !1,
        $("#divShowTripData").show(),
        $("#tdTime").text(""),
        $("#tdSpeed").text(""),
        $("#tdAltitude").text(""),
        $("#tdHeading").text(""),
        google.maps.event.removeListener(o)
    }
    function e(n)
    {
        addToCrumbtrail("TripPopup.SetZonesMap(map)"),
        u != undefined && u.Geometry != undefined && (u.Geometry.setMap(n), $("#txtStartLoc").html(u.Name).removeClass("red")),
        f != undefined && f.Geometry != undefined && (f.Geometry.setMap(n), $("#txtEndLoc").html(f.Name).removeClass("red"))
    }
    function dt(n, i)
    {
        addToCrumbtrail("TripPopup.createMouseOverListener(line, tripId)");
        var r = n.getPath(),
            u = i;
        o = google.maps.event.addListener(n, "mouseover", function(n)
        {
            var f,
                i,
                e;
            (addToCrumbtrail("TripPopup.mouseoverlistener event"), $("#chkShowTripData")[0].checked !== !1) && (f = n.latLng, i = lt(f, r), i != undefined && (e = '{"tripId": ' + u + ', "pointIndex":' + i + "}", DoAjax({
                    url: "/MappingWebService.asmx/GetPointData", data: e, successCallback: function(n)
                        {
                            if ($("#tdTime").text(n.d.TimeLocal), $("#tdSpeed").text(n.d.Speed), $("#tdAltitude").text(n.d.Altitude), $("#tdHeading").text(n.d.Heading), n.d.Latitude == null || n.d.Longitude == null)
                                y.setOptions({map: null});
                            else
                            {
                                var i = new google.maps.LatLng(n.d.Latitude, n.d.Longitude);
                                y.setOptions({
                                    map: t, position: i
                                })
                            }
                        }, errorCallback: function(n, t)
                        {
                            alert(t),
                            l()
                        }
                })))
        })
    }
    function ut(n, t, i)
    {
        s.checkPermission(768) && (addToCrumbtrail("TripPopup.createMarkerClickListener(marker, point, tripId)"), n = n.marker == undefined ? n : n.marker, google.maps.event.addListener(n, "click", function()
            {
                addToCrumbtrail("TripPopup. marker click event");
                var n = g_atTrips.get(i);
                ZonePopup.Load(n, t, rt)
            }))
    }
    function gt(n)
    {
        addToCrumbtrail("TripPopup.createMapLoadedlistener(map)"),
        google.maps.event.addListenerOnce(n, "tilesloaded", function()
        {
            addToCrumbtrail("TripPopup. map tiles loaded event"),
            $("#divTripMapCover").css("display", "none"),
            google.maps.event.addListener(n, "idle", function()
            {
                addToCrumbtrail("TripPopup. map idle event"),
                $("#divTripMapCover").css("display", "none")
            })
        })
    }
    function ft(n)
    {
        if (addToCrumbtrail("TripPopup.DrawOnMap(_trip)"), n.Points == undefined && n.GetPoints() == !1)
            return c(), !1;
        ti(n),
        u = g_Zones.GetZone(n.StartZoneId, !0),
        f = g_Zones.GetZone(n.EndZoneId, !0),
        e(t),
        et(n),
        ii(n),
        t.fitBounds(n.Bounds),
        n.MapZoom = t.getZoom(),
        n.MapCenter = t.getCenter()
    }
    function ni(i, r)
    {
        var u,
            f;
        addToCrumbtrail("TripPopup.InitializeTripMap(mapDiv, center)");
        try
        {
            u = r != null ? r : new google.maps.LatLng(n.Points[0][1], n.Points[0][0])
        }
        catch(e)
        {
            u = new google.maps.LatLng(0, 0)
        }
        f = {
            center: u, mapTypeId: google.maps.MapTypeId.ROADMAP
        },
        t = new google.maps.Map(document.getElementById(i), f),
        t != null && t.setZoom(20),
        w != null & w != undefined && google.maps.event.removeListener(w),
        gt(t)
    }
    function p(n)
    {
        var i,
            r,
            u,
            f;
        if (addToCrumbtrail("TripPopup.ClearTripOffMap(trip)"), n.Line != null && n.Line.setMap(null), n.TripAdjustment != undefined)
            for (i = n.TripAdjustment.length, r = 0; r < i; r++)
                n.TripAdjustment[r].setMap(null);
        if (n.TripAdjustment = [], n.Markers != undefined)
            for (i = n.Markers.length, u = 0; u < i; u++)
                n.Markers[u].setMap(null);
        n.Markers = [],
        t != null && (f = t.getStreetView(), f != undefined && f.getVisible() == !0 && f.setVisible(!1))
    }
    function ti(n)
    {
        var i,
            r;
        if (addToCrumbtrail("TripPopup.DrawTripLine(trip)"), n.Line != null)
        {
            n.Line.setOptions({
                map: t, strokeColor: Colors.Red.hash()
            });
            return
        }
        iColour = 0;
        var u = [],
            e = n.Points.length,
            f = n.Points;
        for (i = 0; i < e; i++)
            u[i] = new google.maps.LatLng(f[i][1], f[i][0]);
        lineOptions = {
            clickable: !0, geodesic: !1, path: u, strokeColor: Colors.Black.hash(), strokeOpacity: 1, strokeWeight: 2, zIndex: n.Id
        },
        r = new google.maps.Polyline(lineOptions),
        n.Line = r,
        n.Bounds = GoogleMapExtensions.GetLineBounds(u),
        r.setOptions(vt),
        r.setOptions({map: t})
    }
    function et(n)
    {
        var i,
            r;
        addToCrumbtrail("TripPopup.Map_AddMarkers(trip)"),
        i = n.StartLoc,
        n.StartZoneId == null ? i == null && (i = "Unknown") : n.StartLoc.Name != undefined && (i = n.StartLoc.Name),
        r = n.EndLoc,
        n.EndZoneId == null ? r == null && (r = "Unknown") : n.EndLoc.Name != undefined && (r = n.EndLoc.Name),
        n.Markers[0] = SetupLabelMarker({
            map: t, position: n.Points[0], hexColor: Colors.Green, markerLetter: "A", cursorString: i
        }),
        ut(n.Markers[0], 0, n.Id),
        n.Markers[1] = SetupLabelMarker({
            map: t, position: n.Points[n.Points.length - 1], hexColor: Colors.Red, markerLetter: "B", cursorString: r
        }),
        ut(n.Markers[1], 1, n.Id)
    }
    function ii(n)
    {
        var r,
            e,
            i,
            o;
        for (addToCrumbtrail("TripPopup.AddTripAdjustments(trip)"), r = n.TripAdjustment.length, e = 0; e < r; e++)
            n.TripAdjustment[e].setMap(null);
        n.TripAdjustment = [],
        r = 0,
        i = [],
        (n.StartZoneSnapped || n.StartZoneSelected) && n.StartZoneId != null && (i[0] = GoogleMapExtensions.GetZoneCenter(u), i[1] = new google.maps.LatLng(n.Points[0][1], n.Points[0][0]), lineOptions = {
                clickable: !0, geodesic: !1, map: t, path: i, strokeColor: Colors.LightBlue.hash(), strokeOpacity: 1, strokeWeight: 2, zIndex: n.Id
            }, n.TripAdjustment[r++] = new google.maps.Polyline(lineOptions), n.Markers[0].setOptions({position: i[0]})),
        (n.EndZoneSnapped || n.EndZoneSelected) && n.EndZoneId != null && (i[0] = GoogleMapExtensions.GetZoneCenter(f), o = n.Points.length - 1, i[1] = new google.maps.LatLng(n.Points[o][1], n.Points[o][0]), lineOptions = {
                clickable: !0, geodesic: !1, map: t, path: i, strokeColor: Colors.LightBlue.hash(), strokeOpacity: 1, strokeWeight: 2, zIndex: n.Id
            }, n.TripAdjustment[r] = new google.maps.Polyline(lineOptions), n.Markers[1].setOptions({position: i[0]}))
    }
    function ri(t)
    {
        return t.id == "" ? !1 : t.id == n.VehicleId ? !0 : (n.VehicleId = t.id, $("#aChangeVehicle span").text(GetVehicle(t.id).sRegistration), !0)
    }
    function ui(t)
    {
        return t.id == "" ? !1 : t.id == n.DriverId ? !0 : (n.DriverId = t.id, $("#aChangeDriver span").text(GetDriver(t.id).sDriverName), !0)
    }
    function ot(u)
    {
        arguments.length == 0 ? ($("#txtTripComment").unbind(), $("#tpaDesignation").unbind(), $("#spTripCategory").unbind(), $("#divTripCategory").unbind(), $("#aChangeVehicle").unbind(), $("#aChangeDriver").unbind(), $("#aMergeTrip").unbind(), $("#aSplitTrip").unbind(), $("#aDeleteTrip").unbind(), $("#txtStartLoc").unbind(), $("#txtEndLoc").unbind(), $("table#tblTripDetails .permission-disabled").removeClass("permission-disabled")) : (u.checkPermission(2) ? $("#txtTripComment").prop("readonly", !1).focusin(function()
        {
            addToCrumbtrail("TripPopup. $('#txtTripComment').focusin"),
            $(this).text() === "Type comment here..." && $(this).text("")
        }).focusout(function()
        {
            addToCrumbtrail("TripPopup. $('#txtTripComment').focusout"),
            $(this).text() === "" && (fForceBusinessComment !== !0 && i % 2 == 0 || i % 2 > 0 ? ($(this).text("Type comment here..."), n.Comment = null, fForceBusinessComment == !1 && i % 2 == 0 && alert(sBusinessCommentWarning)) : (alert(sBusinessCommentWarning + "\r\nDesignation will be changed to private."), g(null)))
        }) : $("#txtTripComment").prop("readonly", !0).addClass("permission-disabled"), u.checkPermission(4) ? $("#tpaDesignation").click(g) : a($("#tpaDesignation")), u.checkPermission(8) ? ($("#spTripCategory").click(function(t)
            {
                t.preventDefault(),
                t.stopPropagation(),
                CheckCategorization(n.VehicleId) === !0 && pCategoryPopup.show($("#divTripCategory")[0], {
                    selected: (r == null ? 0 : r).toString(2), callback: ht, callbackOnClose: !0
                }, t)
            }), $("#divTripCategory").click(function(t)
            {
                $(t.target.parentNode).data("id") == undefined && (t.preventDefault(), t.stopPropagation(), CheckCategorization(n.VehicleId) === !0 && pCategoryPopup.show(this, {
                        selected: (r == null ? 0 : r).toString(2), callback: ht, callbackOnClose: !0
                    }, t))
            })) : $("#trTripCategory").addClass("permission-disabled"), u.checkPermission(16) ? $("#aChangeVehicle").click(function(t)
            {
                t.preventDefault(),
                t.stopPropagation(),
                (ViewingDriverProfile() || !ArrayNullOrEmpty(UserMappingSettings.Vehicles)) && pVehiclePopup.show(this, {
                    callback: ri, selected: n.VehicleId
                }, t)
            }) : a($("#aChangeVehicle")), u.checkPermission(32) ? ($("#aMergeTrip").click(function(t)
            {
                return t.preventDefault(), nt(!1), addToCrumbtrail("TripPopup.$('#aMergeTrip').click"), CenterPopups(), MergeTripPopup.LoadDiv(n, kt), !1
            }), $("#aMergeTrip").show()) : $("#aMergeTrip").hide(), u.checkPermission(64) ? ($("#aSplitTrip").click(function(i)
            {
                i.preventDefault(),
                nt(!1);
                try
                {
                    SplitTrip.Load(n, t, bt)
                }
                catch(r)
                {
                    alert(r)
                }
            }), $("#aSplitTrip").show()) : $("#aSplitTrip").hide(), u.checkPermission(128) ? ($("#aDeleteTrip").show(), $("#aDeleteTrip").click(function(t)
            {
                t.preventDefault(),
                addToCrumbtrail("TripPopup.btnDelete_Click(btn)"),
                confirmUI("Are you sure you want to delete this trip?", !0, function(t)
                {
                    if (t == !0)
                    {
                        var i = n.JSONId("tripId");
                        ViewingDriverProfile() == !1 ? DoAjax({
                            url: "/MappingWebService.asmx/DeleteLineById", data: i, successCallback: st
                        }) : m_DriverProfile.DeleteTrip(n.Id, st, null)
                    }
                    return !0
                })
            })) : $("#aDeleteTrip").hide(), u.checkPermission(768) ? ($("#txtStartLoc").click(function(n)
            {
                n.preventDefault(),
                n.stopPropagation();
                var t = parseInt($(this).attr("href"));
                ct(t)
            }), $("#txtEndLoc").click(function(n)
            {
                n.preventDefault(),
                n.stopPropagation();
                var t = parseInt($(this).attr("href"));
                ct(t)
            })) : (a($("#txtStartLoc")), a($("#txtEndLoc"))), u.checkPermission(224) ? $("#trMoreOptions").show() : $("#trMoreOptions").hide(), ViewingDriverProfile() == !1 && UserMappingSettings.Drivers != null ? ($("#trDriver").show(), $("#aChangeDriver").click(function(t)
            {
                t.preventDefault(),
                t.stopPropagation(),
                ViewingDriverProfile() == !1 && UserMappingSettings.Drivers != null && pDriverPopup.show(this, {
                    callback: ui, selected: n.DriverId
                }, t)
            })) : (a($("#aChangeDriver")), $("#trDriver").hide()))
    }
    function st(t)
    {
        if (t.d == -1)
        {
            alert("There was an error in the webservice and the trip was not deleted.");
            return
        }
        if (g_atTrips.get(n.Id) != null)
        {
            var i = n;
            g_atTrips.remove(n.Id),
            $("#" + i.Id).remove(),
            g_atTrips.length > 0 ? $("#btnNextTrip").click() : c()
        }
    }
    function a(n)
    {
        n.click(function(n)
        {
            n.preventDefault()
        }),
        n.addClass("permission-disabled")
    }
    function g(n)
    {
        n != null && n.preventDefault(),
        addToCrumbtrail("TripPopup.toggleDesignation()");
        var t = $("#imgDesignation")[0];
        i == 1 || i == 3 ? fForceBusinessComment === !0 && ($("#txtTripComment").text().length == 0 || $("#txtTripComment").text().match(/Type comment here.../) != null) ? alert(sBusinessCommentWarning) : (i = 4, t.src = URL.BUSINESS, $("#txtDesignation")[0].innerHTML = "Business") : (i == 2 || i == 4) && (i = 3, t.src = URL.PRIVATE, $("#txtDesignation")[0].innerHTML = "Private")
    }
    function nt(n)
    {
        n === !0 ? ($(".moreOptions").show(), $("#aTripMore").text("Cancel")) : ($("#aTripMore").text("More..."), $(".moreOptions").hide())
    }
    function ht(n)
    {
        var t = n == null ? undefined : $(n).data("id"),
            i;
        return t == -99 ? (setTimeout(function()
            {
                EditCategories()
            }, 100), !1) : t != undefined && t != 0 ? ($(n).children("div").toggleClass("checked"), !1) : (t == undefined && (t = 0, $("table.categoryPopupTable tr").each(function(n, i)
            {
                var r = $(i);
                r.children("td").children("div").hasClass("checked") === !0 && (t += parseInt(r.children("td").data("id")))
            })), r = t, i = $("#divTripCategory div.cat"), t == 0 ? (i.addClass("catEmpty").css("background-color", "white").attr("data-c", t), i.children("div[class^=cat]").remove(), $("#spTripCategory").empty().text("None")) : (i.removeClass("catEmpty"), i.children("div[class^=cat]").remove(), i.append(GetCategoryDiv(t, !1)), $("#spTripCategory").empty().text(GetCategoryText(t))), !0)
    }
    function ct(t)
    {
        addToCrumbtrail("showZonePopup(" + t + ")"),
        e(null),
        ZonePopup.Load(n, t, rt, s)
    }
    function lt(n, t)
    {
        var e = t.length,
            o = n.lat(),
            s = n.lng(),
            h = undefined,
            i,
            r,
            u,
            f;
        for (t.getAt == undefined && (t.getAt = function(n)
        {
            return this[n]
        }), i = 0; i < e - 1; i++)
            if (r = t.getAt(i), u = t.getAt(i + 1), at(s, r.lng(), u.lng()) && at(o, r.lat(), u.lat()) && (f = fi(n, r, u)) > -1)
                return i + f;
        return h
    }
    function at(n, t, i)
    {
        return t == i ? n == t : t > i ? n < t && n > i : n > t && n < i
    }
    function fi(n, t, i)
    {
        var r,
            u;
        try
        {
            var o = google.maps.geometry.spherical.computeDistanceBetween(t, i),
                f = google.maps.geometry.spherical.computeDistanceBetween(t, n),
                e = google.maps.geometry.spherical.computeDistanceBetween(n, i)
        }
        catch(s)
        {
            return -1
        }
        return (r = parseInt(f + e), u = parseInt(o), u >= r - 2 && u <= r + 2) ? f < e ? 0 : 1 : -1
    }
    var t = null,
        o,
        w,
        n,
        u,
        f,
        b = null,
        s,
        vt = {strokeColor: Colors.Red.hash()},
        i,
        k,
        v,
        r,
        h,
        y;
    return $("#btnPreviousTrip").click(function(n)
        {
            if (n.preventDefault(), pCategoryPopup != undefined && pCategoryPopup.isOpen())
            {
                pCategoryPopup.onClose(function()
                {
                    $("#btnPreviousTrip").click()
                });
                return
            }
            addToCrumbtrail("TripPopup.btnPreviousTrip_Click(btn)"),
            d(-1)
        }), $("#btnNextTrip").click(function(n)
        {
            if (n.preventDefault(), pCategoryPopup != undefined && pCategoryPopup.isOpen())
            {
                pCategoryPopup.onClose(function()
                {
                    $("#btnNextTrip").click()
                });
                return
            }
            addToCrumbtrail("TripPopup.btnNextTrip_Click(btn)"),
            d(1)
        }), $("#chkShowTripData").change(function(t)
            {
                addToCrumbtrail("TripPopup.chkShowTripData_CheckChanged(checkbox)");
                var i = t.target;
                i.checked === !0 ? ($("#divTripData").css("display", "block"), dt(n.Line, n.Id), $("#divShowTripData").hide()) : l()
            }), $("#aTPCancel").click(function(t)
            {
                if (t.preventDefault(), t.stopPropagation(), pCategoryPopup != undefined && pCategoryPopup.isOpen())
                {
                    pCategoryPopup.onClose(function()
                    {
                        $("#aTPCancel").click()
                    });
                    return
                }
                addToCrumbtrail("TripPopup.divTPCancel()"),
                it(n) !== 1 && c()
            }), $("#aTripMore").click(function(n)
            {
                n.preventDefault(),
                nt($(this).text() == "More...")
            }), {
                LoadDiv: yt, toggleDesignation: g, ClearTripOffMap: p, ResetHeadsUp: l, FindPoint: lt
            }
}(),
LivePopup = function()
{
    function e(t)
    {
        i == undefined && (i = $("#dvGrdViewVehicles").bindTemplater()),
        r = t,
        WaitLoaded != undefined && (n == null ? WaitLoaded(o) : u())
    }
    function o()
    {
        f(),
        u()
    }
    function u()
    {
        TrackingObjectContainer.Clear(),
        f(),
        n.setZoom(11),
        (TrackingObjectContainer.Setup == !1 || TrackingObjectContainer.Setup == undefined) && TrackingObjectContainer.SetOptions({
            map: n, updateDisplayCallback: s, updateMapCallback: c
        }),
        TrackingObjectContainer.Load(r),
        t($(".popupBackground"))
    }
    function s(n)
    {
        var r,
            u;
        if (arguments[0] === !1)
        {
            TrackingObjectContainer.Stop(),
            t();
            return
        }
        r = n,
        r.properties != undefined && (r = r.properties),
        i.update(r),
        u = n.Prop ? n.Prop.ConnectionProblem : n.ConnectionProblem,
        $("img.connectionFailure").css("display", u == !0 ? "block" : "none"),
        $("#dvGrdViewVehicles").removeClass("hide")
    }
    function f()
    {
        var t = new google.maps.LatLng(42.81, 26.72),
            i;
        n == undefined ? (i = {
            center: t, mapTypeId: google.maps.MapTypeId.ROADMAP, zoom: 2
        }, n = new google.maps.Map($("#dvLiveMap")[0], i), h(n)) : n.setCenter(t)
    }
    function h(n)
    {
        addToCrumbtrail("LivePopup.createMapLoadedlistener(map)"),
        google.maps.event.addListenerOnce(n, "tilesloaded", function()
        {
            addToCrumbtrail("LivePopup. map tiles loaded event"),
            $("#divLiveMapCover").css("display", "none"),
            google.maps.event.addListener(n, "idle", function()
            {
                $("#divLivePopup").hasClass("hide") == !1 && (addToCrumbtrail("LivePopup. map idle event"), $("#divLiveMapCover").css("display", "none"))
            })
        })
    }
    function c(i, r)
    {
        var u,
            f;
        if (arguments[0] === !1)
        {
            TrackingObjectContainer.Stop(),
            t();
            return
        }
        u = n.getZoom(),
        r.lat() == 0 && r.lng() == 0 && (u = 2),
        i != undefined && (r = i.getCenter(), f = $("#dvLiveMap"), u = GoogleMapExtensions.GetZoomLevel(i, {
                height: f.height(), width: f.width()
            })),
        n.setOptions({
            center: r, zoom: u
        })
    }
    function t(t)
    {
        $("#divLivePopup").toggleClass("hide"),
        t ? ($(".popupBackground").show(), google.maps.event.trigger(n, "resize")) : ($(".popupBackground").hide(), $("#divLiveMapCover").css("display", "block"))
    }
    var n,
        r,
        i;
    return $("#dvLivePopupCancel").click(function()
        {
            return TrackingObjectContainer.Stop(), t(), !1
        }), $("#btnForceRefresh").click(function(n)
        {
            n.preventDefault(),
            TrackingObjectContainer.Refresh()
        }), {Show: e}
}();
var g_atTrips,
    g_Zones,
    iTripsPerView,
    iCurrentMaxRecord,
    iSortOrder,
    iPageNumber,
    iFilterId,
    bPoint,
    fZonePopupLinkClicked,
    fEditing,
    m_iVehicleId,
    asMonthArray,
    g_tripCommentLength = 300,
    g_fPopupOpen,
    g_fGoogleApiLoaded,
    g_fGoogleApiLoading,
    g_aVehicles,
    pVehiclePopup,
    pCategoryPopup,
    pTripMoreOptions,
    asVehicleOptions,
    iMaxSnappingDistance = 1e3,
    iMaxZoneRadius = 500,
    g_aCrumbTrail = [],
    UserMappingSettings,
    GetTripAjax,
    g_lastTripId,
    fForceBusinessComment,
    sBusinessCommentWarning,
    ScriptLoadComplete = !1,
    iPagePermissions = 2047,
    m_DriverProfile;
Trips = function()
{
    this.SelectedTrip = null
},
Trips.prototype = [],
Trips.prototype.constructor = Trips,
Trips.prototype.get = function(n)
{
    var t = null;
    return $.each(this, function(i, r)
        {
            if (parseInt(n) == r.Id)
                return t = r, t.index = i, !1
        }), t
},
Trips.prototype.remove = function(n)
{
    var t = this.get(n);
    t != null && this.splice(t.index, 1)
},
Trips.prototype.replace = function(n)
{
    var t = this.get(arguments.length == 2 ? arguments[1] : n.Id);
    t != null && (this[t.index] = n, this.SelectedTrip.Id == n.Id && (this.SelectedTrip = n))
},
Trips.prototype.setSelected = function(n)
{
    this.SelectedTrip == null ? this.SelectedTrip = this.get(n) : this.SelectedTrip.Id != n && (this.SelectedTrip = this.get(n))
},
Trips.prototype.splitTrip = function(n, t)
{
    var i = this.get(t.Id).index;
    this[i] = t,
    this.SelectedTrip.Id == t.Id && (this.SelectedTrip = t),
    this.splice(i + 1, 0, n)
},
$(document).ready(function()
{
    addToCrumbtrail("document.ready"),
    $(".popupBackground").hide(),
    iTripsPerView = 10,
    iCurrentMaxRecord = 0,
    iSortOrder = 1,
    iPageNumber = 1,
    iFilterId = 0,
    fZonePopupLinkClicked = !1,
    fEditing = !1,
    fForceBusinessComment = !0,
    g_atTrips = new Trips,
    g_fPopupOpen = !1,
    g_fGoogleApiLoaded = !1,
    g_fGoogleApiLoading = !1,
    g_lastTripId = 0,
    g_Zones == undefined && (g_Zones = new Zones),
    $("ul.tripSortTabs li[id!=d4]").click(function(n)
    {
        if (this.id.indexOf("v") != 0)
            $("ul.tripSortTabs li").removeClass("active"),
            $(this).addClass("active"),
            this.id != "d4" ? ($("#ddlMonthSelector").css("color", "#999"), $("#d4").css("color", "#999"), NewTable()) : ($("#ddlMonthSelector").css("color", "#000"), $("#d4").css("color", "#000"));
        else if (this.id == "v1")
        {
            var t = $(n.target),
                i = t.data("target");
            i != "car" || ArrayNullOrEmpty(UserMappingSettings.Vehicles) ? i == "driver" && UserMappingSettings.Drivers != null && ($(".driver-column:visible").length == 0 ? ($(".driver-column").show(), t.attr({
                title: "Hide driver column", src: "../Images/driver_on.png"
            })) : ($(".driver-column").hide(), t.attr({
                title: "Show driver column", src: "../Images/driver_off.png"
            }))) : $(".car-column:visible").length == 0 ? ($(".car-column").show(), t.attr({
                title: "Hide vehicle column", src: "../Images/car_on.png"
            })) : ($(".car-column").hide(), t.attr({
                title: "Show vehicle column", src: "../Images/car_off.png"
            }))
        }
        return !1
    }),
    $("ul.tripSortTabs li[id=d0]").addClass("active");
    var n = PopulateMonthSelector(new Date);
    asMonthArray = n.MonthArray,
    $("#ddlMonthSelector").append(n.OptionArray.join(" ")),
    CheckExpiryWarnings(),
    $(window).resize(CenterPopups),
    CenterPopups(),
    GetUserMappingSettings(),
    $("#slider").slider({
        min: Format.SliderMin(), max: Format.SliderMax(), step: 10, slide: ZonePopup.slider_slide
    }),
    $("#sliderMax").text(Format.SliderMaxDisplay()),
    $("#sliderMin").text(Format.SliderMinDisplay()),
    ViewingDriverProfile = function()
    {
        return $("select#ddlVehicle option:selected").data("driver_permission") != undefined
    },
    g_fPreloadMaps && LoadGoogleApi()
}),
$("div#divCatEdit a").live("click", function(n)
{
    var i,
        r,
        t;
    if (n.preventDefault(), i = $(this).attr("href"), i == "cancel")
    {
        $.unblockUI(),
        pCategoryPopup.focus != undefined && pCategoryPopup.focus();
        return
    }
    (ViewingDriverProfile() !== !1 || UserMappingSettings.AllowTripCategorization !== !1) && i == "done" && (r = $("div.category"), t = [], $.each(r, function(n, i)
        {
            var u = parseInt(i.id.replace(/[^\d-]/g, "")),
                r = $("#" + i.id + " input").val().replace(/^[ ]{0,}/, "").replace(/[ ]{0,}$/, "");
            r.length == 0 && (r = null);
            var f = $("#" + i.id + " div.category-color").css("background-color"),
                e = {
                    iCategoryId: u, sCategory: r, sColourHex: f
                },
                o = GetCategoryText(u);
            o != r && t.push(e)
        }), t.length > 0 ? ViewingDriverProfile() == !1 ? DoAjax({
            url: "/MappingWebService.asmx/EditCategories", data: JSON.stringify({cats: t}), successCallback: function(n)
                {
                    n.d[0] == !0 ? (n.d[1].unshift({
                        iCategoryId: 0, sCategory: "None", sColourHex: "transparent"
                    }), n.d[1].push({
                        iCategoryId: -99, sCategory: "Edit", sColourHex: "transparent"
                    }), pCategoryPopup.close(), $.unblockUI(), pCategoryPopup.setDatasource(n.d[1]), UserMappingSettings.Categories = n.d[1]) : alert(n.d[1])
                }, errorCallback: function(n, t)
                {
                    alert(t)
                }, doAsync: !1
        }) : m_DriverProfile.EditCategories(t, function(n)
        {
            n.d[0] == !0 ? (pCategoryPopup.close(), $.unblockUI(), pCategoryPopup.setDatasource(m_DriverProfile.Categories)) : alert(n.d[1])
        }, function(n, t)
        {
            alert(t)
        }) : $.unblockUI())
}),
$("select#ddlVehicle").change(function()
{
    return $("select#ddlVehicle option:selected").data("driver_permission") == undefined ? ChangeVehicle() : ChangeDriver(), !1
}),
$("select#ddlMonthSelector").change(function()
{
    $("ul.tripSortTabs li").removeClass("active"),
    $("#ddlMonthSelector").css("color", "#000"),
    $("#d4").addClass("active").css("color", "#000"),
    NewTable()
}),
tableCellEnum = function()
{
    var n = $("#thCategory").length > 0 ? 1 : 0;
    return {
            StartZone: 1 + n, EndZone: 2 + n, ViewTrip: 8 + n, ChangeVehicle: 9 + n, ChangeDriver: 10 + n, Designation: 5 + n, Comment: 6 + n, EditCommentImg: 7 + n
        }
}(),
$("#tableTrips").mousedown(function(n)
{
    var t,
        r,
        f,
        i,
        e,
        o,
        u;
    if (n.target.nodeName != "INPUT")
    {
        if (ArrayNullOrEmpty(UserMappingSettings.Vehicles) && ArrayNullOrEmpty(UserMappingSettings.Managers))
            return;
        if (pVehiclePopup != undefined && pVehiclePopup.isOpen() && pVehiclePopup.close(), addToCrumbtrail("$('#tableTrips').mousedown"), n.which == 1)
        {
            for (t = n.target, r = t.parentNode; r.nodeName != "TR"; )
                r.nodeName == "TD" && (f = r.cellIndex),
                r = r.parentNode;
            if (i = r.id, t.parentNode.nodeName == "TH")
                ChangeDateSortOrder(t);
            else
            {
                if (t.nodeName == "SPAN" && $(t).data("a"))
                {
                    e = $(t).data("a");
                    switch (e)
                    {
                        case"sz":
                            OpenZonePopup(i, 0);
                            break;
                        case"ez":
                            OpenZonePopup(i, 1);
                            break;
                        case"vt":
                            OpenTripPopup(i);
                            break;
                        case"cv":
                            if (g_atTrips.setSelected(i), m_pSelectedVehicleId = g_atTrips.SelectedTrip.VehicleId, ViewingDriverProfile() || !ArrayNullOrEmpty(UserMappingSettings.Vehicles))
                            {
                                while (t.nodeName != "TD")
                                    t = t.parentNode;
                                pVehiclePopup.show(t, {
                                    callback: vehicleSelectionChangedCallback, selected: m_pSelectedVehicleId
                                }, n)
                            }
                            break;
                        case"cd":
                            if (g_atTrips.setSelected(i), m_pSelectedDriverId = g_atTrips.SelectedTrip.DriverId, UserMappingSettings.Drivers != null)
                            {
                                while (t.nodeName != "TD")
                                    t = t.parentNode;
                                pDriverPopup.show(t, {
                                    callback: driverSelectionChangedCallback, selected: m_pSelectedDriverId
                                }, n)
                            }
                    }
                    return !1
                }
                if (t.nodeName === "IMG" && t.className != "blocked")
                    switch (f)
                    {
                        case tableCellEnum.Designation:
                            toggleDesignation(t, i);
                            break;
                        case tableCellEnum.EditCommentImg:
                            editComment(t, i)
                    }
                else if (t.nodeName == "TD" && t.cellIndex == tableCellEnum.Comment || t.nodeName == "SPAN" && t.className == "edit")
                    editComment(t, i);
                else if (t.nodeName == "DIV" && f == 0 && t.className.indexOf("blocked") == -1 && (o = g_atTrips.get(i).VehicleId, CheckCategorization(o) === !0))
                {
                    for (u = $(t).data("c"); u == undefined; )
                        t = t.parentNode,
                        u = $(t).data("c");
                    g_atTrips.setSelected(r.id),
                    pCategoryPopup.show(t.parentNode, {
                        selected: u.toString(2), callback: categorySelectionChanged, callbackOnClose: !0
                    }, n)
                }
            }
        }
    }
}),
$("#spViewLive a").click(function(n)
{
    var r,
        t,
        i;
    n.preventDefault(),
    g_fPreloadMaps === !1 && g_fGoogleApiLoaded === !1 && (document.body.style.cursor = "wait", LoadGoogleApi()),
    r = $("#ddlVehicle").val(),
    t = GetVehicle(r),
    t != null && (i = t.iDeviceId, i && LivePopup.Show([parseInt(i)]))
}),
$(".inputTextArea, #txtTripComment").keypress(function(n)
{
    if (n.which == 0 || n.which == 8 || n.which == 32)
        return !0;
    var t = this.id == "txtTripComment" ? 255 : 300;
    return this.value.length < t
})