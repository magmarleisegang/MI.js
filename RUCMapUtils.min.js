function Zone(n, t, i, r, u, f, e, o, s, h)
{
    arguments.length == 1 || arguments.length == 2 ? ($.extend(this, n), arguments.length == 2 && (this.Geometry = t)) : (this.Id = n, this.Name = t, this.ZoneType = i, this.Designation = r, this.Points = u, this.PointRadiusMeters = f, this.Comment = o, this.IsTrackingZone = s, this.Geometry = e, this.CategoryId = h)
}
function DoubleArrayToJSONString(n)
{
    var r,
        i,
        t,
        u;
    if (n == null || n == undefined || (r = n.length, r == 0))
        return null;
    for (i = "[" + n[0][0] + "," + n[0][1] + "]", t = 1; t < r; t++)
        u = "[" + n[t][0] + "," + n[t][1] + "]",
        i = i + "," + u;
    return "[" + i + "]"
}
function IntArrayToJSONString(n, t)
{
    var i = t.length;
    return i == 0 ? null : n == null ? "[" + t.join(",") + "]" : '{"' + n + '":[' + t.join(",") + "]}"
}
function StringArrayToJSONString(n, t)
{
    var u = t.length,
        i,
        r,
        f;
    if (u == 0)
        return null;
    for (i = '"' + t[0] + '"', r = 1; r < u; r++)
        f = ',"' + t[r] + '"',
        i = i + f;
    return '{"' + n + '":[' + i + "]}"
}
function GetDesignationId(n, t)
{
    for (var r = n.length, i = 0; i < r; i++)
        if (n[i] == t)
            return i;
    return null
}
function Trip(n, t, i, r, u, f, e, o, s, h, c, l, a, v, y, p, w, b, k, d, g, nt, tt, it)
{
    arguments.length == 1 ? ($.extend(this, n), this.Line = null) : (this.Id = n, this.Points = t, this.TripStartDate = i, this.TripEndDate = r, this.Duration = u, this.Distance = f, this.StartLoc = e, this.EndLoc = o, this.StartZoneId = s, this.EndZoneId = h, this.Designation = c, this.CategoryId = it, this.MaxSpeed = l, this.AvgSpeed = a, this.Comment = v, this.WKT = y, this.Title = w, this.VehicleId = b, this.StartZoneSnapped = k, this.EndZoneSnapped = d, this.StartZoneSelected = g, this.EndZoneSelected = nt, this.MergedTrip = tt, this.Line = p)
}
function GetCategoryDiv(n, t, i)
{
    for (var o = (n == null ? 0 : n).toString(2), u = o.length - 1, f = [], e, r = 0; r <= u; r++)
        o[u - r] == 1 && f.push(Math.pow(2, r));
    for (f.length < 5 ? u = f.length : f.length == 5 ? u = 4 : f.length > 5 && (u = 6), e = [], r = 0; r < u; r++)
        e.push("<div class='cat-" + u + (i === !1 ? " blocked" : "") + "' style='background-color:" + GetCategory(f[r]).sColourHex + "'><\/div>");
    return t == undefined || t == !0 ? "<div data-c='" + n + "' class='cat'>" + e.join("") + "<\/div>" : e.join("")
}
function GetCategory(n)
{
    if (ViewingDriverProfile())
        return m_DriverProfile.GetCategory(n);
    var t = {
            sColourHex: "white", sCategory: "None", iCategoryid: 0
        };
    return $.each(UserMappingSettings.Categories, function(i, r)
        {
            if (r.iCategoryId == n)
                return t = r, !1
        }), t
}
function GetCategoryColor(n)
{
    var t = GetCategory(n);
    return t.sColourHex
}
function GetCategoryText(n)
{
    for (var f = n.toString(2), i = f.length - 1, r = [], u, t = 0; t <= i; t++)
        f[i - t] == 1 && r.push(Math.pow(2, t));
    for (i = r.length, u = [], t = 0; t < i; t++)
        u.push(GetCategory(r[t]).sCategory);
    return u.join(", ")
}
function GetZoneTd(n, t, i, r, u)
{
    var f = "",
        o = "Click to create zone",
        s = "",
        e = "";
    return n != null ? (o = "Click to view zone", i ? (f = "*", e = "Snapped Zone") : r && (f = "~", e = "Selected Zone")) : t != null ? (f = "(U)", e = "Unknown Zone") : (t = "Unknown", s = "unknown"), u != undefined ? "<td class='comment'><span data-a='" + u + "' class='link " + s + "' title='" + o + "'>" + (t == null ? "Unknown" : t) + "<\/span><span class='id' title='" + e + "'>&nbsp;" + f + "<\/span><\/td>" : "<td class='comment'>" + (t == null ? "Unknown" : t) + "<span class='id' title='" + e + "'>&nbsp;" + f + "<\/span><\/td>"
}
function AddTitleString(n, t, i, r)
{
    var u = ['<tr class="titleRow"><td colspan="' + t + '">' + n + "<\/td>"];
    return i === !0 && u.push('<td class="car-column"><\/td>'), r === !0 && u.push('<td class="driver-column"><\/td>'), u.push("<\/tr>"), u.join("")
}
function IdToJSONString(n)
{
    return "{'" + n + "':" + this.Id + "}"
}
function getVehicle(n)
{
    var t = null;
    return $.each(UserMappingSettings.Vehicles, function(i, r)
        {
            if (parseInt(n) == r.iVehicleId)
                return t = r, !1
        }), t
}
function URLParams(n)
{
    var u = n.split("?")[1],
        i,
        t,
        r;
    if (u == undefined)
    {
        this.IsEmpty = !0;
        return
    }
    for (i = u.split("&"), this.Count = i.length, t = 0; t < this.Count; t++)
        r = i[t].split("="),
        this[r[0]] = r[1];
    this.IsEmpty = !1
}
function Time(n)
{
    var o,
        i,
        t,
        r,
        u,
        f,
        e;
    if (this.Original = n, this.Hours = 0, this.Minutes = 0, this.Seconds = 0, n == undefined && (n = "0hr 0min 0sec", this.Original = n), typeof n == "string")
        for (o = n.replace("hr", "h:").replace("min", "m:").replace("sec", "s:"), i = o.split(":"), t = 0; t < i.length; t++)
            r = new Number(i[t].substring(0, i[t].length - 1)),
            u = i[t].charAt(i[t].length - 1),
            u == "h" ? this.Hours = r : u == "m" ? this.Minutes = r : u == "s" && (this.Seconds = r);
    else
        this.Seconds = Math.abs(n) / 1e3,
        this.Seconds >= 60 && (f = parseInt(this.Seconds / 60), this.Seconds -= f * 60, this.Minutes += f),
        this.Minutes >= 60 && (e = parseInt(this.Minutes / 60), this.Minutes -= e * 60, this.Hours += e)
}
function ArrayNullOrEmpty(n)
{
    return n == null || n == undefined ? !0 : n.length == undefined ? !0 : n.length == 0 ? !0 : !1
}
function RUCTrip(n, t, i, r, u, f, e, o, s, h, c, l, a, v, y, p, w, b, k, d, g, nt, tt, it, rt, ut, ft, et, ot)
{
    if (arguments.length == 1)
    {
        var st = n;
        this.Id = st.Id,
        this.Points = st.Points,
        this.Distance = st.Distance,
        this.Duration = st.Duration,
        this.TripStartDate = st.TripStartDate,
        this.TripEndDate = st.TripEndDate,
        this.StartLoc = st.StartLoc,
        this.EndLoc = st.EndLoc,
        this.StartZoneId = st.StartZoneId,
        this.EndZoneId = st.EndZoneId,
        this.Designation = st.Designation,
        this.CategoryId = st.CategoryId,
        this.MaxSpeed = st.MaxSpeed,
        this.AvgSpeed = st.AvgSpeed,
        this.Comment = st.Comment,
        this.WKT = st.LineWkt,
        this.Title = st.Title,
        this.VehicleId = st.VehicleId,
        this.StartZoneSnapped = st.StartZoneSnapped,
        this.EndZoneSnapped = st.EndZoneSnapped,
        this.StartZoneSelected = st.StartZoneSelected,
        this.EndZoneSelected = st.EndZoneSelected,
        this.MergedTrip = st.MergedTrip,
        this.OffroadDistanceMetres = st.OffroadDistanceMetres,
        this.OffroadDurationSeconds = st.OffroadDuration,
        this.Processed = st.Processed,
        this.Lines = null,
        this.Trailers = st.Trailers,
        this.TrailerRegistrations = st.TrailerRegistrations
    }
    else
        this.Id = n,
        this.Points = t,
        this.TripStartDate = i,
        this.TripEndDate = r,
        this.Duration = u,
        this.Distance = f,
        this.StartLoc = e,
        this.EndLoc = o,
        this.StartZoneId = s,
        this.EndZoneId = h,
        this.Designation = c,
        this.CategoryId = it,
        this.MaxSpeed = l,
        this.AvgSpeed = a,
        this.Comment = v,
        this.WKT = y,
        this.Title = w,
        this.VehicleId = b,
        this.StartZoneSnapped = k,
        this.EndZoneSnapped = d,
        this.StartZoneSelected = g,
        this.EndZoneSelected = nt,
        this.MergedTrip = tt,
        this.OffroadDistanceMetres = rt,
        this.OffroadDurationSeconds = ut,
        this.Processed = ot,
        this.Trailers = ft,
        this.TrailerRegistrations = trailer,
        this.Lines = p;
    this.GetZoneTd = function(n, t, i, r)
    {
        var u = "",
            e = "Click to create zone",
            o = "",
            f = "";
        return n != null ? (e = "Click to view zone", i ? (u = "*", f = "Snapped Zone") : r && (u = "~", f = "Selected Zone")) : t != null ? (u = "(U)", f = "Unknown Zone") : (t = "Unknown", o = "class='unknown'"), "<td class='comment'>" + t + "<span class='id' title='" + f + "'>&nbsp;" + u + "<\/span><\/td>"
    }
}
function AddTrailerKey()
{
    for (var i, r, t, n = 0; n < $("#ddlTrailerSelect")[0].options.length; n++)
    {
        for (i = "<span class='trailers'>", t = 0; t < $("#ddlTrailerSelect")[0].options.length; t++)
            t < $("#ddlTrailerSelect")[0].options.length - n && (r = t),
            i += "<span class='key" + r % 4 + " off'><\/span>";
        i += "<\/span>",
        $("#theBody").append('<tr class="trTrailerKey' + ($("#ddlTrailerSelect")[0].options.length - n - 1) % 4 + '"><td><\/td><td>' + i + '<\/td><td td colspan="9" style:"float:left;"><b>Trailer Reg: ' + $("#ddlTrailerSelect")[0].options[$("#ddlTrailerSelect")[0].options.length - n - 1].innerHTML + "<\/b><\/td><\/tr>")
    }
}
function AddRUCTitleString(n, t, i)
{
    return i !== !0 ? '<tr class="titleRow"><td><input type="checkbox" id="chkTitle' + ++RUCTrip.prototype.TitleRowNumber + '"/><\/td><td colspan="' + t + '">' + n + "<\/td><\/tr>" : '<tr class="titleRow"><td><input type="checkbox" id="chkTitle' + ++RUCTrip.prototype.TitleRowNumber + '"/><\/td><td colspan="' + t + '">' + n + '<\/td><td class="tdVisible"><\/td><\/tr>'
}
function temp(n)
{
    AttachedTrailersPopup = new popupInfo({
        containerId: "#dvTrailerPopup" + evt.target.id, content: null
    }),
    AttachedTrailersPopup.show(n)
}
function ToggleCheckBoxes(n)
{
    if (n.target.id == "chkAll")
        $("[type=checkbox]").prop("checked", $("#chkAll").prop("checked"));
    else if (n.target.id.indexOf("chkTitle") == 0)
    {
        var t = n.target.id.substr(8);
        $(".chkTrip" + t).prop("checked", $("#chkTitle" + t).prop("checked") == !1)
    }
}
function ShowAddRemoveTrailerPopup()
{
    $.blockUI({message: $("#divAddRemoveTrailerPopup")})
}
function AssignTrailer(n, t, i)
{
    $("#hdnAddRemoveTrailer").val() == "r" ? DoAjax({
        url: "/MappingWebService.asmx/UnassignTrailerFromTrips", data: JSON.stringify({
                trailerId: t, tripIds: n
            }), successCallback: function()
            {
                var u,
                    r;
                for ($.unblockUI(), u = 0; u < n.length; u++)
                    for ($("tr#" + n[u] + " span.spn" + t).removeClass("on"), $("tr#" + n[u] + " span.spn" + t).addClass("off"), r = 0; r < g_atTrips.length; r++)
                        g_atTrips[r].Id == n[u] && (g_atTrips[r].Trailers = jQuery.grep(g_atTrips[r].Trailers, function(n)
                        {
                            return n != parseInt(t)
                        }), g_atTrips[r].TrailerRegistrations = jQuery.grep(g_atTrips[r].TrailerRegistrations, function(n)
                        {
                            return n != i
                        }));
                $("li.liTrailer" + t).remove()
            }, errorCallback: function(n, t)
            {
                alert(t)
            }
    }) : $("#hdnAddRemoveTrailer").val() == "a" ? DoAjax({
        url: "/MappingWebService.asmx/AssignTrailerToTrips", data: JSON.stringify({
                trailerId: t, tripIds: n
            }), successCallback: function()
            {
                var r,
                    u;
                for ($.unblockUI(), r = 0; r < n.length; r++)
                    for ($("tr#" + n[r] + " span.spn" + t).addClass("on"), $("tr#" + n[r] + " span.spn" + t).removeClass("off"), u = 0; u < g_atTrips.length; u++)
                        g_atTrips[u].Id == n[r] && (g_atTrips[u].Trailers.push(parseInt(t)), g_atTrips[u].TrailerRegistrations.push(i));
                $("ul#ulTripTrailers").prepend("<li class='liTrailer" + t + "'>" + $("#ddlTripTrailers")[0].options[$("#ddlTripTrailers")[0].selectedIndex].innerHTML + "&nbsp<a data-id='" + t + "' style='color:red' href='javascript:;' class='aRemoveTripTrailer'>X<\/a><\/li>"),
                $("a.aRemoveTripTrailer").live("click", function(n, t)
                {
                    $("#hdnAddRemoveTrailer").val("r"),
                    RUCTripPopup.AssignTripTrailer(n, t)
                })
            }, errorCallback: function(n, t)
            {
                alert(t)
            }
    }) : alert("Error linking/unlinking Trailers. Please try again later.")
}
function GetUserMappingSettings(n)
{
    addToCrumbtrail("GetUserMappingSettings(" + n + ")"),
    deviceId = null;
    var t = new URLParams(document.URL);
    t.IsEmpty == !1 && t.id != undefined && (deviceId = t.id),
    DoAjax({
        url: "/MappingWebService.asmx/GetUserMappingSettings", data: '{"syncedDevice": ' + deviceId + "}", successCallback: function(n)
            {
                var t;
                UserMappingSettings = n.d,
                distanceUnit = UserMappingSettings.SiteDistanceUnit,
                UserMappingSettings.Vehicles == null ? ($("#trNoResultsFound").show(), $("#tfrLoading").hide(), $(".vehicleSelect").hide()) : (PopulateVehicleDropDown(UserMappingSettings.Vehicles, UserMappingSettings.LastUsedVehicle), UserMappingSettings.LastUsedVehicle != null ? (t = GetVehicle(UserMappingSettings.LastUsedVehicle), t != null && LiveDeviceSelected(t.iDeviceId != null && t.iDeviceProductId == 4, t.sStatus), GetTrips(UserMappingSettings.LastUsedVehicle, dtStart, dtEnd)) : (UserMappingSettings.Vehicles[0].iDeviceProductId == 4 && (t = UserMappingSettings.Vehicles[0], t != null && LiveDeviceSelected(t.iDeviceId != null && t.iDeviceProductId == 4, t.sStatus)), $("#trNoResultsFound").show(), $("#tfrLoading").hide()))
            }, errorCallback: function(n, t)
            {
                alert(t)
            }
    })
}
function PopulateVehicleDropDown(n, t)
{
    var u,
        r,
        i;
    for (m_iVehicleId = t, u = n.length, r = [], i = 0; i < u; i++)
        r[i] = n[i].iVehicleId == t ? '<option value="' + n[i].iVehicleId + '" selected="selected">' + n[i].sRegistration + "<\/option>" : '<option value="' + n[i].iVehicleId + '">' + n[i].sRegistration + "<\/option>";
    $("#ddlVehicle").append(r.join(" ")),
    n.length > 1 ? $(".vehicleSelect").show() : $(".vehicleSelect").hide()
}
function GetVehicle(n)
{
    var t = null;
    return $.each(UserMappingSettings.Vehicles, function(i, r)
        {
            if (r.iVehicleId == n)
                return t = r, !1
        }), t
}
function GetCategory(n)
{
    var t = {
            sColourHex: "white", sCategory: "None", iCategoryid: 0
        };
    return $.each(UserMappingSettings.Categories, function(i, r)
        {
            if (r.iCategoryId == n)
                return t = r, !1
        }), t
}
function GetCategoryColor(n)
{
    var t = GetCategory(n);
    return t.sColourHex
}
function GetCategoryText(n)
{
    var t = GetCategory(n);
    return t.sCategory
}
function GetTrips(n)
{
    addToCrumbtrail(" GetTrips(" + n + ")");
    var t = GetDateRange(),
        r = g_Zones.GetAllIds(),
        i = '{"vehicleId":' + n + ', "month":' + t.month + ', "year":' + t.year + ', "sortById":' + iSortOrder + ', "designationId":' + iFilterId + ', "index": ' + g_atTrips.length + ', "toLoad": ' + iTripsPerView * iPageNumber + ', "loadedZones":' + IntArrayToJSONString(null, r) + "}";
    GetTripAjax = $.ajax({
        type: "POST", url: "../MappingWebService.asmx/GetRUCTripsAndZones", contentType: "application/json; charset=utf-8", data: i, dataType: "json", success: function(n)
            {
                var e = n.d[0],
                    o = n.d[1],
                    r = n.d[2],
                    u = e.length,
                    f,
                    h,
                    c,
                    i,
                    t,
                    s;
                if (o != undefined && g_Zones.pushRange(o), r == undefined ? $("#pDeviceCapacity").hide() : r != null && ($("#pDeviceCapacity").css("display", "inline-block"), $("#percentage").text(r.toFixed(2))), u === 0 && iPageNumber == 1)
                {
                    $("#trNoResultsFound").show(),
                    $("#tfrLoading").hide();
                    return
                }
                if (u === 0 && iPageNumber != 1)
                {
                    $("#tfrLoading").hide();
                    return
                }
                for (f = g_atTrips.length, f == undefined && (f = 0), h = [], c = 0, i = 0; i < u; ++i)
                    t = e[i],
                    t.StartZoneId != null && (t.StartLoc = g_Zones.GetName(t.StartZoneId)),
                    t.EndZoneId != null && (t.EndLoc = g_Zones.GetName(t.EndZoneId)),
                    s = new RUCTrip(t),
                    g_atTrips.push(s);
                iTripsPerView === 0 ? LoadTripTable(g_atTrips) : g_atTrips != null && ExtendTripTable(),
                $("#ddlVehicle").val(m_iVehicleId),
                $(".tdVisible").hide()
            }, error: function(n)
            {
                if (n.statusText == "abort")
                    return !1;
                alert("Oops! The website is experiencing a problem. Please try again later."),
                LogError("Ajax Error: GetRUCTrips. Parameters: " + i + ". Error text: " + n.responseText, "ManagetRUCTrips.js", 114)
            }, complete: function()
            {
                GetTripAjax = null
            }
    })
}
function LoadTripTable(n)
{
    var s,
        i,
        t,
        h,
        e;
    addToCrumbtrail("LoadTripTable(g_atTrips)");
    var r = [],
        u = 0,
        f = UserMappingSettings.Vehicles.length > 1,
        o = $("#thCategory").length > 0 ? 10 : 9;
    for (n[0].VehicleId == m_iVehicleId && (r[u++] = AddRUCTitleString(n[0].Title, o, f)), s = n.length, i = 0; i < s; i++)
        (t = n[i], h = t.Id, t.VehicleId == m_iVehicleId) && (i > 0 && t.Title != n[i - 1].Title && (r[u++] = AddRUCTitleString(t.Title, o, f)), e = i % 2 == 0, r[u++] = f ? t.ToTableRow(e, GetVehicle(t.VehicleId).sRegistration, "White") : t.ToTableRow(e));
    $("#theBody").append(r.join(" ")),
    RemoveUnprocessedTrips(),
    $("#tfrLoading").hide()
}
function ExtendTripTable()
{
    var t,
        n,
        c,
        f,
        e;
    addToCrumbtrail("ExtendTripTable()");
    var i = [],
        r = 0,
        o = NewMax(),
        h = g_atTrips.length - iCurrentMaxRecord,
        u = UserMappingSettings.Vehicles.length > 1,
        s = $("#thCategory").length > 0 ? 10 : 9;
    for (iCurrentMaxRecord === 0 && g_atTrips[0].VehicleId == m_iVehicleId && (i[r++] = AddRUCTitleString(g_atTrips[0].Title, s, u)), t = iCurrentMaxRecord; t < o; ++t)
        (n = g_atTrips[t], c = n.Id, n.VehicleId == m_iVehicleId) && (t > 0 && n.Title != g_atTrips[t - 1].Title && (i[r++] = AddRUCTitleString(n.Title, s, u)), f = t % 2 == 0, e = n.CategoryId == null ? "white" : GetCategoryColor(n.CategoryId), i[r++] = u ? n.ToTableRow(f, GetVehicle(n.VehicleId).sRegistration, e) : n.ToTableRow(f, null, e));
    iCurrentMaxRecord === 0 ? $("#tableTrips").append("<tbody id='theBody'>" + i.join(" ") + " <\/tbody>") : $("#theBody").append(i.join(" ")),
    iCurrentMaxRecord = o,
    h == iTripsPerView * iPageNumber++ ? GetTrips(m_iVehicleId) : (document.body.style.cursor = "default", AddTrailerKey(), $("#tfrLoading").hide(), RemoveUnprocessedTrips())
}
function RemoveUnprocessedTrips()
{
    g_atTrips = jQuery.grep(g_atTrips, function(n)
    {
        return n.Processed === !0
    })
}
function LiveDeviceSelected(n, t)
{
    n ? ($("div#pDeviceCapacity").hide(), $("p#pLiveView").show(), $("#d0").text("Last Week"), $("#fIsInTrip").text(t)) : ($("p#pLiveView").hide(), $("#d0").text("Last Upload"))
}
function NewMax()
{
    addToCrumbtrail(" NewMax()");
    var n = g_atTrips.length,
        t = iCurrentMaxRecord + iTripsPerView * iPageNumber;
    return t < n ? t : n
}
function NewTable()
{
    if (addToCrumbtrail("NewTable()"), $("#tableTrips tbody").remove(), $("#trNoResultsFound").hide(), g_atTrips = null, g_atTrips = [], g_SelectedTrip = null, iPageNumber = 1, iCurrentMaxRecord = 0, $("#tfrLoading").show(), m_iVehicleId == null && UserMappingSettings.Vehicles != undefined)
        m_iVehicleId = UserMappingSettings.Vehicles[0].iVehicleId;
    else if (m_iVehicleId == null && UserMappingSettings.Vehicles == undefined)
    {
        $("#trNoResultsFound").show(),
        $("#tfrLoading").hide();
        return
    }
    GetTripAjax != undefined && GetTripAjax.abort(),
    GetTrips(m_iVehicleId)
}
function OpenTripPopup(n)
{
    if (g_fPopupOpen === !1)
    {
        if (g_fPopupOpen = !0, addToCrumbtrail("OpenTripPopup(id)"), g_fPreloadMaps === !1 && g_fGoogleApiLoaded === !1 && LoadGoogleApi(), g_SelectedTrip != undefined && n == g_SelectedTrip.Id)
            return RUCTripPopup.LoadDiv(g_SelectedTrip), !1;
        $.each(g_atTrips, function(t, i)
        {
            if (i.Id == n)
                return g_SelectedTrip = i, RUCTripPopup.LoadDiv(g_SelectedTrip), !1
        })
    }
}
function lostFocus(n)
{
    addToCrumbtrail("lostFocus(txtBox)");
    var t = n.parentNode;
    EndEditing(t, n)
}
function ChangeDateSortOrder(n)
{
    addToCrumbtrail("ChangeDateSortOrder(img)"),
    n.nodeName == "A" && (n = n.childNodes[1]),
    n.alt == "Asc" ? (n.src = URL.DOWN, n.alt = "Desc", iSortOrder = 1) : n.alt == "Desc" && (n.src = URL.UP, n.alt = "Asc", iSortOrder = 2),
    NewTable()
}
function GetDateRange()
{
    var r = $("ul.tripSortTabs li.active").attr("id"),
        n,
        i,
        t;
    switch (r)
    {
        case"d0":
            return {
                    month: -1, year: 0
                };
        case"d1":
            return {
                    month: 0, year: 0
                };
        case"d2":
            return n = new Date, {
                    month: n.getMonth() + 1, year: n.getFullYear()
                };
        case"d3":
            return n = new Date, i = n.prevMonth(), {
                        month: i.getMonth() + 1, year: i.getFullYear()
                    };
        case"d4":
            return t = $("#ddlMonthSelector").val(), {
                    month: t.substring(0, t.indexOf("-")), year: t.substring(t.indexOf("-") + 1)
                };
        default:
            return {
                    month: -1, year: 0
                }
    }
}
function ChangeVehicle()
{
    if (addToCrumbtrail("ChangeVehicle()"), $("#ddlVehicle").val() != -1)
    {
        m_iVehicleId = $("#ddlVehicle").val();
        var n = GetVehicle(m_iVehicleId);
        n != null && LiveDeviceSelected(n.iDeviceId != null && n.iDeviceProductId == 4, n.sStatus),
        NewTable()
    }
    else
        $("#ddlVehicle").val(m_iVehicleId)
}
function CenterPopups()
{
    var t,
        r,
        n,
        u,
        i,
        f;
    addToCrumbtrail("CenterPopups()"),
    t = {
        height: $(window).height(), width: $(window).width()
    },
    r = 0,
    $(".popupBackground").height(t.height - r).width(t.width - r),
    n = {
        width: 0, height: 0
    },
    n.width == 0 && (n.width = t.width - parseInt($(".popupWindow").css("margin-left").replace(/\D/g, "")) - parseInt($(".popupWindow").css("margin-right").replace(/\D/g, ""))),
    n.height == 0 && (n.height = t.height - parseInt($(".popupWindow").css("margin-top").replace(/\D/g, "")) - parseInt($(".popupWindow").css("margin-bottom").replace(/\D/g, ""))),
    u = n.width - (20 + $(".popupDetails").width() + parseInt($(".popupWindow").css("padding-left").replace(/\D/g, "")) + parseInt($(".popupWindow").css("padding-right").replace(/\D/g, ""))),
    i = n.height - (24 + parseInt($(".popupWindow").css("padding-bottom").replace(/\D/g, ""))),
    $(".mapCover").each(function(n, t)
    {
        $(t).width(u).height(i),
        $(t).children().css("margin-top", (i - 91) / 2)
    }),
    $(".map").each(function(n, t)
    {
        $(t).width(u).height(i)
    }),
    f = $(".popupWindow").width() - ($(".mergeTripDetails").width() + 22),
    $(".mergeTripMapCover").width(f),
    $(".mergeTripsMapSize").width(f)
}
function drawVehicleRow(n, t)
{
    var i = [];
    return i[0] = t != undefined && t == n.iVehicleId ? "<td id='" + n.iVehicleId + "' class='selected'>" : "<td id='" + n.iVehicleId + "'>", i[1] = "<span><b>", i[2] = n.sRegistration, i[3] = "<\/b><br/>", i[4] = (n.sMake ? n.sMake : "-") + " " + (n.sModel ? n.sModel : "-"), i[i.length] = "<\/span><\/td>", i.join("")
}
function vehicleSelectionChangedCallback(n)
{
    return n.id == "" || n.id == m_pSelectedVehicleId ? !0 : ($.ajax({
            type: "POST", url: "../MappingWebService.asmx/ChangeVehicle", contentType: "application/json; charset=utf-8", data: '{"tripId":' + g_SelectedTrip.Id + ', "vehicleId":' + n.id + "}", dataType: "json", success: function(t)
                {
                    t.d == !0 ? g_SelectedTrip != null && (g_SelectedTrip.VehicleId = parseInt(n.id), $("#" + g_SelectedTrip.Id + " td:nth-child(" + (tableCellEnum.ChangeVehicle + 1) + ") > a").text(GetVehicle(n.id).sRegistration)) : alert("vehicle change failed!")
                }, error: function(n)
                {
                    if (n.statusText == "abort")
                        return !1;
                    alert(n.responseText)
                }, async: !1
        }), m_pSelectedVehicleId = null, !0)
}
function drawCategoryRow(n, t)
{
    var i = parseInt(t) == n.iCategoryId ? " class='selected' " : "";
    return ["<td id='", n.iCategoryId, "'", i, "><div style='background-color:", n.sColourHex, n.sColourHex == "transparent" ? ";color:#505050" : "", ";'>", n.sCategory, "<\/div><\/td>"].join("")
}
function categorySelectionChanged(n)
{
    return n.id == "" || n.id == g_SelectedTrip.CategoryId || n.id == 0 && g_SelectedTrip.CategoryId == null ? !0 : n.id == -99 ? (setTimeout(function()
        {
            EditCategories()
        }, 100), !1) : ($.ajax({
            type: "POST", url: "../MappingWebService.asmx/ChangeCategory", contentType: "application/json; charset=utf-8", data: '{"tripId":' + g_SelectedTrip.Id + ', "categoryId":' + n.id + "}", dataType: "json", success: function(n)
                {
                    n.d[0] == !0 ? (n.d.length == 3 && (n.d[2].unshift({
                        iCategoryId: 0, sCategory: "None", sColourHex: "transparent"
                    }), n.d[2].push({
                        iCategoryId: -99, sCategory: "Edit", sColourHex: "transparent"
                    }), pCategoryPopup.setDatasource(n.d[2]), UserMappingSettings.Categories = n.d[2]), g_SelectedTrip != null && (g_SelectedTrip.CategoryId = parseInt(n.d[1]), $.each(UserMappingSettings.Categories, function(t, i)
                    {
                        if (i.iCategoryId == n.d[1])
                            return i.iCategoryId == 0 ? $("#" + g_SelectedTrip.Id + " td:first-child > div").addClass("catEmpty").css("background-color", i.sColourHex).prop("id", "c" + i.iCategoryId) : $("#" + g_SelectedTrip.Id + " td:first-child > div").removeClass("catEmpty").css("background-color", i.sColourHex).prop("id", "c" + i.iCategoryId), !1
                    }))) : alert(n.d[1])
                }, error: function(n)
                {
                    if (n.statusText == "abort")
                        return !1;
                    alert(n.responseText)
                }, async: !1
        }), !0)
}
function LoadGoogleApi()
{
    if (addToCrumbtrail("LoadGoogleApi()"), g_fGoogleApiLoading == !1)
    {
        g_fGoogleApiLoading = !0;
        var n;
        $.ajax({
            type: "POST", url: "../MappingWebService.asmx/GetGoogleUrl", contentType: "application/json; charset=utf-8", data: {}, dataType: "json", success: function(t)
                {
                    n = t.d,
                    $.getScript(n + "&callback=MapApiLoaded", function(){})
                }, async: !1
        })
    }
}
function MapApiLoaded()
{
    addToCrumbtrail("MapApiLoaded()"),
    $.getScript(sScriptToLoad, function()
    {
        g_fGoogleApiLoaded = !0
    })
}
function WaitLoaded(n)
{
    addToCrumbtrail("WaitLoaded(scriptLoaded)"),
    n != undefined && typeof n == "function" && (m_scriptLoaded = n),
    g_fGoogleApiLoaded === !0 && ScriptLoadComplete === !0 ? (document.body.style.cursor = "default", m_scriptLoaded()) : setTimeout(WaitLoaded, 100)
}
var InvalidShapeMsg,
    m_pSelectedVehicleId,
    tableCellEnum,
    m_scriptLoaded;
Format = function()
{
    return Number.prototype.metersToMiles = function()
        {
            return (this * .000621371192).toFixed(2)
        }, Number.prototype.metersToYards = function()
        {
            return (this * .9144).toFixed(0)
        }, {
                Distance: function(n)
                {
                    n = new Number(n);
                    switch (distanceUnit)
                    {
                        case"km":
                            return (n / 1e3).toFixed(2) + " km";
                        case"mi":
                            return n.metersToMiles() + " mi"
                    }
                }, DistanceSmall: function(n)
                    {
                        n = new Number(n);
                        switch (distanceUnit)
                        {
                            case"km":
                                return n.toFixed(0) + " m";
                            case"mi":
                                return n.metersToMiles() + " mi"
                        }
                    }, Speed: function(n)
                    {
                        n = new Number(n);
                        switch (distanceUnit)
                        {
                            case"km":
                                return n + " km/h";
                            case"mi":
                                return (n * .621371192).toFixed(0) + " mi/h"
                        }
                    }, Date: function(n)
                    {
                        return n
                    }, SliderMin: function()
                    {
                        switch (distanceUnit)
                        {
                            case"km":
                                return 10;
                            case"mi":
                                return 10.1
                        }
                    }, SliderMax: function()
                    {
                        switch (distanceUnit)
                        {
                            case"km":
                                return 500;
                            case"mi":
                                return 546.8
                        }
                    }, SliderMinDisplay: function()
                    {
                        switch (distanceUnit)
                        {
                            case"km":
                                return 10;
                            case"mi":
                                return 10..metersToMiles()
                        }
                    }, SliderMaxDisplay: function()
                    {
                        switch (distanceUnit)
                        {
                            case"km":
                                return 500;
                            case"mi":
                                return 546.8.metersToMiles()
                        }
                    }
            }
}(),
Colors = function()
{
    return {
            Black: "000000", Red: "FF0000", LightRed: "FE2E2E", Green: "00FF33", LightBlue: "1874CD", ZoneFillColor: "00AAFF", Pink: "FF00CC", Purple: "CC00CC", List: ["FF0000", "00FF33", "1874CD", "00AAFF", "FF00CC", "CC00CC"]
        }
}(),
Zone.prototype.JSONId = IdToJSONString,
Zone.prototype.ToJSONString = function(n)
{
    var i = this.Comment == null || this.Comment == "" || this.Comment == "null" ? null : '"' + this.Comment + '"',
        t = ['{"Id":' + this.Id, ',"Name":"' + this.Name, '","Comment":' + i, ',"ZoneType":' + this.ZoneType, ',"Designation":' + this.Designation, ',"Points":' + DoubleArrayToJSONString(this.Points), ',"PointRadiusMeters":' + this.PointRadiusMeters, ',"IsTrackingZone":' + this.IsTrackingZone, ',"CategoryId":' + (this.CategoryId == undefined ? null : this.CategoryId), "}"];
    return arguments.length == 0 ? t.join("") : '{"' + n + '":' + t.join("") + "}"
},
Zone.prototype.ToTableString = function()
{
    var t = "src='" + URL.PRIVATE + "' alt='Private' title='Private. Click to change to Business'",
        i,
        n,
        r,
        u;
    return (this.Designation == 2 || this.Designation == 4) && (t = "src='" + URL.BUSINESS + "' alt='Business' title='Business. Click to change to Private'"), i = this.Comment == null ? "" : this.Comment, n = "", $("#thCategory").length > 0 && (this.CategoryId == null || this.CategoryId == 0 ? n = "<td class='cat'><div data-c='0' class='cat catEmpty'><\/div><\/td>" : (r = GetCategoryDiv(this.CategoryId), n = ["<td class='cat'>", r, "<\/td>"].join(""))), u = ["<tr id='", this.Id, "'>", n, "<td  class='comment'>", this.Name, "<\/td><td><img id='Designation", this.Id, "'", t, " style='cursor:pointer'/><\/td><td id='Comment", this.Id, "' class='comment'>", i, "<\/td><td><a href='e'>Edit<\/a><\/td>", "<td><a href='d' style='color:Red;'>X<\/a><\/td>", "<\/tr>"], u.join("")
},
Zone.prototype.Save = function(n, t)
{
    DoAjax({
        data: this.ToJSONString("zo"), url: "/MappingWebService.asmx/EditPoint", successCallback: n, errorCallback: t, timeout: 6e4
    }, "We are saving the changes to the zone and we might have to reprocess some trip data.<br/>Please wait...")
},
Zone.prototype.Equals = function(n)
{
    return this.Id == n.Id && this.Name == n.Name && this.ZoneType == n.ZoneType && this.Designation == n.Designation && parseInt(this.PointRadiusMeters) == parseInt(n.PointRadiusMeters) && this.Comment == n.Comment && this.CategoryId == n.CategoryId
},
Zone.prototype.PointsEqual = function(n)
{
    var i = this.Points.length,
        t;
    if (i != n.length)
        return !1;
    for (t = 0; t < i; t++)
        if (!(this.Points[t][0] == n[t][0] && this.Points[t][1] == n[t][1]))
            return !1;
    return !0
},
Trip.prototype.Bounds = 0,
Trip.prototype.Markers = [],
Trip.prototype.TripAdjustment = [],
Trip.prototype.MapCenter,
Trip.prototype.MapZoom,
Trip.prototype.JSONId = IdToJSONString,
Trip.prototype.ToJSONString = function(n)
{
    var r,
        u,
        t = this.StartZoneId,
        i = this.EndZoneId,
        f,
        e;
    return t == null && (t = -1), i == null && (i = -1), r = this.StartLoc == null ? "null" : typeof this.StartLoc.Name != "undefined" ? '"' + this.StartLoc.Name + '"' : '"' + this.StartLoc + '"', u = this.EndLoc == null ? "null" : typeof this.EndLoc.Name != "undefined" ? '"' + this.EndLoc.Name + '"' : '"' + this.EndLoc + '"', f = this.Comment == null || this.Comment == "" || this.Comment == "null" ? null : '"' + this.Comment + '"', e = ['{"Id":' + this.Id, ',"Points":null', ',"TripStartDate":"' + this.TripStartDate, '","TripEndDate":"' + this.TripEndDate, '","Distance":' + this.Distance, ',"Duration":"' + this.Duration, '","StartLoc":' + r, ',"EndLoc":' + u, ',"StartZoneId":"' + t, '","EndZoneId":"' + i, '","Designation":' + this.Designation, ',"CategoryId":' + this.CategoryId, ',"MaxSpeed":' + this.MaxSpeed, ',"AvgSpeed":' + this.AvgSpeed, ',"Comment":' + f, ',"LineWKT":"' + this.WKT, '","VehicleId":' + this.VehicleId, ',"StartZoneSnapped":' + this.StartZoneSnapped, ',"EndZoneSnapped":' + this.EndZoneSnapped, ',"StartZoneSelected":' + this.StartZoneSelected, ',"EndZoneSelected":' + this.EndZoneSelected, ',"MergedTrip":' + this.MergedTrip, ',"DriverId":' + this.DriverId, "}"], '{"' + n + '":' + e.join("") + "}"
},
Trip.prototype.ToTableRow = function(n)
{
    var h = GetZoneTd(this.StartZoneId, this.StartLoc, this.StartZoneSnapped, this.StartZoneSelected, "sz"),
        c = GetZoneTd(this.EndZoneId, this.EndLoc, this.EndZoneSnapped, this.EndZoneSelected, "ez"),
        e = "src='" + URL.PRIVATE + "' alt='Private' title='Private. Click to change to Business'",
        t,
        i,
        f,
        o,
        r,
        s,
        u;
    return (this.Designation == 2 || this.Designation == 4) && (e = "src='" + URL.BUSINESS + "' alt='Business' title='Business. Click to change to Private'"), t = new Date(this.TripStartDate), t = t.toShortTimeString(), i = new Date(this.TripEndDate), i = i.toShortTimeString(), f = t + " - " + i, this.MergedTrip === !0 && (f += "<span class='id' title='Merged Trip'>&nbsp;&nbsp;+<\/span>"), o = this.Comment == null ? "" : this.Comment, r = "", $("#thCategory").length > 0 && (this.CategoryId == null || this.CategoryId == 0 ? r = "<td class='cat'><div data-c='0' class='cat catEmpty'><\/div><\/td>" : (s = GetCategoryDiv(this.CategoryId), r = ["<td class='cat'>", s, "<\/td>"].join(""))), u = ["<tr id='", this.Id, "'>" + r + "<td class='comment'>", f, "<\/td>", h, c, "<td>" + Format.Distance(this.Distance) + "<\/td>", "<td>" + this.Duration.removeSeconds() + "<\/td>", "<td><img id='Designation" + this.Id + "'" + e + " style='cursor:pointer'/><\/td>", "<td id='Comment" + this.Id + "' class='comment'><span class='edit'>" + o + "<\/span><\/td>", "<td><img src='" + URL.EDIT + "' alt='Edit Comment' title='Edit Comment' /><\/td><td><span class='link' data-a='vt' title='View trip on map'>View<\/span><\/td>"], n != null && u.push(["<td class='car-column'><span class='vehicleDropDown link' data-a='cv' title='Click to change vehicle'>" + n + "<\/span><\/td>"]), u.push("<\/tr>"), u.join("")
},
Trip.prototype.ToDriverTableRow = function(n, t, i)
{
    var s = t.checkPermission(256) ? "sz" : null,
        p = GetZoneTd(this.StartZoneId, this.StartLoc, this.StartZoneSnapped, this.StartZoneSelected, s),
        a,
        h,
        r,
        v,
        c,
        f,
        e,
        l,
        o,
        y,
        u;
    return s = t.checkPermission(256) ? "ez" : null, a = GetZoneTd(this.EndZoneId, this.EndLoc, this.EndZoneSnapped, this.EndZoneSelected, s), t.checkPermission(4) ? (r = "src='" + URL.PRIVATE + "' alt='Private' title='Private. Click to change to Business'", (this.Designation == 2 || this.Designation == 4) && (r = "src='" + URL.BUSINESS + "' alt='Business' title='Business. Click to change to Private'"), h = "<td><img id='Designation" + this.Id + "'" + r + "/><\/td>") : (r = "src='" + URL.PRIVATE + "' alt='Private'", (this.Designation == 2 || this.Designation == 4) && (r = "src='" + URL.BUSINESS + "' alt='Business'"), h = "<td><img " + r + " class='blocked'/><\/td>"), c = this.Comment == null ? "" : this.Comment, v = t.checkPermission(2) ? "<td id='Comment" + this.Id + "' class='comment'><span class='edit'>" + c + "<\/span><\/td><td><img src='" + URL.EDIT + "' alt='Edit Comment' title='Edit Comment'/><\/td>" : "<td class='comment'>" + c + "<\/td><td><\/td>", f = new Date(this.TripStartDate), f = f.toShortTimeString(), e = new Date(this.TripEndDate), e = e.toShortTimeString(), l = f + " - " + e, this.MergedTrip === !0 && (l += "<span class='id' title='Merged Trip'>&nbsp;&nbsp;+<\/span>"), o = "", $("#thCategory").length > 0 && (this.CategoryId == null || this.CategoryId == 0 ? o = "<td class='cat'><div data-c='0' class='cat catEmpty" + (t.checkPermission(8) ? "" : " blocked") + "'><\/div><\/td>" : (y = GetCategoryDiv(this.CategoryId, !0, t.checkPermission(8)), o = ["<td class='cat'>", y, "<\/td>"].join(""))), u = ["<tr id='", this.Id, "'>" + o + "<td class='comment'>", l, "<\/td>", p, a, "<td>" + Format.Distance(this.Distance) + "<\/td>", "<td>" + this.Duration.removeSeconds() + "<\/td>", h, v, "<td><span class='link' data-a='vt' title='View trip on map'>View<\/span><\/td>"], n != null && (t.checkPermission(16) ? u.push(["<td class='car-column'><span class='vehicleDropDown link' data-a='cv' title='Click to change vehicle'>" + n + "<\/span><\/td>"]) : u.push(["<td class='car-column'>" + n + "<\/td>"])), (changedriver = !1) ? u.push(["<td class='driver-column'><span class='vehicleDropDown' data-a='cd' title='Click to change driver'>" + (i == null ? "N.A." : i) + "<\/span><\/td>"]) : u.push(["<td class='driver-column'>" + (i == null ? "-" : i) + "<\/td>"]), u.push("<\/tr>"), u.join("")
},
Trip.prototype.Save = function(n, t)
{
    DoAjax({
        data: this.ToJSONString("to"), url: "/MappingWebService.asmx/EditTrip", successCallback: n, errorCallback: t, doAsync: !1
    })
},
Trip.prototype.ChangeCategory = function(n, t, i)
{
    DoAjax({
        url: "/MappingWebService.asmx/ChangeCategory", data: '{"tripId":' + this.Id + ', "categoryId":' + n + "}", successCallback: function(n)
            {
                n.d[0] == !0 && UserMappingSettings.AllowTripCategorization == !0 && n.d.length == 3 && (n.d[2].unshift({
                    iCategoryId: 0, sCategory: "None", sColourHex: "transparent"
                }), n.d[2].push({
                    iCategoryId: -99, sCategory: "Edit", sColourHex: "transparent"
                }), pCategoryPopup.setDatasource(n.d[2]), UserMappingSettings.Categories = n.d[2]),
                t(n)
            }, errorCallback: i, doAsync: !1
    })
},
Trip.prototype.GetPoints = function()
{
    var n = this.Points,
        r,
        u = this.Id,
        i = !0,
        t;
    return (this.Points == undefined || this.Points.length == 0) && (t = "{'tripId':" + u + ", 'startIndex':null}", DoAjax({
            data: t, url: "/MappingWebService.asmx/GetTripDataRange", successCallback: function(f)
                {
                    var e = f.d[1];
                    for (n = f.d[0]; e === !0; )
                        t = "{'tripId':" + u + ", 'startIndex':" + (n[n.length - 1][2] + 1) + "}",
                        DoAjax({
                            data: t, url: "/MappingWebService.asmx/GetTripDataRange", successCallback: function(t)
                                {
                                    e = t.d[1],
                                    n.add(t.d[0])
                                }, errorCallback: function(t, r)
                                {
                                    e = !1,
                                    n = null,
                                    alert(r),
                                    i = !1
                                }, doAsync: !1
                        });
                    r = f.d.LineWKT
                }, errorCallback: function(t, r)
                {
                    n = null,
                    alert(r),
                    i = !1
                }, doAsync: !1
        })), this.Points = n, this.WKT = r, i
},
String.prototype.truncate = function(n)
{
    if (this.length <= n)
        return this;
    var t = this.substr(0, n - 3);
    return t + "..."
},
String.prototype.removeSeconds = function()
{
    var u = this.indexOf("min") > 0 || this.indexOf("m") > 0,
        t,
        n,
        i,
        r;
    return u ? (t = {}, n = this.split(" "), n[1] == "hr" && (t.hr = new Number(n[0])), n[1] == "min" || n[1] == "m" ? t.min = new Number(n[0]) : (n[3] == "min" || n[3] == "m") && (t.min = new Number(n[2])), n[3] == "sec" || n[3] == "s" ? t.sec = new Number(n[2]) : (n[5] == "sec" || n[5] == "s") && (t.sec = new Number(n[4])), i = t.hr == undefined ? null : t.hr + " hr ", t.min == undefined) ? t.sec + " sec" : (r = t.sec != undefined && t.sec >= 30 ? t.min + 1 + " min " : t.min + " min ", i != null ? i + r : r) : this
},
String.prototype.hash = function()
{
    return "#" + this
},
String.prototype.trim == undefined && (String.prototype.trim = function()
{
    return this.replace(/\A\s+/g, "").replace(/\s+\Z/g, "")
}),
Date.prototype.prevMonth = function()
{
    var t = this.getMonth(),
        n = new Date(this);
    return n.setMonth(t - 1), n
},
Date.prototype.nextMonth = function()
{
    var t = this.getMonth(),
        n = new Date(this);
    return n.setMonth(t + 1), n
},
Date.prototype.toFormattedString = function()
{
    var u = this.getFullYear().toString(),
        r = (this.getMonth() + 1).toString(),
        n,
        t,
        i;
    return r.length == 1 && (r = "0" + r), n = this.getDate().toString(), n.length == 1 && (n = "0" + n), t = this.getHours().toString(), t.length == 1 && (t = "0" + t), i = this.getMinutes().toString(), i.length == 1 && (i = "0" + i), u + r + n + t + i
},
Date.prototype.toFormattedString2 = function()
{
    var i = ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"][this.getMonth()],
        n = this.getMinutes().toString(),
        t;
    return n.length == 1 && (n = "0" + n), t = this.getHours() + ":" + n, [this.getDate().toString(), i, this.getFullYear().toString(), t].join(" ")
},
Date.prototype.toShortTimeString = function()
{
    var t = this.getHours().toString(),
        n;
    return t.length == 1 && (t = "0" + t), n = this.getMinutes().toString(), n.length == 1 && (n = "0" + n), t + ":" + n
},
Date.prototype.toLongTimeString = function()
{
    var i = this.getHours().toString(),
        n,
        t;
    return i.length == 1 && (i = "0" + i), n = this.getMinutes().toString(), n.length == 1 && (n = "0" + n), t = this.getSeconds().toString(), t.length == 1 && (t = "0" + t), i + ":" + n + ":" + t
},
Date.prototype.toEndOfDay = function()
{
    this.setHours(23),
    this.setMinutes(59),
    this.setSeconds(59)
},
Date.prototype.toStartOfDay = function()
{
    this.setHours(0),
    this.setMinutes(0),
    this.setSeconds(0)
},
Time.prototype.add = function(n)
{
    var t,
        i;
    this.Hours += n.Hours,
    this.Minutes += n.Minutes,
    this.Seconds += n.Seconds,
    this.Seconds >= 60 && (t = parseInt(this.Seconds / 60), this.Seconds -= t * 60, this.Minutes += t),
    this.Minutes >= 60 && (i = parseInt(this.Minutes / 60), this.Minutes -= i * 60, this.Hours += i)
},
Time.prototype.toString = function(n)
{
    return this.Hours > 0 ? this.Hours + " hr " + this.Minutes + " min" : this.Minutes > 0 ? this.Minutes + " min" + (n === !0 ? " " + this.Seconds + " sec" : "") : this.Seconds > 0 && n === !0 ? this.Seconds + " sec" : void 0
},
Number.prototype.getHeading = function()
{
    return this >= 345 || this <= 15 ? "N" : this > 15 && this < 75 ? "NE" : this >= 75 && this <= 105 ? "E" : this > 105 && this < 165 ? "SE" : this >= 165 && this <= 195 ? "S" : this > 195 && this < 255 ? "SW" : this >= 255 && this <= 285 ? "W" : "NW"
},
Number.prototype.checkPermission = function(n)
{
    return (this & n) > 0
},
Array.prototype.add = function(n)
{
    for (var i = this.length, r = n.length, t = 0; t < r; t++)
        this[i + t] = n[t]
},
PopulateMonthSelector = function(n)
{
    for (var e = n.getMonth(), r = n.getFullYear(), s = ["Jan ", "Feb ", "Mar ", "Apr ", "May ", "Jun ", "Jul ", "Aug ", "Sept ", "Oct ", "Nov ", "Dec "], u = [], o = [], t = 0, f, i = 0; i < e + 1; i++)
    {
        if (f = e - i, u[t] = s[f] + r, o[t] = '<option value="' + (f + 1) + "-" + r + '">' + u[t] + "<\/option>", f <= 0 && (e = 11, i = -1, r = r - 1), t += 1, u[t - 1] == "Mar 2011")
            break;
        if (t == 24)
            break
    }
    return {
            OptionArray: o, MonthArray: u
        }
},
InvalidShapeMsg = "Invalid shape. A shape may not intersect itself. Please redraw the shape",
CheckCategorization = function(n)
{
    if (ViewingDriverProfile() == !1)
    {
        if (UserMappingSettings != undefined && UserMappingSettings.AllowTripCategorization)
        {
            if (arguments.length > 0)
            {
                var t = getVehicle(n);
                return t.iDeviceId != null ? (t.fDeviceActiveSubscription == !1 && ($.blockUI == undefined ? alert("The vehicle does not have an active subscription that allows categorization") : alertUI("The vehicle does not have an active subscription that allows categorization", 3e3)), t.fDeviceActiveSubscription) : !0
            }
            return !0
        }
        return null
    }
    return m_DriverProfile.CheckCategorization(n)
},
Zones = function()
{
    this.SelectedZone = null
},
Zones.prototype = [],
Zones.prototype.constructor = Zones,
Zones.prototype.defaultPoly = {
    strokeColor: Colors.Black.hash(), strokeOpacity: .8, strokeWeight: 2, fillColor: Colors.ZoneFillColor.hash()
},
Zones.prototype.setSelected = function(n)
{
    var t;
    isNaN(parseInt(n)) == !1 ? this.SelectedZone == null ? this.SelectedZone = this.GetZone(n, !1) : this.SelectedZone.Id != n && (this.SelectedZone = this.GetZone(n, !1)) : this.SelectedZone == null ? (t = this.GetZone(n.Id, !1), t == null && (this.push(n), t = n), this.SelectedZone = t) : this.SelectedZone.Id != n && (t = this.GetZone(n.Id, !1), t == null && (this.push(n), t = n), this.SelectedZone = t)
},
Zones.prototype.pushRange = function(n)
{
    for (var i = n.length, t = 0; t < i; t++)
        this.push(new Zone(n[t]))
},
Zones.prototype.DrawZoneFeature = function(n, t, i)
{
    var f,
        o,
        r,
        s,
        u;
    if (n.ZoneType == 1)
    {
        var h = new google.maps.LatLng(n.Points[0][1], n.Points[0][0]),
            c = {
                center: h, clickable: !1, map: i, radius: parseInt(n.PointRadiusMeters), zIndex: n.Id
            },
            e = new google.maps.Circle(c);
        e.setOptions(this.defaultPoly),
        n.Geometry = e
    }
    else if (n.ZoneType == 2)
    {
        for (f = [], o = n.Points.length, r = 0; r < o; r++)
            f[r] = new google.maps.LatLng(n.Points[r][1], n.Points[r][0]);
        s = {
            map: i, clickable: !1, path: f, strokeWeight: 2
        },
        u = new google.maps.Polygon(s),
        u.setMap(i),
        u.setOptions(this.defaultPoly),
        n.Geometry = u
    }
},
Zones.prototype.GetZone = function(n, t)
{
    var i = null,
        r = this;
    return $.each(this, function(u, f)
        {
            if (parseInt(n) == f.Id)
                return t === !0 && (f.Geometry == null ? r.DrawZoneFeature(f, null, null) : f.Geometry.setOptions(r.defaultPoly)), i = f, i.index = u, !1
        }), i
},
Zones.prototype.GetAllIds = function()
{
    var n = [];
    return $.each(this, function(t, i)
        {
            n.push(i.Id)
        }), n
},
Zones.prototype.GetName = function(n)
{
    if (n == null)
        return null;
    var t = this.GetZone(n);
    return t != null ? t.Name : null
},
Zones.prototype.DrawZone = function(n, t)
{
    var i,
        o,
        c,
        e,
        u,
        l,
        f,
        a,
        v;
    if (i = n.Id !== undefined ? n : this.GetZone(id), i.ZoneType == 1)
    {
        o = new google.maps.LatLng(i.Points[0][1], i.Points[0][0]),
        c = {
            center: o, clickable: !0, strokeWeight: 1, radius: parseInt(i.PointRadiusMeters), zIndex: i.Id
        };
        try
        {
            e = new google.maps.Circle(c)
        }
        catch(y)
        {
            return LogError("Failed to create circle: " + y, "GoogleMapZoneHelper.js", 145), alert("Oops. we are experiencing a problem!"), null
        }
        i.Geometry = e;
        var r = new Label({
                map: t, zoom: 14
            }),
            s = e.getBounds().getSouthWest().lat(),
            h = new google.maps.LatLng(s, o.lng());
        return r.set("position", h), r.set("text", i.Name), i.Geometry.setMap(t), i.Geometry.Label = r, e.getBounds()
    }
    if (i.ZoneType == 2)
    {
        for (u = [], l = i.Points.length, f = 0; f < l; f++)
            u.push(new google.maps.LatLng(i.Points[f][1], i.Points[f][0]));
        a = {
            path: u, strokeWeight: 1
        },
        v = new google.maps.Polygon(a),
        i.Geometry = v;
        var s = GoogleMapExtensions.GetPolyBounds(u).getSouthWest().lat(),
            p = GoogleMapExtensions.GetPolySouthmostLng(u),
            h = new google.maps.LatLng(s, p),
            r = new Label({
                map: t, zoom: 14
            });
        return r.set("position", h), r.set("text", i.Name), i.Geometry.setMap(t), i.Geometry.Label = r, GoogleMapExtensions.GetPolyBounds(u)
    }
},
Zones.prototype.DrawZones = function(n, t, i)
{
    var u = [],
        r,
        e,
        f;
    n > 0 && (r = this.GetZone(n), r == null ? u.push(n) : r.Geometry == null ? this.DrawZoneFeature(r, !1, i) : (r.Geometry.setMap(i), r.Geometry.setOptions(this.defaultPoly))),
    t > 0 && n !== t && (r = this.GetZone(t), r == null ? u.push(t) : r.Geometry == null ? this.DrawZoneFeature(r, !1, i) : (r.Geometry.setMap(i), r.Geometry.setOptions(this.defaultPoly))),
    u.length > 0 && (e = IntArrayToJSONString("ids", u), f = this, $.ajax({
            type: "POST", url: "../MappingWebService.asmx/GetZonesById", contentType: "application/json; charset=utf-8", data: e, dataType: "json", success: function(r)
                {
                    var o = r.d.length,
                        e,
                        s,
                        u;
                    if (o > 0 && r.d[0] === !1)
                        return alert(r.d[2]), !1;
                    for (e = 0; e < o; e++)
                        s = r.d[e],
                        u = new Zone(s),
                        u.Id == n && f.push(u),
                        u.Id == t && n != t && f.push(u),
                        f.DrawZoneFeature(u, !1, i)
                }, async: !1
        }))
},
Zones.prototype.RemoveZones = function(n, t)
{
    var i;
    n > 0 && (i = this.GetZone(n), i !== null && i.Geometry != undefined && i.Geometry.setMap(null)),
    t > 0 && n != t && (i = this.GetZone(t), i !== null && i.Geometry != undefined && i.Geometry.setMap(null))
},
Zones.prototype.UpdateZone = function(n, t)
{
    var i = this.GetZone(n.Id);
    i != null ? (i.Geometry != null && (i.Geometry.setMap(null), t === !0 && (i.Geometry = null)), i = n) : (n.Geometry != null && n.Geometry.setMap(null), this.push(n))
},
Zones.prototype.RemoveAllBut = function(n)
{
    $.each(this, function(t, i)
    {
        i.Id != n && i.Geometry != null && (i.Geometry.setMap(null), i.Geometry.Label != undefined && (i.Geometry.Label.setMap(null), i.Geometry.Label = null))
    })
},
Zones.prototype.Delete = function(n)
{
    var t = this.GetZone(n);
    t != null && this.splice(t.index, 1)
},
RUCTrip.prototype.Bounds = 0,
RUCTrip.prototype.Markers = [],
RUCTrip.prototype.TripAdjustment = [],
RUCTrip.prototype.MapCenter,
RUCTrip.prototype.MapZoom,
RUCTrip.prototype.TitleRowNumber = 0,
RUCTrip.prototype.JSONId = IdToJSONString,
RUCTrip.prototype.ToJSONString = function(n)
{
    var r,
        u,
        t = this.StartZoneId,
        i = this.EndZoneId,
        f,
        e;
    return t == null && (t = -1), i == null && (i = -1), r = this.StartLoc == null ? "null" : typeof this.StartLoc.Name != "undefined" ? '"' + this.StartLoc.Name + '"' : '"' + this.StartLoc + '"', u = this.EndLoc == null ? "null" : typeof this.EndLoc.Name != "undefined" ? '"' + this.EndLoc.Name + '"' : '"' + this.EndLoc + '"', f = this.Comment == null || this.Comment == "" || this.Comment == "null" ? null : '"' + this.Comment + '"', e = ['{"Id":' + this.Id, ',"Points":null', ',"TripStartDate":"' + this.TripStartDate, '","TripEndDate":"' + this.TripEndDate, '","Distance":' + this.Distance, ',"Duration":"' + this.Duration, '","StartLoc":' + r, ',"EndLoc":' + u, ',"StartZoneId":"' + t, '","EndZoneId":"' + i, '","Designation":' + this.Designation, ',"CategoryId":' + this.CategoryId, ',"MaxSpeed":' + this.MaxSpeed, ',"AvgSpeed":' + this.AvgSpeed, ',"Comment":' + f, ',"LineWKT":"' + this.WKT, '","VehicleId":' + this.VehicleId, ',"StartZoneSnapped":' + this.StartZoneSnapped, ',"EndZoneSnapped":' + this.EndZoneSnapped, ',"StartZoneSelected":' + this.StartZoneSelected, ',"EndZoneSelected":' + this.EndZoneSelected, ',"MergedTrip":' + this.MergedTrip, ',"OffroadDistanceMetres":' + this.OffroadDistanceMetres, ',"OffroadDurationSeconds":' + this.OffroadDurationSeconds, ',"Processed":' + this.Processed, "}"], '{"' + n + '":' + e.join("") + "}"
},
RUCTrip.prototype.ToTableRow = function(n, t, i)
{
    var v = this.GetZoneTd(this.StartZoneId, this.StartLoc, this.StartZoneSnapped, this.StartZoneSelected),
        y = this.GetZoneTd(this.EndZoneId, this.EndLoc, this.EndZoneSnapped, this.EndZoneSelected),
        c = "src='" + URL.PRIVATE + "'",
        u,
        r,
        s,
        f,
        e,
        o,
        h;
    for ((this.Designation == 2 || this.Designation == 4) && (c = "src='" + URL.BUSINESS + "'"), u = "<span class='trailers'>", r = 0; r < $("#ddlTrailerSelect")[0].options.length; r++)
    {
        for (s = !1, f = 0; f < this.Trailers.length; f++)
            this.Trailers[f] == $("#ddlTrailerSelect")[0].options[r].value && (u += "<span title='" + $("#ddlTrailerSelect")[0].options[r].innerHTML + "' class='spn" + $("#ddlTrailerSelect")[0].options[r].value + " s" + r % 4 + " on'><\/span>", s = !0);
        s == !1 && (u += "<span title='" + $("#ddlTrailerSelect")[0].options[r].innerHTML + "' class='spn" + $("#ddlTrailerSelect")[0].options[r].value + " s" + r % 4 + " off'><\/span>")
    }
    u += "<\/span>",
    e = new Date(this.TripStartDate),
    e = e.toShortTimeString(),
    o = new Date(this.TripEndDate),
    o = o.toShortTimeString(),
    h = e + " - " + o,
    this.MergedTrip === !0 && (h += "<span class='id' title='Merged Trip'>&nbsp;&nbsp;+<\/span>");
    var w = this.Comment == null ? "" : this.Comment,
        l = this.CategoryId == null ? "" : " style='padding-right: 2px; background-color: " + i + ";'",
        b = $("#thCategory").length > 0 ? ["<td class='cat'><div id='c", this.CategoryId == null ? 0 : this.CategoryId, "'", l, "><\/div><\/td>"].join("") : "",
        p = this.OffroadDistanceMetres > 0 | this.OffroadDurationSeconds > 0 ? "offroadComponentTrip" : "onroadTrip",
        a = ["<tr class='" + p + "' id='", this.Id, "'><td " + l + "><input class='chkTrip" + RUCTrip.prototype.TitleRowNumber + "' id=chkTrip" + this.Id + " type='checkbox'><\/td><td>" + u + "<\/td><td class='comment'>", h, "<\/td>", v, y, "<td>" + Format.Distance(this.OffroadDistanceMetres) + "/" + Format.Distance(this.Distance) + "<\/td>", "<td>" + this.OffroadDurationSeconds.removeSeconds() + "/" + this.Duration.removeSeconds() + "<\/td>", "<td><img id='Designation" + this.Id + "'" + c + "/><\/td>", this.Processed == !1 ? "<td style='color:red;' title='This trip is either currently being processed to determine offroad components, or you do not have a valid RUC subscription. Please check again in a few minutes.'><b>!<\/b><\/td>" : "<td><a href='javascript:;' title='View trip on map'>View<\/a><\/td>"];
    return a.push("<\/tr>"), a.join("")
},
RUCTrip.prototype.GetPoints = function()
{
    var n = this.Points,
        r,
        u = this.Id,
        i = !0,
        t;
    return (this.Points == undefined || this.Points.length == 0) && (t = "{'tripId':" + u + ", 'startIndex':null}", DoAjax({
            data: t, url: "/MappingWebService.asmx/GetRUCTripDataRange", successCallback: function(f)
                {
                    var e = f.d[1];
                    for (n = f.d[0]; e === !0; )
                        t = "{'tripId':" + u + ", 'startIndex':" + (n[n.length - 1][2] + 1) + "}",
                        DoAjax({
                            data: t, url: "/MappingWebService.asmx/GetRUCTripDataRange", successCallback: function(t)
                                {
                                    e = t.d[1],
                                    n.add(t.d[0])
                                }, errorCallback: function(t, r)
                                {
                                    e = !1,
                                    n = null,
                                    alert(r),
                                    i = !1
                                }, doAsync: !1
                        });
                    r = f.d.LineWKT
                }, errorCallback: function(t, r)
                {
                    n = null,
                    alert(r),
                    i = !1
                }, doAsync: !1
        })), this.Points = n, this.WKT = r, i
},
URL = function()
{
    return {
            PRIVATE: "../Images/private.png", BUSINESS: "../Images/business.png", EDIT: "../Images/edit.png", DOWN: "../Images/so_down.png", UP: "../Images/so_up.png", DELETE: "../Images/delete.png", PIN: "../Images/pin.png"
        }
}(),
MESSAGES = function()
{
    return {
            COMMENT_LENGTH: "Comment length may not exceed 255 characters.", WS_ERR_DELETE_TRIP: "There was an error in the webservice and the trip was not deleted.", INFO_CIRCLE: "Drag the pin to position the zone and adjust the zone radius with the slider.", INFO_CUSTOM: "Drag the pins to change the zone's shape.", INFO_CIRCLE_NEW: "Click on the map to place the center of a new circular zone.", INFO_CUSTOM_NEW: "Click the outline of the new shape on the map. Click on the pin to close the shape.", REDRAW_CUSTOM: "Discard this shape and draw a new one", REPLACE_CUSTOM: "Replace this zone shape with a circle", REPLACE_CIRCLE: "Replace the zone circle with a shape", CHANGE_ZONE_SHAPE: "By changing the shape of your zone, some of your trips \nwill now fall outside the zone, and be marked as 'unknown'.\nDo you want to continue?", INVALID_SHAPE_INTERSECT: "Invalid shape. A shape may not intersect itself. Please redraw the shape", WS_ERR_DELETE_ZONE: "There was an error in the webservice and the zone was not deleted.", WS_ERR_SAVE_ZONE: "Zone not saved!\nDo you want to try again?", PLACE_CIRCLE: "Please click on the map to create your zone", PLACE_CUSTOM: "Please click on the map to draw a shape on the map.", INVALID_SHAPE_POINTS: "Invalid shape! A shape must have 4 or more points. \nPlease redraw the shape.", INVALID_SHAPE_OPEN: "Please click on the pin to close the shape!"
        }
}(),
RUCTripPopup = function()
{
    function g(i)
    {
        addToCrumbtrail("RUCTripPopup.LoadDiv(trip)"),
        n = i,
        t == null ? WaitLoaded(tt) : d()
    }
    function nt(t)
    {
        var i = -1,
            r = $("#ddlTripTrailers")[0].selectedIndex;
        $("#hdnAddRemoveTrailer").val() == "a" ? (i = $("#ddlTripTrailers")[0].options[r].value, $.inArray(parseInt(i), n.Trailers) != -1 && (i = -1)) : i = t.srcElement.getAttribute("data-id"),
        n != null && i > 0 && AssignTrailer([n.Id], i, $("#ddlTripTrailers")[0].options[r].innerHTML)
    }
    function tt()
    {
        addToCrumbtrail("RUCTripPopup.scriptLoaded()"),
        ht("divTripMap", null),
        d()
    }
    function d()
    {
        addToCrumbtrail("RUCTripPopup.ContinueLoadingDiv()"),
        $("#tblTripDetails").show(),
        $("#tblTripSplit").hide(),
        $(".popupBackground").show(),
        $("#divTripPopup").toggleClass("hide"),
        p = n.Designation,
        w = n.Comment,
        b = n.VehicleId,
        k = n.CategoryId,
        l = new google.maps.Marker({icon: "../Images/car.png"}),
        a(null)
    }
    function it(n)
    {
        var r,
            u,
            i,
            t;
        for (addToCrumbtrail("RUCTripPopup.LoadDivContent(trip)"), r = new Date(n.TripStartDate), u = new Date(n.TripEndDate), $("#tdTripDate").text(n.Title), $("#tdTripTimeDeparted").text(r.toLongTimeString()), $("#tdTripTimeArrived").text(u.toLongTimeString()), $("#tdDuration").text(n.OffroadDurationSeconds + "/" + n.Duration), $("#tdDistanceTravelled").text(Format.Distance(n.OffroadDistanceMetres) + "/" + Format.Distance(n.Distance)), $("#tdMaxSpeed").text(Format.Speed(n.MaxSpeed)), $("#tdAvgSpeed").text(Format.Speed(n.AvgSpeed)), $("#trTripCategory").length > 0 && (n.CategoryId != null ? (i = GetCategory(n.CategoryId), $("#spTripCategory").empty().text(i.sCategory), $("#divTripCategory").removeClass("catEmpty").css("background-color", i.sColourHex)) : ($("#spTripCategory").empty(), $("#divTripCategory").addClass("catEmpty").css("background-color", "transparent"))), n.Designation == 1 || n.Designation == 3 ? ($("#imgDesignation")[0].src = URL.PRIVATE, $("#txtDesignation")[0].innerHTML = "Private") : (n.Designation == 2 || n.Designation == 4) && ($("#imgDesignation")[0].src = URL.BUSINESS, $("#txtDesignation")[0].innerHTML = "Business"), UserMappingSettings.Vehicles.length > 1 ? ($("#aChangeVehicle").text(GetVehicle(n.VehicleId).sRegistration), $("#trVehicle").show()) : $("#trVehicle").hide(), n.StartZoneId != null ? $("#txtStartLoc").html(n.StartLoc) : n.StartLoc != null ? $("#txtStartLoc").html(n.StartLoc + " <span style='color: red'>(U)<\/span>") : $("#txtStartLoc").html("<span style='color: red'>Unknown<\/span>"), n.EndZoneId != null ? $("#txtEndLoc").text(n.EndLoc) : n.EndLoc != null ? $("#txtEndLoc").html(n.EndLoc + " <span style='color: red'>(U)<\/span>") : $("#txtEndLoc").html("<span style='color: red'>Unknown<\/span>"), n.Comment != null && $("#txtTripComment").val(n.Comment), $("ul#ulTripTrailers > li").remove(), t = 0; t < n.Trailers.length; t++)
            $("ul#ulTripTrailers").prepend("<li class='liTrailer" + n.Trailers[t] + "'>" + n.TrailerRegistrations[t] + "&nbsp<a data-id='" + n.Trailers[t] + "' style='color:red' href='javascript:;' class='aRemoveTripTrailer'>X<\/a><\/li>");
        $("a.aRemoveTripTrailer").live("click", function(n, t)
        {
            $("#hdnAddRemoveTrailer").val("r"),
            RUCTripPopup.AssignTripTrailer(n, t)
        })
    }
    function a(i)
    {
        (addToCrumbtrail("RUCTripPopup.GetNewTrip(nextIndex)"), i !== null && (n = g_atTrips[i]), w = n.Comment, p = n.Designation, b = n.VehicleId, k = n.CategoryId, it(n), google.maps.event.trigger(t, "resize"), st(n) !== !1) && n.Id === y && $("#divTripMapCover").css("display", "none")
    }
    function v()
    {
        if (addToCrumbtrail("RUCTripPopup.ClearDivContent()"), y = n.Id, s(null), h(n), n = null, t != null)
        {
            var i = t.getStreetView();
            i != undefined && i.getVisible() == !0 && i.setVisible(!1)
        }
        $("#tdTripDate").text(""),
        $("#tdDistanceTravelled").text(""),
        $("#tdMaxSpeed").text(""),
        $("#tdAvgSpeed").text(""),
        $("#txtStartLoc").text(""),
        $("#txtEndLoc").text(""),
        $("#txtTripComment").val(""),
        e != null & e != undefined && google.maps.event.removeListener(e),
        $("#chkShowTripData")[0].checked === !0 && o(),
        $("#divTripPopup").toggleClass("hide"),
        $(".popupBackground").hide(),
        g_fPopupOpen = !1,
        $("#divTripMapCover").css("display", "block"),
        $("#spTripCategory").empty(),
        $("#divTripCategory").addClass("catEmpty").css("background-color", "transparent");
        try
        {
            SplitTrip.Clear()
        }
        catch(r) {}
    }
    function o()
    {
        addToCrumbtrail("RUCTripPopup.ResetHeadsUp()"),
        l.setMap(null),
        $("#divTripData").css("display", "none"),
        $("#chkShowTripData")[0].checked = !1,
        $("#divShowTripData").show(),
        $("#tdTime").text(""),
        $("#tdSpeed").text(""),
        $("#tdAltitude").text(""),
        $("#tdHeading").text("")
    }
    function s(n)
    {
        addToCrumbtrail("RUCTripPopup.SetZonesMap(map)"),
        r != undefined && r.Geometry != undefined && r.Geometry.setMap(n),
        u != undefined && u.Geometry != undefined && u.Geometry.setMap(n)
    }
    function rt()
    {
        var t,
            i;
        for (addToCrumbtrail("RUCTripPopup.btnPreviousTrip_Click(btn)"), $("#divTripMapCover").css("display", "block"), h(n), s(null), $.each(g_atTrips, function(i, r)
            {
                if (n.Id == r.Id)
                    return t = i, !1
            }), i = !0; i; )
            newIndex = iSortOrder == 1 ? t + 1 < g_atTrips.length ? t + 1 : 0 : t - 1 >= 0 ? t - 1 : g_atTrips.length - 1,
            $("#v1").text() == "Show All Trips" ? g_atTrips[newIndex].OffroadDistanceMetres > 0 ? i = !1 : t = newIndex : i = !1;
        $("#chkShowTripData")[0].checked === !0 && o(),
        a(newIndex)
    }
    function ut()
    {
        var t,
            i,
            r;
        for (addToCrumbtrail("RUCTripPopup.btnNextTrip_Click(btn)"), $("#divTripMapCover").css("display", "block"), h(n), s(null), $.each(g_atTrips, function(i, r)
            {
                if (n.Id == r.Id)
                    return t = i, !1
            }), r = !0; r; )
            i = iSortOrder == 1 ? t - 1 >= 0 ? t - 1 : g_atTrips.length - 1 : t + 1 < g_atTrips.length ? t + 1 : 0,
            $("#v1").text() == "Show All Trips" ? g_atTrips[i].OffroadDistanceMetres > 0 ? r = !1 : t = i : r = !1;
        $("#chkShowTripData")[0].checked === !0 && o(),
        a(i)
    }
    function ft(n)
    {
        addToCrumbtrail("RUCTripPopup.chkShowTripData_CheckChanged(checkbox)"),
        n.checked === !0 ? ($("#divTripData").css("display", "block"), $("#divShowTripData").hide()) : ($("#divTripData").css("display", "none"), google.maps.event.removeListener(e), $("#tdTime").text(""), $("#tdSpeed").text(""), $("#tdAltitude").text(""), $("#tdHeading").text(""), l.setMap(null), $("#divShowTripData").show())
    }
    function et()
    {
        addToCrumbtrail("RUCTripPopup.divTPCancel()"),
        v()
    }
    function ot(n)
    {
        addToCrumbtrail("RUCTripPopup.createMapLoadedlistener(map)"),
        google.maps.event.addListenerOnce(n, "tilesloaded", function()
        {
            addToCrumbtrail("RUCTripPopup. map tiles loaded event"),
            $("#divTripMapCover").css("display", "none"),
            google.maps.event.addListener(n, "idle", function()
            {
                addToCrumbtrail("RUCTripPopup. map idle event"),
                $("#divTripMapCover").css("display", "none")
            })
        })
    }
    function st(n)
    {
        if (addToCrumbtrail("RUCTripPopup.DrawOnMap(_trip)"), n.Points == undefined && n.GetPoints() === !1)
            return v(), !1;
        ct(n),
        r = g_Zones.GetZone(n.StartZoneId, !0),
        u = g_Zones.GetZone(n.EndZoneId, !0),
        s(t),
        lt(n),
        at(n),
        t.fitBounds(n.Bounds),
        n.MapZoom = t.getZoom(),
        n.MapCenter = t.getCenter()
    }
    function ht(i, r)
    {
        var u,
            f;
        addToCrumbtrail("RUCTripPopup.InitializeTripMap(mapDiv, center)");
        try
        {
            u = r != null ? r : new google.maps.LatLng(n.Points[0][1], n.Points[0][0])
        }
        catch(e)
        {
            u = new google.maps.LatLng(0, 0)
        }
        f = {
            center: u, mapTypeId: google.maps.MapTypeId.ROADMAP
        },
        t = new google.maps.Map(document.getElementById(i), f),
        t != null && t.setZoom(20),
        c != null & c != undefined && google.maps.event.removeListener(c),
        ot(t)
    }
    function h(n)
    {
        var i,
            t,
            r;
        if (addToCrumbtrail("RUCTripPopup.ClearTripOffMap(trip)"), n.Lines != null)
            for (t = 0; t < n.Lines.length; t++)
                n.Lines[t].setMap(null);
        if (n.TripAdjustment != undefined)
            for (i = n.TripAdjustment.length, t = 0; t < i; t++)
                n.TripAdjustment[t].setMap(null);
        if (n.TripAdjustment = [], n.Markers != undefined)
            for (i = n.Markers.length, r = 0; r < i; r++)
                n.Markers[r].setMap(null);
        n.Markers = []
    }
    function ct(n)
    {
        var c,
            r;
        if (addToCrumbtrail("RUCTripPopup.DrawTripLine(trip)"), n.Lines != null)
        {
            for (r = 0; r < n.Lines.length; r++)
                n.Lines[r].setOptions({map: t});
            return
        }
        iColour = 0;
        var u = [],
            h = [],
            l = n.Points.length,
            e = n.Points,
            s,
            o = [];
        for (s = e[0][3] == 1 ? !0 : !1, c = 0, r = 0; r < l - 1; r++)
            e[r][3] == 1 && e[r + 1][3] == 1 ? s == !0 ? (u[c] = new google.maps.LatLng(e[r][1], e[r][0]), c++) : (s = !0, u[c] = new google.maps.LatLng(e[r][1], e[r][0]), o = i(n, o, u, Colors.Red.hash()), h = f(u, h), u = [], u[0] = new google.maps.LatLng(e[r][1], e[r][0]), c = 1) : s == !1 ? (u[c] = new google.maps.LatLng(e[r][1], e[r][0]), c++) : (s = !1, u[c] = new google.maps.LatLng(e[r][1], e[r][0]), o = i(n, o, u, Colors.Green.hash()), h = f(u, h), u = [], u[0] = new google.maps.LatLng(e[r][1], e[r][0]), c = 1);
        e[l - 1][3] == 1 && s == !0 || e[l - 1][3] == 0 && s == !1 ? (u[c] = new google.maps.LatLng(e[r][1], e[r][0]), o = s == !0 ? i(n, o, u, Colors.Green.hash()) : i(n, o, u, Colors.Red.hash()), h = f(u, h)) : (e[l - 1][3] == 0 && s == !0 || e[l - 1][3] == 1 && s == !1) && (o = s == !0 ? i(n, o, u, Colors.Green.hash()) : i(n, o, u, Colors.Red.hash()), h = f(u, h), u = [], u[0] = new google.maps.LatLng(e[r - 1][1], e[r - 1][0]), u[1] = new google.maps.LatLng(e[r][1], e[r][0]), o = s == !0 ? i(n, o, u, Colors.Green.hash()) : i(n, o, u, Colors.Red.hash()), h = f(u, h)),
        n.Lines = o,
        n.Bounds = GoogleMapExtensions.GetLineBounds(h)
    }
    function f(n, t)
    {
        for (var i = 0; i < n.length; i++)
            t.push(n[i]);
        return t
    }
    function i(n, i, r, u)
    {
        return lineOptions = {
                clickable: !0, geodesic: !1, path: r, strokeColor: u, strokeOpacity: 1, strokeWeight: 2, zIndex: n.Id, map: t
            }, i.push(new google.maps.Polyline(lineOptions)), i
    }
    function lt(n)
    {
        var i,
            r;
        addToCrumbtrail("RUCTripPopup.Map_AddMarkers(trip)"),
        i = n.StartLoc,
        n.StartZoneId == null ? i = "Unknown" : n.StartLoc.Name != undefined && (i = n.StartLoc.Name),
        r = n.EndLoc,
        n.EndZoneId == null ? r = "Unknown" : n.EndLoc.Name != undefined && (r = n.EndLoc.Name),
        n.Markers[0] = SetupLabelMarker({
            map: t, position: n.Points[0], hexColor: Colors.Green, markerLetter: "A", cursorString: i
        }),
        n.Markers[1] = SetupLabelMarker({
            map: t, position: n.Points[n.Points.length - 1], hexColor: Colors.Red, markerLetter: "B", cursorString: r
        })
    }
    function at(n)
    {
        var f,
            e,
            i,
            o;
        for (addToCrumbtrail("RUCTripPopup.AddTripAdjustments(trip)"), f = n.TripAdjustment.length, e = 0; e < f; e++)
            n.TripAdjustment[e].setMap(null);
        n.TripAdjustment = [],
        f = 0,
        i = [],
        (n.StartZoneSnapped || n.StartZoneSelected) && n.StartZoneId != null && (i[0] = GoogleMapExtensions.GetZoneCenter(r), i[1] = new google.maps.LatLng(n.Points[0][1], n.Points[0][0]), lineOptions = {
                clickable: !0, geodesic: !1, map: t, path: i, strokeColor: Colors.LightBlue.hash(), strokeOpacity: 1, strokeWeight: 2, zIndex: n.Id
            }, n.TripAdjustment[f++] = new google.maps.Polyline(lineOptions), n.Markers[0].setOptions({position: i[0]})),
        (n.EndZoneSnapped || n.EndZoneSelected) && n.EndZoneId != null && (i[0] = GoogleMapExtensions.GetZoneCenter(u), o = n.Points.length - 1, i[1] = new google.maps.LatLng(n.Points[o][1], n.Points[o][0]), lineOptions = {
                clickable: !0, geodesic: !1, map: t, path: i, strokeColor: Colors.LightBlue.hash(), strokeOpacity: 1, strokeWeight: 2, zIndex: n.Id
            }, n.TripAdjustment[f] = new google.maps.Polyline(lineOptions), n.Markers[1].setOptions({position: i[0]}))
    }
    function vt(t)
    {
        UserMappingSettings.Vehicles.length > 1 && pVehiclePopup.show(t, {
            callback: yt, selected: n.VehicleId
        })
    }
    function yt(t)
    {
        if (t.id == "")
            return !1;
        t.id != n.VehicleId && (n.VehicleId = t.id, $("#aChangeVehicle").text(GetVehicle(t.id).sRegistration))
    }
    var t = null,
        e,
        c,
        n,
        r,
        u,
        y = null,
        pt = {strokeColor: Colors.Red.hash()},
        p,
        w,
        b,
        k,
        l;
    return {
            LoadDiv: g, divTPCancel: et, btnPreviousTrip_Click: rt, btnNextTrip_Click: ut, chkShowTripData_CheckChanged: ft, ClearTripOffMap: h, ChangeVehicle: vt, ResetHeadsUp: o, AssignTripTrailer: nt
        }
}();
var g_SelectedTrip,
    g_atTrips,
    g_Zones,
    iTripsPerView,
    iCurrentMaxRecord,
    iSortOrder,
    iPageNumber,
    iFilterId,
    bPoint,
    fZonePopupLinkClicked,
    fEditing,
    m_iVehicleId,
    asMonthArray,
    tripCommentLength = 300,
    g_fPopupOpen,
    g_fGoogleApiLoaded,
    g_fGoogleApiLoading,
    g_aVehicles,
    pVehiclePopup,
    pCategoryPopup,
    pTripMoreOptions,
    asVehicleOptions,
    iMaxSnappingDistance = 1e3,
    iMaxZoneRadius = 500,
    g_aCrumbTrail = [],
    UserMappingSettings,
    GetTripAjax,
    ScriptLoadComplete = !1;
$(document).ready(function()
{
    addToCrumbtrail("document.ready"),
    $(".popupBackground").hide(),
    iTripsPerView = 20,
    iCurrentMaxRecord = 0,
    iSortOrder = 1,
    iPageNumber = 1,
    iFilterId = 0,
    fZonePopupLinkClicked = !1,
    fEditing = !1,
    g_iDateRangeId = 0,
    dtStart = null,
    dtEnd = null,
    g_atTrips = null,
    g_atTrips = [],
    g_fPopupOpen = !1,
    g_fGoogleApiLoaded = !1,
    g_fGoogleApiLoading = !1,
    g_Zones == undefined && (g_Zones = new Zones),
    $("ul.tripSortTabs li").click(function()
    {
        return this.id != "v0" && this.id != "v1" ? ($("ul.tripSortTabs li").removeClass("active"), $(this).addClass("active"), this.id != "d4" ? ($("#ddlMonthSelector").css("color", "#999"), $("#d4").css("color", "#999"), NewTable()) : ($("#ddlMonthSelector").css("color", "#000"), $("#d4").css("color", "#000"))) : this.id == "v1" && ($("#v1").text() == "Show All Trips" ? ($(".onroadTrip").show(), $("#v1").text("Offroad Trips")) : ($(".onroadTrip").hide(), $("#v1").text("Show All Trips"))), !1
    }),
    $("ul.tripSortTabs li:nth-child(3)").addClass("active");
    var n = PopulateMonthSelector(new Date);
    asMonthArray = n.MonthArray,
    $("#ddlMonthSelector").append(n.OptionArray.join(" ")),
    $(window).resize(CenterPopups),
    CenterPopups(),
    GetUserMappingSettings(),
    g_fPreloadMaps && LoadGoogleApi(),
    $("[type=checkbox]").click(function(n)
    {
        ToggleCheckBoxes(n)
    }),
    $("a#aAddTrailer").click(function()
    {
        $("#hdnAddRemoveTrailer").val("a"),
        $("#lblTrailerPopupHeading").text("Link Trailer to Trip"),
        ShowAddRemoveTrailerPopup()
    }),
    $("a#aUnlinkTrailer").click(function()
    {
        $("#hdnAddRemoveTrailer").val("r"),
        $("#lblTrailerPopupHeading").text("Unlink Trailer from Trip"),
        ShowAddRemoveTrailerPopup()
    }),
    $("a#aAddTripTrailer").click(function()
    {
        $("#hdnAddRemoveTrailer").val("a"),
        $("#ddlTripTrailers")[0].selectedIndex = 0,
        $("#ddlTripTrailers").show(),
        $("a#aAddTripTrailer").hide()
    }),
    $("#ddlTripTrailers").change(function()
    {
        $("#ddlTripTrailers").hide(),
        $("a#aAddTripTrailer").show(),
        RUCTripPopup.AssignTripTrailer()
    }),
    $("a#aSaveAsignTrailer").click(function()
    {
        var n = [];
        $("input:checkbox:checked").each(function()
        {
            $(this)[0].id.indexOf("chkTrip") == 0 && n.push($(this)[0].id.substr(7))
        });
        var t = $("#ddlTrailerSelect").val(),
            i = $("#ddlTrailerSelect")[0].selectedIndex,
            r = $("#ddlTrailerSelect")[0].options[i].innerHTML;
        AssignTrailer(n, t, r)
    })
}),
$("div#divCatEdit a").live("click", function(n)
{
    var i,
        r,
        t;
    (n.preventDefault(), UserMappingSettings.AllowTripCategorization !== !1) && (i = $(this).attr("href"), i == "cancel" ? ($.unblockUI(), pCategoryPopup.focus()) : i == "done" && (r = $("div.category"), t = [], $.each(r, function(n, i)
        {
            var u = parseInt(i.id.replace(/[^\d-]/g, "")),
                r = $("#" + i.id + " input").val().replace(/^[ ]{0,}/, "").replace(/[ ]{0,}$/, "");
            r.length == 0 && (r = null);
            var f = $("#" + i.id + " div.category-color").css("background-color"),
                e = {
                    iCategoryId: u, sCategory: r, sColourHex: f
                },
                o = GetCategoryText(u);
            o != r && t.push(e)
        }), t.length > 0 ? $.ajax({
            type: "POST", url: "../MappingWebService.asmx/EditCategories", contentType: "application/json; charset=utf-8", data: JSON.stringify({cats: t}), dataType: "json", success: function(n)
                {
                    n.d[0] == !0 ? (n.d[1].unshift({
                        iCategoryId: 0, sCategory: "None", sColourHex: "transparent"
                    }), n.d[1].push({
                        iCategoryId: -99, sCategory: "Edit", sColourHex: "transparent"
                    }), pCategoryPopup.setDatasource(n.d[1]), UserMappingSettings.Categories = n.d[1], $.each(t, function(n, t)
                        {
                            $("table.categoryPopupTable tr td#" + t.iCategoryId + " div").text(t.sCategory)
                        }), pCategoryPopup.close(), $.unblockUI()) : alert(n.d[1])
                }, error: function(n)
                {
                    if (n.statusText == "abort")
                        return !1;
                    alert(n.responseText)
                }, async: !1
        }) : $.unblockUI()))
}),
$("select#ddlVehicle").change(function()
{
    return ChangeVehicle(), !1
}),
$("select#ddlMonthSelector").change(function()
{
    NewTable()
}),
tableCellEnum = function()
{
    var n = $("#thCategory").length > 0 ? 1 : 0;
    return {ViewTrip: 9 + n}
}(),
$("#tableTrips").mousedown(function(n)
{
    var t,
        i,
        r,
        u;
    if (UserMappingSettings.Vehicles != null)
    {
        if (addToCrumbtrail("$('#tableTrips').mousedown"), n.which == 1)
        {
            for (t = n.target, i = t.parentNode; i.nodeName != "TR"; )
                i.nodeName == "TD" && (r = i.cellIndex),
                i = i.parentNode;
            if (u = i.id, t.parentNode.nodeName == "TH" && t.nodeName == "A")
                ChangeDateSortOrder(t);
            else if (t.nodeName == "A" && (t.innerText == "View" || t.innerHTML == "View"))
                OpenTripPopup(u);
            else if (t.nodeName === "IMG")
                switch (r)
                {
                }
            else
                t.nodeName == "TD" ? r = t.cellIndex : t.nodeName == "INPUT" && ToggleCheckBoxes(n)
        }
        return !1
    }
}),
$("#spViewLive a").click(function(n)
{
    n.preventDefault(),
    g_fPreloadMaps === !1 && g_fGoogleApiLoaded === !1 && LoadGoogleApi();
    var i = $("#ddlVehicle").val(),
        t = GetVehicle(i).iDeviceId;
    t && LivePopup.Show([parseInt(t)])
}),
$(".inputTextArea, #txtTripComment").keypress(function(n)
{
    if (n.which == 0 || n.which == 8 || n.which == 32)
        return !0;
    var t = this.id == "txtTripComment" ? 255 : 300;
    return this.value.length < t
})